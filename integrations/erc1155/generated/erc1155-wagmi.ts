// Generated by @wagmi/cli@1.3.0 on 8/6/2023 at 6:43:45 PM
import {
  useContractRead,
  UseContractReadConfig,
  useContractWrite,
  UseContractWriteConfig,
  usePrepareContractWrite,
  UsePrepareContractWriteConfig,
  useContractEvent,
  UseContractEventConfig,
} from 'wagmi'
import { ReadContractResult, WriteContractMode, PrepareWriteContractResult } from 'wagmi/actions'

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// erc1155
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

export const erc1155ABI = [
  {
    stateMutability: 'nonpayable',
    type: 'constructor',
    inputs: [
      { name: 'name_', internalType: 'string', type: 'string' },
      { name: 'symbol_', internalType: 'string', type: 'string' },
    ],
  },
  { type: 'error', inputs: [], name: 'ERC1155Base__ArrayLengthMismatch' },
  { type: 'error', inputs: [], name: 'ERC1155Base__BalanceQueryZeroAddress' },
  { type: 'error', inputs: [], name: 'ERC1155Base__BurnExceedsBalance' },
  { type: 'error', inputs: [], name: 'ERC1155Base__BurnFromZeroAddress' },
  { type: 'error', inputs: [], name: 'ERC1155Base__ERC1155ReceiverNotImplemented' },
  { type: 'error', inputs: [], name: 'ERC1155Base__ERC1155ReceiverRejected' },
  { type: 'error', inputs: [], name: 'ERC1155Base__MintToZeroAddress' },
  { type: 'error', inputs: [], name: 'ERC1155Base__NotOwnerOrApproved' },
  { type: 'error', inputs: [], name: 'ERC1155Base__SelfApproval' },
  { type: 'error', inputs: [], name: 'ERC1155Base__TransferExceedsBalance' },
  { type: 'error', inputs: [], name: 'ERC1155Base__TransferToZeroAddress' },
  { type: 'error', inputs: [], name: 'ERC165Base__InvalidInterfaceId' },
  { type: 'error', inputs: [], name: 'EnumerableSet__IndexOutOfBounds' },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: '_owner', internalType: 'address', type: 'address', indexed: true },
      { name: '_spender', internalType: 'address', type: 'address', indexed: true },
      { name: '_id', internalType: 'uint256', type: 'uint256', indexed: true },
      { name: '_value', internalType: 'uint256', type: 'uint256', indexed: false },
    ],
    name: 'Approval',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'account', internalType: 'address', type: 'address', indexed: true },
      { name: 'operator', internalType: 'address', type: 'address', indexed: true },
      { name: 'approved', internalType: 'bool', type: 'bool', indexed: false },
    ],
    name: 'ApprovalForAll',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'previousOwner', internalType: 'address', type: 'address', indexed: true },
      { name: 'newOwner', internalType: 'address', type: 'address', indexed: true },
    ],
    name: 'OwnershipTransferred',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'operator', internalType: 'address', type: 'address', indexed: true },
      { name: 'from', internalType: 'address', type: 'address', indexed: true },
      { name: 'to', internalType: 'address', type: 'address', indexed: true },
      { name: 'ids', internalType: 'uint256[]', type: 'uint256[]', indexed: false },
      { name: 'values', internalType: 'uint256[]', type: 'uint256[]', indexed: false },
    ],
    name: 'TransferBatch',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'operator', internalType: 'address', type: 'address', indexed: true },
      { name: 'from', internalType: 'address', type: 'address', indexed: true },
      { name: 'to', internalType: 'address', type: 'address', indexed: true },
      { name: 'id', internalType: 'uint256', type: 'uint256', indexed: false },
      { name: 'value', internalType: 'uint256', type: 'uint256', indexed: false },
    ],
    name: 'TransferSingle',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'value', internalType: 'string', type: 'string', indexed: false },
      { name: 'tokenId', internalType: 'uint256', type: 'uint256', indexed: true },
    ],
    name: 'URI',
  },
  { stateMutability: 'view', type: 'function', inputs: [], name: 'Fungible', outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }] },
  { stateMutability: 'view', type: 'function', inputs: [], name: 'NonFungible', outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }] },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'NonFungible2nd',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'id', internalType: 'uint256', type: 'uint256' }],
    name: 'accountsByToken',
    outputs: [{ name: '', internalType: 'address[]', type: 'address[]' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [
      { name: '_owner', internalType: 'address', type: 'address' },
      { name: '_spender', internalType: 'address', type: 'address' },
      { name: '_id', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'allowance',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: '_spender', internalType: 'address', type: 'address' },
      { name: '_id', internalType: 'uint256', type: 'uint256' },
      { name: '_value', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'approve',
    outputs: [],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [
      { name: 'account', internalType: 'address', type: 'address' },
      { name: 'id', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'balanceOf',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [
      { name: 'accounts', internalType: 'address[]', type: 'address[]' },
      { name: 'ids', internalType: 'uint256[]', type: 'uint256[]' },
    ],
    name: 'balanceOfBatch',
    outputs: [{ name: '', internalType: 'uint256[]', type: 'uint256[]' }],
  },
  { stateMutability: 'view', type: 'function', inputs: [], name: 'contractURI', outputs: [{ name: '', internalType: 'string', type: 'string' }] },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [
      { name: 'account', internalType: 'address', type: 'address' },
      { name: 'operator', internalType: 'address', type: 'address' },
    ],
    name: 'isApprovedForAll',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'account', internalType: 'address', type: 'address' },
      { name: 'id', internalType: 'uint256', type: 'uint256' },
      { name: 'amount', internalType: 'uint256', type: 'uint256' },
      { name: 'uri_', internalType: 'string', type: 'string' },
    ],
    name: 'mint',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'to', internalType: 'address', type: 'address' },
      { name: 'ids', internalType: 'uint256[]', type: 'uint256[]' },
      { name: 'amounts', internalType: 'uint256[]', type: 'uint256[]' },
      { name: 'data', internalType: 'bytes', type: 'bytes' },
    ],
    name: 'mintBatch',
    outputs: [],
  },
  { stateMutability: 'view', type: 'function', inputs: [], name: 'name', outputs: [{ name: '', internalType: 'string', type: 'string' }] },
  { stateMutability: 'view', type: 'function', inputs: [], name: 'owner', outputs: [{ name: '', internalType: 'address', type: 'address' }] },
  { stateMutability: 'nonpayable', type: 'function', inputs: [], name: 'renounceOwnership', outputs: [] },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'from', internalType: 'address', type: 'address' },
      { name: 'to', internalType: 'address', type: 'address' },
      { name: 'ids', internalType: 'uint256[]', type: 'uint256[]' },
      { name: 'amounts', internalType: 'uint256[]', type: 'uint256[]' },
      { name: 'data', internalType: 'bytes', type: 'bytes' },
    ],
    name: 'safeBatchTransferFrom',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'from', internalType: 'address', type: 'address' },
      { name: 'to', internalType: 'address', type: 'address' },
      { name: 'id', internalType: 'uint256', type: 'uint256' },
      { name: 'amount', internalType: 'uint256', type: 'uint256' },
      { name: 'data', internalType: 'bytes', type: 'bytes' },
    ],
    name: 'safeTransferFrom',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'operator', internalType: 'address', type: 'address' },
      { name: 'status', internalType: 'bool', type: 'bool' },
    ],
    name: 'setApprovalForAll',
    outputs: [],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'interfaceId', internalType: 'bytes4', type: 'bytes4' }],
    name: 'supportsInterface',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
  { stateMutability: 'view', type: 'function', inputs: [], name: 'symbol', outputs: [{ name: '', internalType: 'string', type: 'string' }] },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'account', internalType: 'address', type: 'address' }],
    name: 'tokensByAccount',
    outputs: [{ name: '', internalType: 'uint256[]', type: 'uint256[]' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'id', internalType: 'uint256', type: 'uint256' }],
    name: 'totalHolders',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'id', internalType: 'uint256', type: 'uint256' }],
    name: 'totalSupply',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: 'newOwner', internalType: 'address', type: 'address' }],
    name: 'transferOwnership',
    outputs: [],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'tokenId', internalType: 'uint256', type: 'uint256' }],
    name: 'uri',
    outputs: [{ name: '', internalType: 'string', type: 'string' }],
  },
] as const

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// React
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link erc1155ABI}__.
 */
export function useErc1155Read<TFunctionName extends string, TSelectData = ReadContractResult<typeof erc1155ABI, TFunctionName>>(
  config: Omit<UseContractReadConfig<typeof erc1155ABI, TFunctionName, TSelectData>, 'abi'> = {} as any
) {
  return useContractRead({ abi: erc1155ABI, ...config } as UseContractReadConfig<typeof erc1155ABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link erc1155ABI}__ and `functionName` set to `"Fungible"`.
 */
export function useErc1155Fungible<TFunctionName extends 'Fungible', TSelectData = ReadContractResult<typeof erc1155ABI, TFunctionName>>(
  config: Omit<UseContractReadConfig<typeof erc1155ABI, TFunctionName, TSelectData>, 'abi' | 'functionName'> = {} as any
) {
  return useContractRead({ abi: erc1155ABI, functionName: 'Fungible', ...config } as UseContractReadConfig<
    typeof erc1155ABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link erc1155ABI}__ and `functionName` set to `"NonFungible"`.
 */
export function useErc1155NonFungible<TFunctionName extends 'NonFungible', TSelectData = ReadContractResult<typeof erc1155ABI, TFunctionName>>(
  config: Omit<UseContractReadConfig<typeof erc1155ABI, TFunctionName, TSelectData>, 'abi' | 'functionName'> = {} as any
) {
  return useContractRead({ abi: erc1155ABI, functionName: 'NonFungible', ...config } as UseContractReadConfig<
    typeof erc1155ABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link erc1155ABI}__ and `functionName` set to `"NonFungible2nd"`.
 */
export function useErc1155NonFungible2nd<TFunctionName extends 'NonFungible2nd', TSelectData = ReadContractResult<typeof erc1155ABI, TFunctionName>>(
  config: Omit<UseContractReadConfig<typeof erc1155ABI, TFunctionName, TSelectData>, 'abi' | 'functionName'> = {} as any
) {
  return useContractRead({ abi: erc1155ABI, functionName: 'NonFungible2nd', ...config } as UseContractReadConfig<
    typeof erc1155ABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link erc1155ABI}__ and `functionName` set to `"accountsByToken"`.
 */
export function useErc1155AccountsByToken<
  TFunctionName extends 'accountsByToken',
  TSelectData = ReadContractResult<typeof erc1155ABI, TFunctionName>
>(config: Omit<UseContractReadConfig<typeof erc1155ABI, TFunctionName, TSelectData>, 'abi' | 'functionName'> = {} as any) {
  return useContractRead({ abi: erc1155ABI, functionName: 'accountsByToken', ...config } as UseContractReadConfig<
    typeof erc1155ABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link erc1155ABI}__ and `functionName` set to `"allowance"`.
 */
export function useErc1155Allowance<TFunctionName extends 'allowance', TSelectData = ReadContractResult<typeof erc1155ABI, TFunctionName>>(
  config: Omit<UseContractReadConfig<typeof erc1155ABI, TFunctionName, TSelectData>, 'abi' | 'functionName'> = {} as any
) {
  return useContractRead({ abi: erc1155ABI, functionName: 'allowance', ...config } as UseContractReadConfig<
    typeof erc1155ABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link erc1155ABI}__ and `functionName` set to `"balanceOf"`.
 */
export function useErc1155BalanceOf<TFunctionName extends 'balanceOf', TSelectData = ReadContractResult<typeof erc1155ABI, TFunctionName>>(
  config: Omit<UseContractReadConfig<typeof erc1155ABI, TFunctionName, TSelectData>, 'abi' | 'functionName'> = {} as any
) {
  return useContractRead({ abi: erc1155ABI, functionName: 'balanceOf', ...config } as UseContractReadConfig<
    typeof erc1155ABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link erc1155ABI}__ and `functionName` set to `"balanceOfBatch"`.
 */
export function useErc1155BalanceOfBatch<TFunctionName extends 'balanceOfBatch', TSelectData = ReadContractResult<typeof erc1155ABI, TFunctionName>>(
  config: Omit<UseContractReadConfig<typeof erc1155ABI, TFunctionName, TSelectData>, 'abi' | 'functionName'> = {} as any
) {
  return useContractRead({ abi: erc1155ABI, functionName: 'balanceOfBatch', ...config } as UseContractReadConfig<
    typeof erc1155ABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link erc1155ABI}__ and `functionName` set to `"contractURI"`.
 */
export function useErc1155ContractUri<TFunctionName extends 'contractURI', TSelectData = ReadContractResult<typeof erc1155ABI, TFunctionName>>(
  config: Omit<UseContractReadConfig<typeof erc1155ABI, TFunctionName, TSelectData>, 'abi' | 'functionName'> = {} as any
) {
  return useContractRead({ abi: erc1155ABI, functionName: 'contractURI', ...config } as UseContractReadConfig<
    typeof erc1155ABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link erc1155ABI}__ and `functionName` set to `"isApprovedForAll"`.
 */
export function useErc1155IsApprovedForAll<
  TFunctionName extends 'isApprovedForAll',
  TSelectData = ReadContractResult<typeof erc1155ABI, TFunctionName>
>(config: Omit<UseContractReadConfig<typeof erc1155ABI, TFunctionName, TSelectData>, 'abi' | 'functionName'> = {} as any) {
  return useContractRead({ abi: erc1155ABI, functionName: 'isApprovedForAll', ...config } as UseContractReadConfig<
    typeof erc1155ABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link erc1155ABI}__ and `functionName` set to `"name"`.
 */
export function useErc1155Name<TFunctionName extends 'name', TSelectData = ReadContractResult<typeof erc1155ABI, TFunctionName>>(
  config: Omit<UseContractReadConfig<typeof erc1155ABI, TFunctionName, TSelectData>, 'abi' | 'functionName'> = {} as any
) {
  return useContractRead({ abi: erc1155ABI, functionName: 'name', ...config } as UseContractReadConfig<typeof erc1155ABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link erc1155ABI}__ and `functionName` set to `"owner"`.
 */
export function useErc1155Owner<TFunctionName extends 'owner', TSelectData = ReadContractResult<typeof erc1155ABI, TFunctionName>>(
  config: Omit<UseContractReadConfig<typeof erc1155ABI, TFunctionName, TSelectData>, 'abi' | 'functionName'> = {} as any
) {
  return useContractRead({ abi: erc1155ABI, functionName: 'owner', ...config } as UseContractReadConfig<
    typeof erc1155ABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link erc1155ABI}__ and `functionName` set to `"supportsInterface"`.
 */
export function useErc1155SupportsInterface<
  TFunctionName extends 'supportsInterface',
  TSelectData = ReadContractResult<typeof erc1155ABI, TFunctionName>
>(config: Omit<UseContractReadConfig<typeof erc1155ABI, TFunctionName, TSelectData>, 'abi' | 'functionName'> = {} as any) {
  return useContractRead({ abi: erc1155ABI, functionName: 'supportsInterface', ...config } as UseContractReadConfig<
    typeof erc1155ABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link erc1155ABI}__ and `functionName` set to `"symbol"`.
 */
export function useErc1155Symbol<TFunctionName extends 'symbol', TSelectData = ReadContractResult<typeof erc1155ABI, TFunctionName>>(
  config: Omit<UseContractReadConfig<typeof erc1155ABI, TFunctionName, TSelectData>, 'abi' | 'functionName'> = {} as any
) {
  return useContractRead({ abi: erc1155ABI, functionName: 'symbol', ...config } as UseContractReadConfig<
    typeof erc1155ABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link erc1155ABI}__ and `functionName` set to `"tokensByAccount"`.
 */
export function useErc1155TokensByAccount<
  TFunctionName extends 'tokensByAccount',
  TSelectData = ReadContractResult<typeof erc1155ABI, TFunctionName>
>(config: Omit<UseContractReadConfig<typeof erc1155ABI, TFunctionName, TSelectData>, 'abi' | 'functionName'> = {} as any) {
  return useContractRead({ abi: erc1155ABI, functionName: 'tokensByAccount', ...config } as UseContractReadConfig<
    typeof erc1155ABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link erc1155ABI}__ and `functionName` set to `"totalHolders"`.
 */
export function useErc1155TotalHolders<TFunctionName extends 'totalHolders', TSelectData = ReadContractResult<typeof erc1155ABI, TFunctionName>>(
  config: Omit<UseContractReadConfig<typeof erc1155ABI, TFunctionName, TSelectData>, 'abi' | 'functionName'> = {} as any
) {
  return useContractRead({ abi: erc1155ABI, functionName: 'totalHolders', ...config } as UseContractReadConfig<
    typeof erc1155ABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link erc1155ABI}__ and `functionName` set to `"totalSupply"`.
 */
export function useErc1155TotalSupply<TFunctionName extends 'totalSupply', TSelectData = ReadContractResult<typeof erc1155ABI, TFunctionName>>(
  config: Omit<UseContractReadConfig<typeof erc1155ABI, TFunctionName, TSelectData>, 'abi' | 'functionName'> = {} as any
) {
  return useContractRead({ abi: erc1155ABI, functionName: 'totalSupply', ...config } as UseContractReadConfig<
    typeof erc1155ABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link erc1155ABI}__ and `functionName` set to `"uri"`.
 */
export function useErc1155Uri<TFunctionName extends 'uri', TSelectData = ReadContractResult<typeof erc1155ABI, TFunctionName>>(
  config: Omit<UseContractReadConfig<typeof erc1155ABI, TFunctionName, TSelectData>, 'abi' | 'functionName'> = {} as any
) {
  return useContractRead({ abi: erc1155ABI, functionName: 'uri', ...config } as UseContractReadConfig<typeof erc1155ABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link erc1155ABI}__.
 */
export function useErc1155Write<TFunctionName extends string, TMode extends WriteContractMode = undefined>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<PrepareWriteContractResult<typeof erc1155ABI, string>['request']['abi'], TFunctionName, TMode>
    : UseContractWriteConfig<typeof erc1155ABI, TFunctionName, TMode> & {
        abi?: never
      } = {} as any
) {
  return useContractWrite<typeof erc1155ABI, TFunctionName, TMode>({ abi: erc1155ABI, ...config } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link erc1155ABI}__ and `functionName` set to `"approve"`.
 */
export function useErc1155Approve<TMode extends WriteContractMode = undefined>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<PrepareWriteContractResult<typeof erc1155ABI, 'approve'>['request']['abi'], 'approve', TMode> & {
        functionName?: 'approve'
      }
    : UseContractWriteConfig<typeof erc1155ABI, 'approve', TMode> & {
        abi?: never
        functionName?: 'approve'
      } = {} as any
) {
  return useContractWrite<typeof erc1155ABI, 'approve', TMode>({ abi: erc1155ABI, functionName: 'approve', ...config } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link erc1155ABI}__ and `functionName` set to `"mint"`.
 */
export function useErc1155Mint<TMode extends WriteContractMode = undefined>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<PrepareWriteContractResult<typeof erc1155ABI, 'mint'>['request']['abi'], 'mint', TMode> & { functionName?: 'mint' }
    : UseContractWriteConfig<typeof erc1155ABI, 'mint', TMode> & {
        abi?: never
        functionName?: 'mint'
      } = {} as any
) {
  return useContractWrite<typeof erc1155ABI, 'mint', TMode>({ abi: erc1155ABI, functionName: 'mint', ...config } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link erc1155ABI}__ and `functionName` set to `"mintBatch"`.
 */
export function useErc1155MintBatch<TMode extends WriteContractMode = undefined>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<PrepareWriteContractResult<typeof erc1155ABI, 'mintBatch'>['request']['abi'], 'mintBatch', TMode> & {
        functionName?: 'mintBatch'
      }
    : UseContractWriteConfig<typeof erc1155ABI, 'mintBatch', TMode> & {
        abi?: never
        functionName?: 'mintBatch'
      } = {} as any
) {
  return useContractWrite<typeof erc1155ABI, 'mintBatch', TMode>({ abi: erc1155ABI, functionName: 'mintBatch', ...config } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link erc1155ABI}__ and `functionName` set to `"renounceOwnership"`.
 */
export function useErc1155RenounceOwnership<TMode extends WriteContractMode = undefined>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<PrepareWriteContractResult<typeof erc1155ABI, 'renounceOwnership'>['request']['abi'], 'renounceOwnership', TMode> & {
        functionName?: 'renounceOwnership'
      }
    : UseContractWriteConfig<typeof erc1155ABI, 'renounceOwnership', TMode> & {
        abi?: never
        functionName?: 'renounceOwnership'
      } = {} as any
) {
  return useContractWrite<typeof erc1155ABI, 'renounceOwnership', TMode>({ abi: erc1155ABI, functionName: 'renounceOwnership', ...config } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link erc1155ABI}__ and `functionName` set to `"safeBatchTransferFrom"`.
 */
export function useErc1155SafeBatchTransferFrom<TMode extends WriteContractMode = undefined>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<typeof erc1155ABI, 'safeBatchTransferFrom'>['request']['abi'],
        'safeBatchTransferFrom',
        TMode
      > & { functionName?: 'safeBatchTransferFrom' }
    : UseContractWriteConfig<typeof erc1155ABI, 'safeBatchTransferFrom', TMode> & {
        abi?: never
        functionName?: 'safeBatchTransferFrom'
      } = {} as any
) {
  return useContractWrite<typeof erc1155ABI, 'safeBatchTransferFrom', TMode>({
    abi: erc1155ABI,
    functionName: 'safeBatchTransferFrom',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link erc1155ABI}__ and `functionName` set to `"safeTransferFrom"`.
 */
export function useErc1155SafeTransferFrom<TMode extends WriteContractMode = undefined>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<PrepareWriteContractResult<typeof erc1155ABI, 'safeTransferFrom'>['request']['abi'], 'safeTransferFrom', TMode> & {
        functionName?: 'safeTransferFrom'
      }
    : UseContractWriteConfig<typeof erc1155ABI, 'safeTransferFrom', TMode> & {
        abi?: never
        functionName?: 'safeTransferFrom'
      } = {} as any
) {
  return useContractWrite<typeof erc1155ABI, 'safeTransferFrom', TMode>({ abi: erc1155ABI, functionName: 'safeTransferFrom', ...config } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link erc1155ABI}__ and `functionName` set to `"setApprovalForAll"`.
 */
export function useErc1155SetApprovalForAll<TMode extends WriteContractMode = undefined>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<PrepareWriteContractResult<typeof erc1155ABI, 'setApprovalForAll'>['request']['abi'], 'setApprovalForAll', TMode> & {
        functionName?: 'setApprovalForAll'
      }
    : UseContractWriteConfig<typeof erc1155ABI, 'setApprovalForAll', TMode> & {
        abi?: never
        functionName?: 'setApprovalForAll'
      } = {} as any
) {
  return useContractWrite<typeof erc1155ABI, 'setApprovalForAll', TMode>({ abi: erc1155ABI, functionName: 'setApprovalForAll', ...config } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link erc1155ABI}__ and `functionName` set to `"transferOwnership"`.
 */
export function useErc1155TransferOwnership<TMode extends WriteContractMode = undefined>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<PrepareWriteContractResult<typeof erc1155ABI, 'transferOwnership'>['request']['abi'], 'transferOwnership', TMode> & {
        functionName?: 'transferOwnership'
      }
    : UseContractWriteConfig<typeof erc1155ABI, 'transferOwnership', TMode> & {
        abi?: never
        functionName?: 'transferOwnership'
      } = {} as any
) {
  return useContractWrite<typeof erc1155ABI, 'transferOwnership', TMode>({ abi: erc1155ABI, functionName: 'transferOwnership', ...config } as any)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link erc1155ABI}__.
 */
export function usePrepareErc1155Write<TFunctionName extends string>(
  config: Omit<UsePrepareContractWriteConfig<typeof erc1155ABI, TFunctionName>, 'abi'> = {} as any
) {
  return usePrepareContractWrite({ abi: erc1155ABI, ...config } as UsePrepareContractWriteConfig<typeof erc1155ABI, TFunctionName>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link erc1155ABI}__ and `functionName` set to `"approve"`.
 */
export function usePrepareErc1155Approve(
  config: Omit<UsePrepareContractWriteConfig<typeof erc1155ABI, 'approve'>, 'abi' | 'functionName'> = {} as any
) {
  return usePrepareContractWrite({ abi: erc1155ABI, functionName: 'approve', ...config } as UsePrepareContractWriteConfig<
    typeof erc1155ABI,
    'approve'
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link erc1155ABI}__ and `functionName` set to `"mint"`.
 */
export function usePrepareErc1155Mint(config: Omit<UsePrepareContractWriteConfig<typeof erc1155ABI, 'mint'>, 'abi' | 'functionName'> = {} as any) {
  return usePrepareContractWrite({ abi: erc1155ABI, functionName: 'mint', ...config } as UsePrepareContractWriteConfig<typeof erc1155ABI, 'mint'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link erc1155ABI}__ and `functionName` set to `"mintBatch"`.
 */
export function usePrepareErc1155MintBatch(
  config: Omit<UsePrepareContractWriteConfig<typeof erc1155ABI, 'mintBatch'>, 'abi' | 'functionName'> = {} as any
) {
  return usePrepareContractWrite({ abi: erc1155ABI, functionName: 'mintBatch', ...config } as UsePrepareContractWriteConfig<
    typeof erc1155ABI,
    'mintBatch'
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link erc1155ABI}__ and `functionName` set to `"renounceOwnership"`.
 */
export function usePrepareErc1155RenounceOwnership(
  config: Omit<UsePrepareContractWriteConfig<typeof erc1155ABI, 'renounceOwnership'>, 'abi' | 'functionName'> = {} as any
) {
  return usePrepareContractWrite({ abi: erc1155ABI, functionName: 'renounceOwnership', ...config } as UsePrepareContractWriteConfig<
    typeof erc1155ABI,
    'renounceOwnership'
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link erc1155ABI}__ and `functionName` set to `"safeBatchTransferFrom"`.
 */
export function usePrepareErc1155SafeBatchTransferFrom(
  config: Omit<UsePrepareContractWriteConfig<typeof erc1155ABI, 'safeBatchTransferFrom'>, 'abi' | 'functionName'> = {} as any
) {
  return usePrepareContractWrite({ abi: erc1155ABI, functionName: 'safeBatchTransferFrom', ...config } as UsePrepareContractWriteConfig<
    typeof erc1155ABI,
    'safeBatchTransferFrom'
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link erc1155ABI}__ and `functionName` set to `"safeTransferFrom"`.
 */
export function usePrepareErc1155SafeTransferFrom(
  config: Omit<UsePrepareContractWriteConfig<typeof erc1155ABI, 'safeTransferFrom'>, 'abi' | 'functionName'> = {} as any
) {
  return usePrepareContractWrite({ abi: erc1155ABI, functionName: 'safeTransferFrom', ...config } as UsePrepareContractWriteConfig<
    typeof erc1155ABI,
    'safeTransferFrom'
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link erc1155ABI}__ and `functionName` set to `"setApprovalForAll"`.
 */
export function usePrepareErc1155SetApprovalForAll(
  config: Omit<UsePrepareContractWriteConfig<typeof erc1155ABI, 'setApprovalForAll'>, 'abi' | 'functionName'> = {} as any
) {
  return usePrepareContractWrite({ abi: erc1155ABI, functionName: 'setApprovalForAll', ...config } as UsePrepareContractWriteConfig<
    typeof erc1155ABI,
    'setApprovalForAll'
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link erc1155ABI}__ and `functionName` set to `"transferOwnership"`.
 */
export function usePrepareErc1155TransferOwnership(
  config: Omit<UsePrepareContractWriteConfig<typeof erc1155ABI, 'transferOwnership'>, 'abi' | 'functionName'> = {} as any
) {
  return usePrepareContractWrite({ abi: erc1155ABI, functionName: 'transferOwnership', ...config } as UsePrepareContractWriteConfig<
    typeof erc1155ABI,
    'transferOwnership'
  >)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link erc1155ABI}__.
 */
export function useErc1155Event<TEventName extends string>(config: Omit<UseContractEventConfig<typeof erc1155ABI, TEventName>, 'abi'> = {} as any) {
  return useContractEvent({ abi: erc1155ABI, ...config } as UseContractEventConfig<typeof erc1155ABI, TEventName>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link erc1155ABI}__ and `eventName` set to `"Approval"`.
 */
export function useErc1155ApprovalEvent(config: Omit<UseContractEventConfig<typeof erc1155ABI, 'Approval'>, 'abi' | 'eventName'> = {} as any) {
  return useContractEvent({ abi: erc1155ABI, eventName: 'Approval', ...config } as UseContractEventConfig<typeof erc1155ABI, 'Approval'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link erc1155ABI}__ and `eventName` set to `"ApprovalForAll"`.
 */
export function useErc1155ApprovalForAllEvent(
  config: Omit<UseContractEventConfig<typeof erc1155ABI, 'ApprovalForAll'>, 'abi' | 'eventName'> = {} as any
) {
  return useContractEvent({ abi: erc1155ABI, eventName: 'ApprovalForAll', ...config } as UseContractEventConfig<typeof erc1155ABI, 'ApprovalForAll'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link erc1155ABI}__ and `eventName` set to `"OwnershipTransferred"`.
 */
export function useErc1155OwnershipTransferredEvent(
  config: Omit<UseContractEventConfig<typeof erc1155ABI, 'OwnershipTransferred'>, 'abi' | 'eventName'> = {} as any
) {
  return useContractEvent({ abi: erc1155ABI, eventName: 'OwnershipTransferred', ...config } as UseContractEventConfig<
    typeof erc1155ABI,
    'OwnershipTransferred'
  >)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link erc1155ABI}__ and `eventName` set to `"TransferBatch"`.
 */
export function useErc1155TransferBatchEvent(
  config: Omit<UseContractEventConfig<typeof erc1155ABI, 'TransferBatch'>, 'abi' | 'eventName'> = {} as any
) {
  return useContractEvent({ abi: erc1155ABI, eventName: 'TransferBatch', ...config } as UseContractEventConfig<typeof erc1155ABI, 'TransferBatch'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link erc1155ABI}__ and `eventName` set to `"TransferSingle"`.
 */
export function useErc1155TransferSingleEvent(
  config: Omit<UseContractEventConfig<typeof erc1155ABI, 'TransferSingle'>, 'abi' | 'eventName'> = {} as any
) {
  return useContractEvent({ abi: erc1155ABI, eventName: 'TransferSingle', ...config } as UseContractEventConfig<typeof erc1155ABI, 'TransferSingle'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link erc1155ABI}__ and `eventName` set to `"URI"`.
 */
export function useErc1155UriEvent(config: Omit<UseContractEventConfig<typeof erc1155ABI, 'URI'>, 'abi' | 'eventName'> = {} as any) {
  return useContractEvent({ abi: erc1155ABI, eventName: 'URI', ...config } as UseContractEventConfig<typeof erc1155ABI, 'URI'>)
}
