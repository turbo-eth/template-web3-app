// Generated by @wagmi/cli@1.1.0 on 9/5/2023 at 5:15:18 PM
import {
  useContractRead,
  UseContractReadConfig,
  useContractWrite,
  UseContractWriteConfig,
  usePrepareContractWrite,
  UsePrepareContractWriteConfig,
  useContractEvent,
  UseContractEventConfig,
} from 'wagmi'
import { ReadContractResult, WriteContractMode, PrepareWriteContractResult } from 'wagmi/actions'

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// UnlockV12
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

export const unlockV12ABI = [
  { type: 'error', inputs: [], name: 'Unlock__ALREADY_DEPLOYED' },
  { type: 'error', inputs: [], name: 'Unlock__INVALID_AMOUNT' },
  { type: 'error', inputs: [], name: 'Unlock__MANAGER_ONLY' },
  { type: 'error', inputs: [{ name: 'lockAddress', internalType: 'address', type: 'address' }], name: 'Unlock__MISSING_LOCK' },
  { type: 'error', inputs: [], name: 'Unlock__MISSING_LOCK_TEMPLATE' },
  { type: 'error', inputs: [], name: 'Unlock__MISSING_PROXY_ADMIN' },
  { type: 'error', inputs: [], name: 'Unlock__MISSING_TEMPLATE' },
  { type: 'error', inputs: [], name: 'Unlock__VERSION_TOO_HIGH' },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'udt', internalType: 'address', type: 'address', indexed: false },
      { name: 'weth', internalType: 'address', type: 'address', indexed: false },
      { name: 'estimatedGasForPurchase', internalType: 'uint256', type: 'uint256', indexed: false },
      { name: 'globalTokenSymbol', internalType: 'string', type: 'string', indexed: false },
      { name: 'globalTokenURI', internalType: 'string', type: 'string', indexed: false },
      { name: 'chainId', internalType: 'uint256', type: 'uint256', indexed: false },
    ],
    name: 'ConfigUnlock',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'grossNetworkProduct', internalType: 'uint256', type: 'uint256', indexed: false },
      { name: '_valueInETH', internalType: 'uint256', type: 'uint256', indexed: false },
      { name: 'tokenAddress', internalType: 'address', type: 'address', indexed: false },
      { name: 'value', internalType: 'uint256', type: 'uint256', indexed: false },
      { name: 'lockAddress', internalType: 'address', type: 'address', indexed: false },
    ],
    name: 'GNPChanged',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'lockAddress', internalType: 'address', type: 'address', indexed: false },
      { name: 'version', internalType: 'uint16', type: 'uint16', indexed: false },
    ],
    name: 'LockUpgraded',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'lockOwner', internalType: 'address', type: 'address', indexed: true },
      { name: 'newLockAddress', internalType: 'address', type: 'address', indexed: true },
    ],
    name: 'NewLock',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'previousOwner', internalType: 'address', type: 'address', indexed: true },
      { name: 'newOwner', internalType: 'address', type: 'address', indexed: true },
    ],
    name: 'OwnershipTransferred',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'grossNetworkProduct', internalType: 'uint256', type: 'uint256', indexed: false },
      { name: 'totalDiscountGranted', internalType: 'uint256', type: 'uint256', indexed: false },
    ],
    name: 'ResetTrackedValue',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [{ name: 'publicLockAddress', internalType: 'address', type: 'address', indexed: false }],
    name: 'SetLockTemplate',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'impl', internalType: 'address', type: 'address', indexed: true },
      { name: 'version', internalType: 'uint16', type: 'uint16', indexed: true },
    ],
    name: 'UnlockTemplateAdded',
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: 'sender', internalType: 'address', type: 'address' }],
    name: '__initializeOwnable',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'impl', internalType: 'address', type: 'address' },
      { name: 'version', internalType: 'uint16', type: 'uint16' },
    ],
    name: 'addLockTemplate',
    outputs: [],
  },
  { stateMutability: 'view', type: 'function', inputs: [], name: 'chainId', outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }] },
  {
    stateMutability: 'pure',
    type: 'function',
    inputs: [
      { name: '', internalType: 'address', type: 'address' },
      { name: '', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'computeAvailableDiscountFor',
    outputs: [
      { name: 'discount', internalType: 'uint256', type: 'uint256' },
      { name: 'tokens', internalType: 'uint256', type: 'uint256' },
    ],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: '_udt', internalType: 'address', type: 'address' },
      { name: '_weth', internalType: 'address', type: 'address' },
      { name: '_estimatedGasForPurchase', internalType: 'uint256', type: 'uint256' },
      { name: '_symbol', internalType: 'string', type: 'string' },
      { name: '_URI', internalType: 'string', type: 'string' },
      { name: '_chainId', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'configUnlock',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: '_expirationDuration', internalType: 'uint256', type: 'uint256' },
      { name: '_tokenAddress', internalType: 'address', type: 'address' },
      { name: '_keyPrice', internalType: 'uint256', type: 'uint256' },
      { name: '_maxNumberOfKeys', internalType: 'uint256', type: 'uint256' },
      { name: '_lockName', internalType: 'string', type: 'string' },
      { name: '', internalType: 'bytes12', type: 'bytes12' },
    ],
    name: 'createLock',
    outputs: [{ name: '', internalType: 'address', type: 'address' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: 'data', internalType: 'bytes', type: 'bytes' }],
    name: 'createUpgradeableLock',
    outputs: [{ name: '', internalType: 'address', type: 'address' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'data', internalType: 'bytes', type: 'bytes' },
      { name: '_lockVersion', internalType: 'uint16', type: 'uint16' },
    ],
    name: 'createUpgradeableLockAtVersion',
    outputs: [{ name: '', internalType: 'address', type: 'address' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'estimatedGasForPurchase',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  { stateMutability: 'view', type: 'function', inputs: [], name: 'getAdmin', outputs: [{ name: '', internalType: 'address', type: 'address' }] },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'getGlobalBaseTokenURI',
    outputs: [{ name: '', internalType: 'string', type: 'string' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'getGlobalTokenSymbol',
    outputs: [{ name: '', internalType: 'string', type: 'string' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'globalBaseTokenURI',
    outputs: [{ name: '', internalType: 'string', type: 'string' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'globalTokenSymbol',
    outputs: [{ name: '', internalType: 'string', type: 'string' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'grossNetworkProduct',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: '_unlockOwner', internalType: 'address', type: 'address' }],
    name: 'initialize',
    outputs: [],
  },
  { stateMutability: 'nonpayable', type: 'function', inputs: [], name: 'initializeProxyAdmin', outputs: [] },
  { stateMutability: 'view', type: 'function', inputs: [], name: 'isOwner', outputs: [{ name: '', internalType: 'bool', type: 'bool' }] },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: '', internalType: 'address', type: 'address' }],
    name: 'locks',
    outputs: [
      { name: 'deployed', internalType: 'bool', type: 'bool' },
      { name: 'totalSales', internalType: 'uint256', type: 'uint256' },
      { name: 'yieldedDiscountTokens', internalType: 'uint256', type: 'uint256' },
    ],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'networkBaseFee',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  { stateMutability: 'view', type: 'function', inputs: [], name: 'owner', outputs: [{ name: '', internalType: 'address', type: 'address' }] },
  { stateMutability: 'nonpayable', type: 'function', inputs: [], name: 'postLockUpgrade', outputs: [] },
  { stateMutability: 'view', type: 'function', inputs: [], name: 'protocolFee', outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }] },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'proxyAdminAddress',
    outputs: [{ name: '', internalType: 'address', type: 'address' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'publicLockAddress',
    outputs: [{ name: '', internalType: 'address', type: 'address' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: '_version', internalType: 'uint16', type: 'uint16' }],
    name: 'publicLockImpls',
    outputs: [{ name: '', internalType: 'address', type: 'address' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'publicLockLatestVersion',
    outputs: [{ name: '', internalType: 'uint16', type: 'uint16' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: '_impl', internalType: 'address', type: 'address' }],
    name: 'publicLockVersions',
    outputs: [{ name: '', internalType: 'uint16', type: 'uint16' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [
      { name: '', internalType: 'uint256', type: 'uint256' },
      { name: '', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'recordConsumedDiscount',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: '_value', internalType: 'uint256', type: 'uint256' },
      { name: '_referrer', internalType: 'address', type: 'address' },
    ],
    name: 'recordKeyPurchase',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: 'lock', internalType: 'address', type: 'address' }],
    name: 'removeLock',
    outputs: [],
  },
  { stateMutability: 'nonpayable', type: 'function', inputs: [], name: 'renounceOwnership', outputs: [] },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: '_grossNetworkProduct', internalType: 'uint256', type: 'uint256' },
      { name: '_totalDiscountGranted', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'resetTrackedValue',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: '_publicLockAddress', internalType: 'address', type: 'address' }],
    name: 'setLockTemplate',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: '_tokenAddress', internalType: 'address', type: 'address' },
      { name: '_oracleAddress', internalType: 'address', type: 'address' },
    ],
    name: 'setOracle',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: '_protocolFee', internalType: 'uint256', type: 'uint256' }],
    name: 'setProtocolFee',
    outputs: [],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'totalDiscountGranted',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: 'newOwner', internalType: 'address', type: 'address' }],
    name: 'transferOwnership',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'token', internalType: 'address', type: 'address' },
      { name: 'to', internalType: 'address', type: 'address' },
      { name: 'amount', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'transferTokens',
    outputs: [],
  },
  { stateMutability: 'view', type: 'function', inputs: [], name: 'udt', outputs: [{ name: '', internalType: 'address', type: 'address' }] },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: '', internalType: 'address', type: 'address' }],
    name: 'uniswapOracles',
    outputs: [{ name: '', internalType: 'contract IUniswapOracleV3', type: 'address' }],
  },
  { stateMutability: 'pure', type: 'function', inputs: [], name: 'unlockVersion', outputs: [{ name: '', internalType: 'uint16', type: 'uint16' }] },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'lockAddress', internalType: 'address payable', type: 'address' },
      { name: 'version', internalType: 'uint16', type: 'uint16' },
    ],
    name: 'upgradeLock',
    outputs: [{ name: '', internalType: 'address', type: 'address' }],
  },
  { stateMutability: 'view', type: 'function', inputs: [], name: 'weth', outputs: [{ name: '', internalType: 'address', type: 'address' }] },
  { stateMutability: 'payable', type: 'receive' },
] as const

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// PublicLockV13
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

export const publicLockV13ABI = [
  { type: 'error', inputs: [], name: 'CANNOT_APPROVE_SELF' },
  { type: 'error', inputs: [], name: 'CANT_BE_SMALLER_THAN_SUPPLY' },
  { type: 'error', inputs: [], name: 'CANT_EXTEND_NON_EXPIRING_KEY' },
  { type: 'error', inputs: [], name: 'GAS_REFUND_FAILED' },
  { type: 'error', inputs: [], name: 'INSUFFICIENT_ERC20_VALUE' },
  { type: 'error', inputs: [], name: 'INSUFFICIENT_VALUE' },
  { type: 'error', inputs: [], name: 'INVALID_ADDRESS' },
  { type: 'error', inputs: [{ name: 'hookIndex', internalType: 'uint8', type: 'uint8' }], name: 'INVALID_HOOK' },
  { type: 'error', inputs: [], name: 'INVALID_LENGTH' },
  { type: 'error', inputs: [], name: 'INVALID_TOKEN' },
  { type: 'error', inputs: [], name: 'KEY_NOT_VALID' },
  { type: 'error', inputs: [], name: 'KEY_TRANSFERS_DISABLED' },
  { type: 'error', inputs: [], name: 'LOCK_HAS_CHANGED' },
  { type: 'error', inputs: [], name: 'LOCK_SOLD_OUT' },
  { type: 'error', inputs: [], name: 'MAX_KEYS_REACHED' },
  { type: 'error', inputs: [], name: 'MIGRATION_REQUIRED' },
  { type: 'error', inputs: [], name: 'NON_COMPLIANT_ERC721_RECEIVER' },
  { type: 'error', inputs: [], name: 'NON_RENEWABLE_LOCK' },
  { type: 'error', inputs: [], name: 'NOT_ENOUGH_FUNDS' },
  { type: 'error', inputs: [], name: 'NOT_ENOUGH_TIME' },
  { type: 'error', inputs: [], name: 'NOT_READY_FOR_RENEWAL' },
  { type: 'error', inputs: [], name: 'NO_SUCH_KEY' },
  { type: 'error', inputs: [], name: 'NULL_VALUE' },
  { type: 'error', inputs: [], name: 'ONLY_KEY_MANAGER_OR_APPROVED' },
  { type: 'error', inputs: [], name: 'ONLY_LOCK_MANAGER' },
  { type: 'error', inputs: [], name: 'ONLY_LOCK_MANAGER_OR_KEY_GRANTER' },
  { type: 'error', inputs: [], name: 'OUT_OF_RANGE' },
  { type: 'error', inputs: [], name: 'OWNER_CANT_BE_ADDRESS_ZERO' },
  { type: 'error', inputs: [], name: 'SCHEMA_VERSION_NOT_CORRECT' },
  { type: 'error', inputs: [], name: 'TRANSFER_TO_SELF' },
  { type: 'error', inputs: [], name: 'TransferFailed' },
  { type: 'error', inputs: [], name: 'UNAUTHORIZED' },
  { type: 'error', inputs: [], name: 'UNAUTHORIZED_KEY_MANAGER_UPDATE' },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'owner', internalType: 'address', type: 'address', indexed: true },
      { name: 'approved', internalType: 'address', type: 'address', indexed: true },
      { name: 'tokenId', internalType: 'uint256', type: 'uint256', indexed: true },
    ],
    name: 'Approval',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'owner', internalType: 'address', type: 'address', indexed: true },
      { name: 'operator', internalType: 'address', type: 'address', indexed: true },
      { name: 'approved', internalType: 'bool', type: 'bool', indexed: false },
    ],
    name: 'ApprovalForAll',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'tokenId', internalType: 'uint256', type: 'uint256', indexed: true },
      { name: 'owner', internalType: 'address', type: 'address', indexed: true },
      { name: 'sendTo', internalType: 'address', type: 'address', indexed: true },
      { name: 'refund', internalType: 'uint256', type: 'uint256', indexed: false },
    ],
    name: 'CancelKey',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'onKeyPurchaseHook', internalType: 'address', type: 'address', indexed: false },
      { name: 'onKeyCancelHook', internalType: 'address', type: 'address', indexed: false },
      { name: 'onValidKeyHook', internalType: 'address', type: 'address', indexed: false },
      { name: 'onTokenURIHook', internalType: 'address', type: 'address', indexed: false },
      { name: 'onKeyTransferHook', internalType: 'address', type: 'address', indexed: false },
      { name: 'onKeyExtendHook', internalType: 'address', type: 'address', indexed: false },
      { name: 'onKeyGrantHook', internalType: 'address', type: 'address', indexed: false },
    ],
    name: 'EventHooksUpdated',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'tokenId', internalType: 'uint256', type: 'uint256', indexed: true },
      { name: 'newExpiration', internalType: 'uint256', type: 'uint256', indexed: false },
      { name: 'amount', internalType: 'uint256', type: 'uint256', indexed: false },
      { name: 'timeAdded', internalType: 'bool', type: 'bool', indexed: false },
    ],
    name: 'ExpirationChanged',
  },
  { type: 'event', anonymous: false, inputs: [{ name: 'tokenId', internalType: 'uint256', type: 'uint256', indexed: true }], name: 'ExpireKey' },
  {
    type: 'event',
    anonymous: false,
    inputs: [{ name: 'refundValue', internalType: 'uint256', type: 'uint256', indexed: false }],
    name: 'GasRefundValueChanged',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'receiver', internalType: 'address', type: 'address', indexed: true },
      { name: 'refundedAmount', internalType: 'uint256', type: 'uint256', indexed: false },
      { name: 'tokenAddress', internalType: 'address', type: 'address', indexed: false },
    ],
    name: 'GasRefunded',
  },
  { type: 'event', anonymous: false, inputs: [{ name: 'version', internalType: 'uint8', type: 'uint8', indexed: false }], name: 'Initialized' },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'tokenId', internalType: 'uint256', type: 'uint256', indexed: true },
      { name: 'newTimestamp', internalType: 'uint256', type: 'uint256', indexed: false },
    ],
    name: 'KeyExtended',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [{ name: 'account', internalType: 'address', type: 'address', indexed: true }],
    name: 'KeyGranterAdded',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [{ name: 'account', internalType: 'address', type: 'address', indexed: true }],
    name: 'KeyGranterRemoved',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: '_tokenId', internalType: 'uint256', type: 'uint256', indexed: true },
      { name: '_newManager', internalType: 'address', type: 'address', indexed: true },
    ],
    name: 'KeyManagerChanged',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [{ name: 'updatedRecordsCount', internalType: 'uint256', type: 'uint256', indexed: false }],
    name: 'KeysMigrated',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'expirationDuration', internalType: 'uint256', type: 'uint256', indexed: false },
      { name: 'maxNumberOfKeys', internalType: 'uint256', type: 'uint256', indexed: false },
      { name: 'maxKeysPerAcccount', internalType: 'uint256', type: 'uint256', indexed: false },
    ],
    name: 'LockConfig',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [{ name: 'account', internalType: 'address', type: 'address', indexed: true }],
    name: 'LockManagerAdded',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [{ name: 'account', internalType: 'address', type: 'address', indexed: true }],
    name: 'LockManagerRemoved',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'name', internalType: 'string', type: 'string', indexed: false },
      { name: 'symbol', internalType: 'string', type: 'string', indexed: false },
      { name: 'baseTokenURI', internalType: 'string', type: 'string', indexed: false },
    ],
    name: 'LockMetadata',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'previousOwner', internalType: 'address', type: 'address', indexed: false },
      { name: 'newOwner', internalType: 'address', type: 'address', indexed: false },
    ],
    name: 'OwnershipTransferred',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'oldKeyPrice', internalType: 'uint256', type: 'uint256', indexed: false },
      { name: 'keyPrice', internalType: 'uint256', type: 'uint256', indexed: false },
      { name: 'oldTokenAddress', internalType: 'address', type: 'address', indexed: false },
      { name: 'tokenAddress', internalType: 'address', type: 'address', indexed: false },
    ],
    name: 'PricingChanged',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'referrer', internalType: 'address', type: 'address', indexed: true },
      { name: 'fee', internalType: 'uint256', type: 'uint256', indexed: false },
    ],
    name: 'ReferrerFee',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'freeTrialLength', internalType: 'uint256', type: 'uint256', indexed: false },
      { name: 'refundPenaltyBasisPoints', internalType: 'uint256', type: 'uint256', indexed: false },
    ],
    name: 'RefundPenaltyChanged',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'role', internalType: 'bytes32', type: 'bytes32', indexed: true },
      { name: 'previousAdminRole', internalType: 'bytes32', type: 'bytes32', indexed: true },
      { name: 'newAdminRole', internalType: 'bytes32', type: 'bytes32', indexed: true },
    ],
    name: 'RoleAdminChanged',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'role', internalType: 'bytes32', type: 'bytes32', indexed: true },
      { name: 'account', internalType: 'address', type: 'address', indexed: true },
      { name: 'sender', internalType: 'address', type: 'address', indexed: true },
    ],
    name: 'RoleGranted',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'role', internalType: 'bytes32', type: 'bytes32', indexed: true },
      { name: 'account', internalType: 'address', type: 'address', indexed: true },
      { name: 'sender', internalType: 'address', type: 'address', indexed: true },
    ],
    name: 'RoleRevoked',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'from', internalType: 'address', type: 'address', indexed: true },
      { name: 'to', internalType: 'address', type: 'address', indexed: true },
      { name: 'tokenId', internalType: 'uint256', type: 'uint256', indexed: true },
    ],
    name: 'Transfer',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [{ name: 'transferFeeBasisPoints', internalType: 'uint256', type: 'uint256', indexed: false }],
    name: 'TransferFeeChanged',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'lockAddress', internalType: 'address', type: 'address', indexed: true },
      { name: 'unlockAddress', internalType: 'address', type: 'address', indexed: false },
    ],
    name: 'UnlockCallFailed',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'sender', internalType: 'address', type: 'address', indexed: true },
      { name: 'tokenAddress', internalType: 'address', type: 'address', indexed: true },
      { name: 'recipient', internalType: 'address', type: 'address', indexed: true },
      { name: 'amount', internalType: 'uint256', type: 'uint256', indexed: false },
    ],
    name: 'Withdrawal',
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'DEFAULT_ADMIN_ROLE',
    outputs: [{ name: '', internalType: 'bytes32', type: 'bytes32' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: 'account', internalType: 'address', type: 'address' }],
    name: 'addLockManager',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: '_approved', internalType: 'address', type: 'address' },
      { name: '_tokenId', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'approve',
    outputs: [],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: '_keyOwner', internalType: 'address', type: 'address' }],
    name: 'balanceOf',
    outputs: [{ name: 'balance', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: '_tokenId', internalType: 'uint256', type: 'uint256' }],
    name: 'burn',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: '_tokenId', internalType: 'uint256', type: 'uint256' }],
    name: 'cancelAndRefund',
    outputs: [],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'expirationDuration',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: '_tokenId', internalType: 'uint256', type: 'uint256' },
      { name: '_amount', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'expireAndRefundFor',
    outputs: [],
  },
  {
    stateMutability: 'payable',
    type: 'function',
    inputs: [
      { name: '_value', internalType: 'uint256', type: 'uint256' },
      { name: '_tokenId', internalType: 'uint256', type: 'uint256' },
      { name: '_referrer', internalType: 'address', type: 'address' },
      { name: '_data', internalType: 'bytes', type: 'bytes' },
    ],
    name: 'extend',
    outputs: [],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'freeTrialLength',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'gasRefundValue',
    outputs: [{ name: '_refundValue', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: '_tokenId', internalType: 'uint256', type: 'uint256' }],
    name: 'getApproved',
    outputs: [{ name: '', internalType: 'address', type: 'address' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: '_tokenId', internalType: 'uint256', type: 'uint256' }],
    name: 'getCancelAndRefundValue',
    outputs: [{ name: 'refund', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: '_keyOwner', internalType: 'address', type: 'address' }],
    name: 'getHasValidKey',
    outputs: [{ name: 'isValid', internalType: 'bool', type: 'bool' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'role', internalType: 'bytes32', type: 'bytes32' }],
    name: 'getRoleAdmin',
    outputs: [{ name: '', internalType: 'bytes32', type: 'bytes32' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [
      { name: '_tokenId', internalType: 'uint256', type: 'uint256' },
      { name: '_time', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'getTransferFee',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: '_tokenId', internalType: 'uint256', type: 'uint256' },
      { name: '_duration', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'grantKeyExtension',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: '_recipients', internalType: 'address[]', type: 'address[]' },
      { name: '_expirationTimestamps', internalType: 'uint256[]', type: 'uint256[]' },
      { name: '_keyManagers', internalType: 'address[]', type: 'address[]' },
    ],
    name: 'grantKeys',
    outputs: [{ name: '', internalType: 'uint256[]', type: 'uint256[]' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'role', internalType: 'bytes32', type: 'bytes32' },
      { name: 'account', internalType: 'address', type: 'address' },
    ],
    name: 'grantRole',
    outputs: [],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [
      { name: 'role', internalType: 'bytes32', type: 'bytes32' },
      { name: 'account', internalType: 'address', type: 'address' },
    ],
    name: 'hasRole',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: '_lockCreator', internalType: 'address payable', type: 'address' },
      { name: '_expirationDuration', internalType: 'uint256', type: 'uint256' },
      { name: '_tokenAddress', internalType: 'address', type: 'address' },
      { name: '_keyPrice', internalType: 'uint256', type: 'uint256' },
      { name: '_maxNumberOfKeys', internalType: 'uint256', type: 'uint256' },
      { name: '_lockName', internalType: 'string', type: 'string' },
    ],
    name: 'initialize',
    outputs: [],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [
      { name: '_owner', internalType: 'address', type: 'address' },
      { name: '_operator', internalType: 'address', type: 'address' },
    ],
    name: 'isApprovedForAll',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'account', internalType: 'address', type: 'address' }],
    name: 'isLockManager',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'account', internalType: 'address', type: 'address' }],
    name: 'isOwner',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [
      { name: '_tokenId', internalType: 'uint256', type: 'uint256' },
      { name: '_referrer', internalType: 'address', type: 'address' },
    ],
    name: 'isRenewable',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: '_tokenId', internalType: 'uint256', type: 'uint256' }],
    name: 'isValidKey',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: '_tokenId', internalType: 'uint256', type: 'uint256' }],
    name: 'keyExpirationTimestampFor',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
    name: 'keyManagerOf',
    outputs: [{ name: '', internalType: 'address', type: 'address' }],
  },
  { stateMutability: 'view', type: 'function', inputs: [], name: 'keyPrice', outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }] },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: '_from', internalType: 'address', type: 'address' },
      { name: '_recipient', internalType: 'address', type: 'address' },
      { name: '_tokenId', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'lendKey',
    outputs: [],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'maxKeysPerAddress',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'maxNumberOfKeys',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: '_tokenIdFrom', internalType: 'uint256', type: 'uint256' },
      { name: '_tokenIdTo', internalType: 'uint256', type: 'uint256' },
      { name: '_amount', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'mergeKeys',
    outputs: [],
  },
  { stateMutability: 'nonpayable', type: 'function', inputs: [{ name: '', internalType: 'bytes', type: 'bytes' }], name: 'migrate', outputs: [] },
  { stateMutability: 'view', type: 'function', inputs: [], name: 'name', outputs: [{ name: '', internalType: 'string', type: 'string' }] },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'numberOfOwners',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'onKeyCancelHook',
    outputs: [{ name: '', internalType: 'contract ILockKeyCancelHook', type: 'address' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'onKeyExtendHook',
    outputs: [{ name: '', internalType: 'contract ILockKeyExtendHook', type: 'address' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'onKeyGrantHook',
    outputs: [{ name: '', internalType: 'contract ILockKeyGrantHook', type: 'address' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'onKeyPurchaseHook',
    outputs: [{ name: '', internalType: 'contract ILockKeyPurchaseHook', type: 'address' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'onKeyTransferHook',
    outputs: [{ name: '', internalType: 'contract ILockKeyTransferHook', type: 'address' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'onTokenURIHook',
    outputs: [{ name: '', internalType: 'contract ILockTokenURIHook', type: 'address' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'onValidKeyHook',
    outputs: [{ name: '', internalType: 'contract ILockValidKeyHook', type: 'address' }],
  },
  { stateMutability: 'view', type: 'function', inputs: [], name: 'owner', outputs: [{ name: '', internalType: 'address', type: 'address' }] },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: '_tokenId', internalType: 'uint256', type: 'uint256' }],
    name: 'ownerOf',
    outputs: [{ name: '', internalType: 'address', type: 'address' }],
  },
  {
    stateMutability: 'pure',
    type: 'function',
    inputs: [],
    name: 'publicLockVersion',
    outputs: [{ name: '', internalType: 'uint16', type: 'uint16' }],
  },
  {
    stateMutability: 'payable',
    type: 'function',
    inputs: [
      { name: '_values', internalType: 'uint256[]', type: 'uint256[]' },
      { name: '_recipients', internalType: 'address[]', type: 'address[]' },
      { name: '_referrers', internalType: 'address[]', type: 'address[]' },
      { name: '_keyManagers', internalType: 'address[]', type: 'address[]' },
      { name: '_data', internalType: 'bytes[]', type: 'bytes[]' },
    ],
    name: 'purchase',
    outputs: [{ name: '', internalType: 'uint256[]', type: 'uint256[]' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [
      { name: '_recipient', internalType: 'address', type: 'address' },
      { name: '_referrer', internalType: 'address', type: 'address' },
      { name: '_data', internalType: 'bytes', type: 'bytes' },
    ],
    name: 'purchasePriceFor',
    outputs: [{ name: 'minKeyPrice', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: '', internalType: 'address', type: 'address' }],
    name: 'referrerFees',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'refundPenaltyBasisPoints',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: '_tokenId', internalType: 'uint256', type: 'uint256' },
      { name: '_referrer', internalType: 'address', type: 'address' },
    ],
    name: 'renewMembershipFor',
    outputs: [],
  },
  { stateMutability: 'nonpayable', type: 'function', inputs: [], name: 'renounceLockManager', outputs: [] },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'role', internalType: 'bytes32', type: 'bytes32' },
      { name: 'account', internalType: 'address', type: 'address' },
    ],
    name: 'renounceRole',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'role', internalType: 'bytes32', type: 'bytes32' },
      { name: 'account', internalType: 'address', type: 'address' },
    ],
    name: 'revokeRole',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: '_from', internalType: 'address', type: 'address' },
      { name: '_to', internalType: 'address', type: 'address' },
      { name: '_tokenId', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'safeTransferFrom',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: '_from', internalType: 'address', type: 'address' },
      { name: '_to', internalType: 'address', type: 'address' },
      { name: '_tokenId', internalType: 'uint256', type: 'uint256' },
      { name: '_data', internalType: 'bytes', type: 'bytes' },
    ],
    name: 'safeTransferFrom',
    outputs: [],
  },
  { stateMutability: 'view', type: 'function', inputs: [], name: 'schemaVersion', outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }] },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: '_to', internalType: 'address', type: 'address' },
      { name: '_approved', internalType: 'bool', type: 'bool' },
    ],
    name: 'setApprovalForAll',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: '_onKeyPurchaseHook', internalType: 'address', type: 'address' },
      { name: '_onKeyCancelHook', internalType: 'address', type: 'address' },
      { name: '_onValidKeyHook', internalType: 'address', type: 'address' },
      { name: '_onTokenURIHook', internalType: 'address', type: 'address' },
      { name: '_onKeyTransferHook', internalType: 'address', type: 'address' },
      { name: '_onKeyExtendHook', internalType: 'address', type: 'address' },
      { name: '_onKeyGrantHook', internalType: 'address', type: 'address' },
    ],
    name: 'setEventHooks',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: '_refundValue', internalType: 'uint256', type: 'uint256' }],
    name: 'setGasRefundValue',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: '_tokenId', internalType: 'uint256', type: 'uint256' },
      { name: '_keyManager', internalType: 'address', type: 'address' },
    ],
    name: 'setKeyManagerOf',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: '_lockName', internalType: 'string', type: 'string' },
      { name: '_lockSymbol', internalType: 'string', type: 'string' },
      { name: '_baseTokenURI', internalType: 'string', type: 'string' },
    ],
    name: 'setLockMetadata',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: 'account', internalType: 'address', type: 'address' }],
    name: 'setOwner',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: '_referrer', internalType: 'address', type: 'address' },
      { name: '_feeBasisPoint', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'setReferrerFee',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: '_to', internalType: 'address', type: 'address' },
      { name: '_tokenIdFrom', internalType: 'uint256', type: 'uint256' },
      { name: '_timeShared', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'shareKey',
    outputs: [],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'interfaceId', internalType: 'bytes4', type: 'bytes4' }],
    name: 'supportsInterface',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
  { stateMutability: 'view', type: 'function', inputs: [], name: 'symbol', outputs: [{ name: '', internalType: 'string', type: 'string' }] },
  { stateMutability: 'view', type: 'function', inputs: [], name: 'tokenAddress', outputs: [{ name: '', internalType: 'address', type: 'address' }] },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: '_index', internalType: 'uint256', type: 'uint256' }],
    name: 'tokenByIndex',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [
      { name: '_keyOwner', internalType: 'address', type: 'address' },
      { name: '_index', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'tokenOfOwnerByIndex',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: '_tokenId', internalType: 'uint256', type: 'uint256' }],
    name: 'tokenURI',
    outputs: [{ name: '', internalType: 'string', type: 'string' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: '_keyOwner', internalType: 'address', type: 'address' }],
    name: 'totalKeys',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'totalSupply',
    outputs: [{ name: '_totalKeysCreated', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'transferFeeBasisPoints',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: '_from', internalType: 'address', type: 'address' },
      { name: '_recipient', internalType: 'address', type: 'address' },
      { name: '_tokenId', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'transferFrom',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: '_recipient', internalType: 'address', type: 'address' },
      { name: '_tokenId', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'unlendKey',
    outputs: [],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'unlockProtocol',
    outputs: [{ name: '', internalType: 'contract IUnlock', type: 'address' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: '_keyPrice', internalType: 'uint256', type: 'uint256' },
      { name: '_tokenAddress', internalType: 'address', type: 'address' },
    ],
    name: 'updateKeyPricing',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: '_newExpirationDuration', internalType: 'uint256', type: 'uint256' },
      { name: '_maxNumberOfKeys', internalType: 'uint256', type: 'uint256' },
      { name: '_maxKeysPerAcccount', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'updateLockConfig',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: '_freeTrialLength', internalType: 'uint256', type: 'uint256' },
      { name: '_refundPenaltyBasisPoints', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'updateRefundPenalty',
    outputs: [],
  },
  { stateMutability: 'nonpayable', type: 'function', inputs: [], name: 'updateSchemaVersion', outputs: [] },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: '_transferFeeBasisPoints', internalType: 'uint256', type: 'uint256' }],
    name: 'updateTransferFee',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: '_tokenAddress', internalType: 'address', type: 'address' },
      { name: '_recipient', internalType: 'address payable', type: 'address' },
      { name: '_amount', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'withdraw',
    outputs: [],
  },
  { stateMutability: 'payable', type: 'receive' },
] as const

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// React
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link unlockV12ABI}__.
 */
export function useUnlockV12Read<TFunctionName extends string, TSelectData = ReadContractResult<typeof unlockV12ABI, TFunctionName>>(
  config: Omit<UseContractReadConfig<typeof unlockV12ABI, TFunctionName, TSelectData>, 'abi'> = {} as any
) {
  return useContractRead({ abi: unlockV12ABI, ...config } as UseContractReadConfig<typeof unlockV12ABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link unlockV12ABI}__ and `functionName` set to `"chainId"`.
 */
export function useUnlockV12ChainId<TFunctionName extends 'chainId', TSelectData = ReadContractResult<typeof unlockV12ABI, TFunctionName>>(
  config: Omit<UseContractReadConfig<typeof unlockV12ABI, TFunctionName, TSelectData>, 'abi' | 'functionName'> = {} as any
) {
  return useContractRead({ abi: unlockV12ABI, functionName: 'chainId', ...config } as UseContractReadConfig<
    typeof unlockV12ABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link unlockV12ABI}__ and `functionName` set to `"computeAvailableDiscountFor"`.
 */
export function useUnlockV12ComputeAvailableDiscountFor<
  TFunctionName extends 'computeAvailableDiscountFor',
  TSelectData = ReadContractResult<typeof unlockV12ABI, TFunctionName>
>(config: Omit<UseContractReadConfig<typeof unlockV12ABI, TFunctionName, TSelectData>, 'abi' | 'functionName'> = {} as any) {
  return useContractRead({ abi: unlockV12ABI, functionName: 'computeAvailableDiscountFor', ...config } as UseContractReadConfig<
    typeof unlockV12ABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link unlockV12ABI}__ and `functionName` set to `"estimatedGasForPurchase"`.
 */
export function useUnlockV12EstimatedGasForPurchase<
  TFunctionName extends 'estimatedGasForPurchase',
  TSelectData = ReadContractResult<typeof unlockV12ABI, TFunctionName>
>(config: Omit<UseContractReadConfig<typeof unlockV12ABI, TFunctionName, TSelectData>, 'abi' | 'functionName'> = {} as any) {
  return useContractRead({ abi: unlockV12ABI, functionName: 'estimatedGasForPurchase', ...config } as UseContractReadConfig<
    typeof unlockV12ABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link unlockV12ABI}__ and `functionName` set to `"getAdmin"`.
 */
export function useUnlockV12GetAdmin<TFunctionName extends 'getAdmin', TSelectData = ReadContractResult<typeof unlockV12ABI, TFunctionName>>(
  config: Omit<UseContractReadConfig<typeof unlockV12ABI, TFunctionName, TSelectData>, 'abi' | 'functionName'> = {} as any
) {
  return useContractRead({ abi: unlockV12ABI, functionName: 'getAdmin', ...config } as UseContractReadConfig<
    typeof unlockV12ABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link unlockV12ABI}__ and `functionName` set to `"getGlobalBaseTokenURI"`.
 */
export function useUnlockV12GetGlobalBaseTokenUri<
  TFunctionName extends 'getGlobalBaseTokenURI',
  TSelectData = ReadContractResult<typeof unlockV12ABI, TFunctionName>
>(config: Omit<UseContractReadConfig<typeof unlockV12ABI, TFunctionName, TSelectData>, 'abi' | 'functionName'> = {} as any) {
  return useContractRead({ abi: unlockV12ABI, functionName: 'getGlobalBaseTokenURI', ...config } as UseContractReadConfig<
    typeof unlockV12ABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link unlockV12ABI}__ and `functionName` set to `"getGlobalTokenSymbol"`.
 */
export function useUnlockV12GetGlobalTokenSymbol<
  TFunctionName extends 'getGlobalTokenSymbol',
  TSelectData = ReadContractResult<typeof unlockV12ABI, TFunctionName>
>(config: Omit<UseContractReadConfig<typeof unlockV12ABI, TFunctionName, TSelectData>, 'abi' | 'functionName'> = {} as any) {
  return useContractRead({ abi: unlockV12ABI, functionName: 'getGlobalTokenSymbol', ...config } as UseContractReadConfig<
    typeof unlockV12ABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link unlockV12ABI}__ and `functionName` set to `"globalBaseTokenURI"`.
 */
export function useUnlockV12GlobalBaseTokenUri<
  TFunctionName extends 'globalBaseTokenURI',
  TSelectData = ReadContractResult<typeof unlockV12ABI, TFunctionName>
>(config: Omit<UseContractReadConfig<typeof unlockV12ABI, TFunctionName, TSelectData>, 'abi' | 'functionName'> = {} as any) {
  return useContractRead({ abi: unlockV12ABI, functionName: 'globalBaseTokenURI', ...config } as UseContractReadConfig<
    typeof unlockV12ABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link unlockV12ABI}__ and `functionName` set to `"globalTokenSymbol"`.
 */
export function useUnlockV12GlobalTokenSymbol<
  TFunctionName extends 'globalTokenSymbol',
  TSelectData = ReadContractResult<typeof unlockV12ABI, TFunctionName>
>(config: Omit<UseContractReadConfig<typeof unlockV12ABI, TFunctionName, TSelectData>, 'abi' | 'functionName'> = {} as any) {
  return useContractRead({ abi: unlockV12ABI, functionName: 'globalTokenSymbol', ...config } as UseContractReadConfig<
    typeof unlockV12ABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link unlockV12ABI}__ and `functionName` set to `"grossNetworkProduct"`.
 */
export function useUnlockV12GrossNetworkProduct<
  TFunctionName extends 'grossNetworkProduct',
  TSelectData = ReadContractResult<typeof unlockV12ABI, TFunctionName>
>(config: Omit<UseContractReadConfig<typeof unlockV12ABI, TFunctionName, TSelectData>, 'abi' | 'functionName'> = {} as any) {
  return useContractRead({ abi: unlockV12ABI, functionName: 'grossNetworkProduct', ...config } as UseContractReadConfig<
    typeof unlockV12ABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link unlockV12ABI}__ and `functionName` set to `"isOwner"`.
 */
export function useUnlockV12IsOwner<TFunctionName extends 'isOwner', TSelectData = ReadContractResult<typeof unlockV12ABI, TFunctionName>>(
  config: Omit<UseContractReadConfig<typeof unlockV12ABI, TFunctionName, TSelectData>, 'abi' | 'functionName'> = {} as any
) {
  return useContractRead({ abi: unlockV12ABI, functionName: 'isOwner', ...config } as UseContractReadConfig<
    typeof unlockV12ABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link unlockV12ABI}__ and `functionName` set to `"locks"`.
 */
export function useUnlockV12Locks<TFunctionName extends 'locks', TSelectData = ReadContractResult<typeof unlockV12ABI, TFunctionName>>(
  config: Omit<UseContractReadConfig<typeof unlockV12ABI, TFunctionName, TSelectData>, 'abi' | 'functionName'> = {} as any
) {
  return useContractRead({ abi: unlockV12ABI, functionName: 'locks', ...config } as UseContractReadConfig<
    typeof unlockV12ABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link unlockV12ABI}__ and `functionName` set to `"networkBaseFee"`.
 */
export function useUnlockV12NetworkBaseFee<
  TFunctionName extends 'networkBaseFee',
  TSelectData = ReadContractResult<typeof unlockV12ABI, TFunctionName>
>(config: Omit<UseContractReadConfig<typeof unlockV12ABI, TFunctionName, TSelectData>, 'abi' | 'functionName'> = {} as any) {
  return useContractRead({ abi: unlockV12ABI, functionName: 'networkBaseFee', ...config } as UseContractReadConfig<
    typeof unlockV12ABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link unlockV12ABI}__ and `functionName` set to `"owner"`.
 */
export function useUnlockV12Owner<TFunctionName extends 'owner', TSelectData = ReadContractResult<typeof unlockV12ABI, TFunctionName>>(
  config: Omit<UseContractReadConfig<typeof unlockV12ABI, TFunctionName, TSelectData>, 'abi' | 'functionName'> = {} as any
) {
  return useContractRead({ abi: unlockV12ABI, functionName: 'owner', ...config } as UseContractReadConfig<
    typeof unlockV12ABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link unlockV12ABI}__ and `functionName` set to `"protocolFee"`.
 */
export function useUnlockV12ProtocolFee<TFunctionName extends 'protocolFee', TSelectData = ReadContractResult<typeof unlockV12ABI, TFunctionName>>(
  config: Omit<UseContractReadConfig<typeof unlockV12ABI, TFunctionName, TSelectData>, 'abi' | 'functionName'> = {} as any
) {
  return useContractRead({ abi: unlockV12ABI, functionName: 'protocolFee', ...config } as UseContractReadConfig<
    typeof unlockV12ABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link unlockV12ABI}__ and `functionName` set to `"proxyAdminAddress"`.
 */
export function useUnlockV12ProxyAdminAddress<
  TFunctionName extends 'proxyAdminAddress',
  TSelectData = ReadContractResult<typeof unlockV12ABI, TFunctionName>
>(config: Omit<UseContractReadConfig<typeof unlockV12ABI, TFunctionName, TSelectData>, 'abi' | 'functionName'> = {} as any) {
  return useContractRead({ abi: unlockV12ABI, functionName: 'proxyAdminAddress', ...config } as UseContractReadConfig<
    typeof unlockV12ABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link unlockV12ABI}__ and `functionName` set to `"publicLockAddress"`.
 */
export function useUnlockV12PublicLockAddress<
  TFunctionName extends 'publicLockAddress',
  TSelectData = ReadContractResult<typeof unlockV12ABI, TFunctionName>
>(config: Omit<UseContractReadConfig<typeof unlockV12ABI, TFunctionName, TSelectData>, 'abi' | 'functionName'> = {} as any) {
  return useContractRead({ abi: unlockV12ABI, functionName: 'publicLockAddress', ...config } as UseContractReadConfig<
    typeof unlockV12ABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link unlockV12ABI}__ and `functionName` set to `"publicLockImpls"`.
 */
export function useUnlockV12PublicLockImpls<
  TFunctionName extends 'publicLockImpls',
  TSelectData = ReadContractResult<typeof unlockV12ABI, TFunctionName>
>(config: Omit<UseContractReadConfig<typeof unlockV12ABI, TFunctionName, TSelectData>, 'abi' | 'functionName'> = {} as any) {
  return useContractRead({ abi: unlockV12ABI, functionName: 'publicLockImpls', ...config } as UseContractReadConfig<
    typeof unlockV12ABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link unlockV12ABI}__ and `functionName` set to `"publicLockLatestVersion"`.
 */
export function useUnlockV12PublicLockLatestVersion<
  TFunctionName extends 'publicLockLatestVersion',
  TSelectData = ReadContractResult<typeof unlockV12ABI, TFunctionName>
>(config: Omit<UseContractReadConfig<typeof unlockV12ABI, TFunctionName, TSelectData>, 'abi' | 'functionName'> = {} as any) {
  return useContractRead({ abi: unlockV12ABI, functionName: 'publicLockLatestVersion', ...config } as UseContractReadConfig<
    typeof unlockV12ABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link unlockV12ABI}__ and `functionName` set to `"publicLockVersions"`.
 */
export function useUnlockV12PublicLockVersions<
  TFunctionName extends 'publicLockVersions',
  TSelectData = ReadContractResult<typeof unlockV12ABI, TFunctionName>
>(config: Omit<UseContractReadConfig<typeof unlockV12ABI, TFunctionName, TSelectData>, 'abi' | 'functionName'> = {} as any) {
  return useContractRead({ abi: unlockV12ABI, functionName: 'publicLockVersions', ...config } as UseContractReadConfig<
    typeof unlockV12ABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link unlockV12ABI}__ and `functionName` set to `"recordConsumedDiscount"`.
 */
export function useUnlockV12RecordConsumedDiscount<
  TFunctionName extends 'recordConsumedDiscount',
  TSelectData = ReadContractResult<typeof unlockV12ABI, TFunctionName>
>(config: Omit<UseContractReadConfig<typeof unlockV12ABI, TFunctionName, TSelectData>, 'abi' | 'functionName'> = {} as any) {
  return useContractRead({ abi: unlockV12ABI, functionName: 'recordConsumedDiscount', ...config } as UseContractReadConfig<
    typeof unlockV12ABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link unlockV12ABI}__ and `functionName` set to `"totalDiscountGranted"`.
 */
export function useUnlockV12TotalDiscountGranted<
  TFunctionName extends 'totalDiscountGranted',
  TSelectData = ReadContractResult<typeof unlockV12ABI, TFunctionName>
>(config: Omit<UseContractReadConfig<typeof unlockV12ABI, TFunctionName, TSelectData>, 'abi' | 'functionName'> = {} as any) {
  return useContractRead({ abi: unlockV12ABI, functionName: 'totalDiscountGranted', ...config } as UseContractReadConfig<
    typeof unlockV12ABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link unlockV12ABI}__ and `functionName` set to `"udt"`.
 */
export function useUnlockV12Udt<TFunctionName extends 'udt', TSelectData = ReadContractResult<typeof unlockV12ABI, TFunctionName>>(
  config: Omit<UseContractReadConfig<typeof unlockV12ABI, TFunctionName, TSelectData>, 'abi' | 'functionName'> = {} as any
) {
  return useContractRead({ abi: unlockV12ABI, functionName: 'udt', ...config } as UseContractReadConfig<
    typeof unlockV12ABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link unlockV12ABI}__ and `functionName` set to `"uniswapOracles"`.
 */
export function useUnlockV12UniswapOracles<
  TFunctionName extends 'uniswapOracles',
  TSelectData = ReadContractResult<typeof unlockV12ABI, TFunctionName>
>(config: Omit<UseContractReadConfig<typeof unlockV12ABI, TFunctionName, TSelectData>, 'abi' | 'functionName'> = {} as any) {
  return useContractRead({ abi: unlockV12ABI, functionName: 'uniswapOracles', ...config } as UseContractReadConfig<
    typeof unlockV12ABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link unlockV12ABI}__ and `functionName` set to `"unlockVersion"`.
 */
export function useUnlockV12UnlockVersion<
  TFunctionName extends 'unlockVersion',
  TSelectData = ReadContractResult<typeof unlockV12ABI, TFunctionName>
>(config: Omit<UseContractReadConfig<typeof unlockV12ABI, TFunctionName, TSelectData>, 'abi' | 'functionName'> = {} as any) {
  return useContractRead({ abi: unlockV12ABI, functionName: 'unlockVersion', ...config } as UseContractReadConfig<
    typeof unlockV12ABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link unlockV12ABI}__ and `functionName` set to `"weth"`.
 */
export function useUnlockV12Weth<TFunctionName extends 'weth', TSelectData = ReadContractResult<typeof unlockV12ABI, TFunctionName>>(
  config: Omit<UseContractReadConfig<typeof unlockV12ABI, TFunctionName, TSelectData>, 'abi' | 'functionName'> = {} as any
) {
  return useContractRead({ abi: unlockV12ABI, functionName: 'weth', ...config } as UseContractReadConfig<
    typeof unlockV12ABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link unlockV12ABI}__.
 */
export function useUnlockV12Write<TFunctionName extends string, TMode extends WriteContractMode = undefined>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<PrepareWriteContractResult<typeof unlockV12ABI, string>['request']['abi'], TFunctionName, TMode>
    : UseContractWriteConfig<typeof unlockV12ABI, TFunctionName, TMode> & {
        abi?: never
      } = {} as any
) {
  return useContractWrite<typeof unlockV12ABI, TFunctionName, TMode>({ abi: unlockV12ABI, ...config } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link unlockV12ABI}__ and `functionName` set to `"__initializeOwnable"`.
 */
export function useUnlockV12InitializeOwnable<TMode extends WriteContractMode = undefined>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<typeof unlockV12ABI, '__initializeOwnable'>['request']['abi'],
        '__initializeOwnable',
        TMode
      > & { functionName?: '__initializeOwnable' }
    : UseContractWriteConfig<typeof unlockV12ABI, '__initializeOwnable', TMode> & {
        abi?: never
        functionName?: '__initializeOwnable'
      } = {} as any
) {
  return useContractWrite<typeof unlockV12ABI, '__initializeOwnable', TMode>({
    abi: unlockV12ABI,
    functionName: '__initializeOwnable',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link unlockV12ABI}__ and `functionName` set to `"addLockTemplate"`.
 */
export function useUnlockV12AddLockTemplate<TMode extends WriteContractMode = undefined>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<PrepareWriteContractResult<typeof unlockV12ABI, 'addLockTemplate'>['request']['abi'], 'addLockTemplate', TMode> & {
        functionName?: 'addLockTemplate'
      }
    : UseContractWriteConfig<typeof unlockV12ABI, 'addLockTemplate', TMode> & {
        abi?: never
        functionName?: 'addLockTemplate'
      } = {} as any
) {
  return useContractWrite<typeof unlockV12ABI, 'addLockTemplate', TMode>({ abi: unlockV12ABI, functionName: 'addLockTemplate', ...config } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link unlockV12ABI}__ and `functionName` set to `"configUnlock"`.
 */
export function useUnlockV12ConfigUnlock<TMode extends WriteContractMode = undefined>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<PrepareWriteContractResult<typeof unlockV12ABI, 'configUnlock'>['request']['abi'], 'configUnlock', TMode> & {
        functionName?: 'configUnlock'
      }
    : UseContractWriteConfig<typeof unlockV12ABI, 'configUnlock', TMode> & {
        abi?: never
        functionName?: 'configUnlock'
      } = {} as any
) {
  return useContractWrite<typeof unlockV12ABI, 'configUnlock', TMode>({ abi: unlockV12ABI, functionName: 'configUnlock', ...config } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link unlockV12ABI}__ and `functionName` set to `"createLock"`.
 */
export function useUnlockV12CreateLock<TMode extends WriteContractMode = undefined>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<PrepareWriteContractResult<typeof unlockV12ABI, 'createLock'>['request']['abi'], 'createLock', TMode> & {
        functionName?: 'createLock'
      }
    : UseContractWriteConfig<typeof unlockV12ABI, 'createLock', TMode> & {
        abi?: never
        functionName?: 'createLock'
      } = {} as any
) {
  return useContractWrite<typeof unlockV12ABI, 'createLock', TMode>({ abi: unlockV12ABI, functionName: 'createLock', ...config } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link unlockV12ABI}__ and `functionName` set to `"createUpgradeableLock"`.
 */
export function useUnlockV12CreateUpgradeableLock<TMode extends WriteContractMode = undefined>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<typeof unlockV12ABI, 'createUpgradeableLock'>['request']['abi'],
        'createUpgradeableLock',
        TMode
      > & { functionName?: 'createUpgradeableLock' }
    : UseContractWriteConfig<typeof unlockV12ABI, 'createUpgradeableLock', TMode> & {
        abi?: never
        functionName?: 'createUpgradeableLock'
      } = {} as any
) {
  return useContractWrite<typeof unlockV12ABI, 'createUpgradeableLock', TMode>({
    abi: unlockV12ABI,
    functionName: 'createUpgradeableLock',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link unlockV12ABI}__ and `functionName` set to `"createUpgradeableLockAtVersion"`.
 */
export function useUnlockV12CreateUpgradeableLockAtVersion<TMode extends WriteContractMode = undefined>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<typeof unlockV12ABI, 'createUpgradeableLockAtVersion'>['request']['abi'],
        'createUpgradeableLockAtVersion',
        TMode
      > & { functionName?: 'createUpgradeableLockAtVersion' }
    : UseContractWriteConfig<typeof unlockV12ABI, 'createUpgradeableLockAtVersion', TMode> & {
        abi?: never
        functionName?: 'createUpgradeableLockAtVersion'
      } = {} as any
) {
  return useContractWrite<typeof unlockV12ABI, 'createUpgradeableLockAtVersion', TMode>({
    abi: unlockV12ABI,
    functionName: 'createUpgradeableLockAtVersion',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link unlockV12ABI}__ and `functionName` set to `"initialize"`.
 */
export function useUnlockV12Initialize<TMode extends WriteContractMode = undefined>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<PrepareWriteContractResult<typeof unlockV12ABI, 'initialize'>['request']['abi'], 'initialize', TMode> & {
        functionName?: 'initialize'
      }
    : UseContractWriteConfig<typeof unlockV12ABI, 'initialize', TMode> & {
        abi?: never
        functionName?: 'initialize'
      } = {} as any
) {
  return useContractWrite<typeof unlockV12ABI, 'initialize', TMode>({ abi: unlockV12ABI, functionName: 'initialize', ...config } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link unlockV12ABI}__ and `functionName` set to `"initializeProxyAdmin"`.
 */
export function useUnlockV12InitializeProxyAdmin<TMode extends WriteContractMode = undefined>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<typeof unlockV12ABI, 'initializeProxyAdmin'>['request']['abi'],
        'initializeProxyAdmin',
        TMode
      > & { functionName?: 'initializeProxyAdmin' }
    : UseContractWriteConfig<typeof unlockV12ABI, 'initializeProxyAdmin', TMode> & {
        abi?: never
        functionName?: 'initializeProxyAdmin'
      } = {} as any
) {
  return useContractWrite<typeof unlockV12ABI, 'initializeProxyAdmin', TMode>({
    abi: unlockV12ABI,
    functionName: 'initializeProxyAdmin',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link unlockV12ABI}__ and `functionName` set to `"postLockUpgrade"`.
 */
export function useUnlockV12PostLockUpgrade<TMode extends WriteContractMode = undefined>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<PrepareWriteContractResult<typeof unlockV12ABI, 'postLockUpgrade'>['request']['abi'], 'postLockUpgrade', TMode> & {
        functionName?: 'postLockUpgrade'
      }
    : UseContractWriteConfig<typeof unlockV12ABI, 'postLockUpgrade', TMode> & {
        abi?: never
        functionName?: 'postLockUpgrade'
      } = {} as any
) {
  return useContractWrite<typeof unlockV12ABI, 'postLockUpgrade', TMode>({ abi: unlockV12ABI, functionName: 'postLockUpgrade', ...config } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link unlockV12ABI}__ and `functionName` set to `"recordKeyPurchase"`.
 */
export function useUnlockV12RecordKeyPurchase<TMode extends WriteContractMode = undefined>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<PrepareWriteContractResult<typeof unlockV12ABI, 'recordKeyPurchase'>['request']['abi'], 'recordKeyPurchase', TMode> & {
        functionName?: 'recordKeyPurchase'
      }
    : UseContractWriteConfig<typeof unlockV12ABI, 'recordKeyPurchase', TMode> & {
        abi?: never
        functionName?: 'recordKeyPurchase'
      } = {} as any
) {
  return useContractWrite<typeof unlockV12ABI, 'recordKeyPurchase', TMode>({ abi: unlockV12ABI, functionName: 'recordKeyPurchase', ...config } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link unlockV12ABI}__ and `functionName` set to `"removeLock"`.
 */
export function useUnlockV12RemoveLock<TMode extends WriteContractMode = undefined>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<PrepareWriteContractResult<typeof unlockV12ABI, 'removeLock'>['request']['abi'], 'removeLock', TMode> & {
        functionName?: 'removeLock'
      }
    : UseContractWriteConfig<typeof unlockV12ABI, 'removeLock', TMode> & {
        abi?: never
        functionName?: 'removeLock'
      } = {} as any
) {
  return useContractWrite<typeof unlockV12ABI, 'removeLock', TMode>({ abi: unlockV12ABI, functionName: 'removeLock', ...config } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link unlockV12ABI}__ and `functionName` set to `"renounceOwnership"`.
 */
export function useUnlockV12RenounceOwnership<TMode extends WriteContractMode = undefined>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<PrepareWriteContractResult<typeof unlockV12ABI, 'renounceOwnership'>['request']['abi'], 'renounceOwnership', TMode> & {
        functionName?: 'renounceOwnership'
      }
    : UseContractWriteConfig<typeof unlockV12ABI, 'renounceOwnership', TMode> & {
        abi?: never
        functionName?: 'renounceOwnership'
      } = {} as any
) {
  return useContractWrite<typeof unlockV12ABI, 'renounceOwnership', TMode>({ abi: unlockV12ABI, functionName: 'renounceOwnership', ...config } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link unlockV12ABI}__ and `functionName` set to `"resetTrackedValue"`.
 */
export function useUnlockV12ResetTrackedValue<TMode extends WriteContractMode = undefined>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<PrepareWriteContractResult<typeof unlockV12ABI, 'resetTrackedValue'>['request']['abi'], 'resetTrackedValue', TMode> & {
        functionName?: 'resetTrackedValue'
      }
    : UseContractWriteConfig<typeof unlockV12ABI, 'resetTrackedValue', TMode> & {
        abi?: never
        functionName?: 'resetTrackedValue'
      } = {} as any
) {
  return useContractWrite<typeof unlockV12ABI, 'resetTrackedValue', TMode>({ abi: unlockV12ABI, functionName: 'resetTrackedValue', ...config } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link unlockV12ABI}__ and `functionName` set to `"setLockTemplate"`.
 */
export function useUnlockV12SetLockTemplate<TMode extends WriteContractMode = undefined>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<PrepareWriteContractResult<typeof unlockV12ABI, 'setLockTemplate'>['request']['abi'], 'setLockTemplate', TMode> & {
        functionName?: 'setLockTemplate'
      }
    : UseContractWriteConfig<typeof unlockV12ABI, 'setLockTemplate', TMode> & {
        abi?: never
        functionName?: 'setLockTemplate'
      } = {} as any
) {
  return useContractWrite<typeof unlockV12ABI, 'setLockTemplate', TMode>({ abi: unlockV12ABI, functionName: 'setLockTemplate', ...config } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link unlockV12ABI}__ and `functionName` set to `"setOracle"`.
 */
export function useUnlockV12SetOracle<TMode extends WriteContractMode = undefined>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<PrepareWriteContractResult<typeof unlockV12ABI, 'setOracle'>['request']['abi'], 'setOracle', TMode> & {
        functionName?: 'setOracle'
      }
    : UseContractWriteConfig<typeof unlockV12ABI, 'setOracle', TMode> & {
        abi?: never
        functionName?: 'setOracle'
      } = {} as any
) {
  return useContractWrite<typeof unlockV12ABI, 'setOracle', TMode>({ abi: unlockV12ABI, functionName: 'setOracle', ...config } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link unlockV12ABI}__ and `functionName` set to `"setProtocolFee"`.
 */
export function useUnlockV12SetProtocolFee<TMode extends WriteContractMode = undefined>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<PrepareWriteContractResult<typeof unlockV12ABI, 'setProtocolFee'>['request']['abi'], 'setProtocolFee', TMode> & {
        functionName?: 'setProtocolFee'
      }
    : UseContractWriteConfig<typeof unlockV12ABI, 'setProtocolFee', TMode> & {
        abi?: never
        functionName?: 'setProtocolFee'
      } = {} as any
) {
  return useContractWrite<typeof unlockV12ABI, 'setProtocolFee', TMode>({ abi: unlockV12ABI, functionName: 'setProtocolFee', ...config } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link unlockV12ABI}__ and `functionName` set to `"transferOwnership"`.
 */
export function useUnlockV12TransferOwnership<TMode extends WriteContractMode = undefined>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<PrepareWriteContractResult<typeof unlockV12ABI, 'transferOwnership'>['request']['abi'], 'transferOwnership', TMode> & {
        functionName?: 'transferOwnership'
      }
    : UseContractWriteConfig<typeof unlockV12ABI, 'transferOwnership', TMode> & {
        abi?: never
        functionName?: 'transferOwnership'
      } = {} as any
) {
  return useContractWrite<typeof unlockV12ABI, 'transferOwnership', TMode>({ abi: unlockV12ABI, functionName: 'transferOwnership', ...config } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link unlockV12ABI}__ and `functionName` set to `"transferTokens"`.
 */
export function useUnlockV12TransferTokens<TMode extends WriteContractMode = undefined>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<PrepareWriteContractResult<typeof unlockV12ABI, 'transferTokens'>['request']['abi'], 'transferTokens', TMode> & {
        functionName?: 'transferTokens'
      }
    : UseContractWriteConfig<typeof unlockV12ABI, 'transferTokens', TMode> & {
        abi?: never
        functionName?: 'transferTokens'
      } = {} as any
) {
  return useContractWrite<typeof unlockV12ABI, 'transferTokens', TMode>({ abi: unlockV12ABI, functionName: 'transferTokens', ...config } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link unlockV12ABI}__ and `functionName` set to `"upgradeLock"`.
 */
export function useUnlockV12UpgradeLock<TMode extends WriteContractMode = undefined>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<PrepareWriteContractResult<typeof unlockV12ABI, 'upgradeLock'>['request']['abi'], 'upgradeLock', TMode> & {
        functionName?: 'upgradeLock'
      }
    : UseContractWriteConfig<typeof unlockV12ABI, 'upgradeLock', TMode> & {
        abi?: never
        functionName?: 'upgradeLock'
      } = {} as any
) {
  return useContractWrite<typeof unlockV12ABI, 'upgradeLock', TMode>({ abi: unlockV12ABI, functionName: 'upgradeLock', ...config } as any)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link unlockV12ABI}__.
 */
export function usePrepareUnlockV12Write<TFunctionName extends string>(
  config: Omit<UsePrepareContractWriteConfig<typeof unlockV12ABI, TFunctionName>, 'abi'> = {} as any
) {
  return usePrepareContractWrite({ abi: unlockV12ABI, ...config } as UsePrepareContractWriteConfig<typeof unlockV12ABI, TFunctionName>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link unlockV12ABI}__ and `functionName` set to `"__initializeOwnable"`.
 */
export function usePrepareUnlockV12InitializeOwnable(
  config: Omit<UsePrepareContractWriteConfig<typeof unlockV12ABI, '__initializeOwnable'>, 'abi' | 'functionName'> = {} as any
) {
  return usePrepareContractWrite({ abi: unlockV12ABI, functionName: '__initializeOwnable', ...config } as UsePrepareContractWriteConfig<
    typeof unlockV12ABI,
    '__initializeOwnable'
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link unlockV12ABI}__ and `functionName` set to `"addLockTemplate"`.
 */
export function usePrepareUnlockV12AddLockTemplate(
  config: Omit<UsePrepareContractWriteConfig<typeof unlockV12ABI, 'addLockTemplate'>, 'abi' | 'functionName'> = {} as any
) {
  return usePrepareContractWrite({ abi: unlockV12ABI, functionName: 'addLockTemplate', ...config } as UsePrepareContractWriteConfig<
    typeof unlockV12ABI,
    'addLockTemplate'
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link unlockV12ABI}__ and `functionName` set to `"configUnlock"`.
 */
export function usePrepareUnlockV12ConfigUnlock(
  config: Omit<UsePrepareContractWriteConfig<typeof unlockV12ABI, 'configUnlock'>, 'abi' | 'functionName'> = {} as any
) {
  return usePrepareContractWrite({ abi: unlockV12ABI, functionName: 'configUnlock', ...config } as UsePrepareContractWriteConfig<
    typeof unlockV12ABI,
    'configUnlock'
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link unlockV12ABI}__ and `functionName` set to `"createLock"`.
 */
export function usePrepareUnlockV12CreateLock(
  config: Omit<UsePrepareContractWriteConfig<typeof unlockV12ABI, 'createLock'>, 'abi' | 'functionName'> = {} as any
) {
  return usePrepareContractWrite({ abi: unlockV12ABI, functionName: 'createLock', ...config } as UsePrepareContractWriteConfig<
    typeof unlockV12ABI,
    'createLock'
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link unlockV12ABI}__ and `functionName` set to `"createUpgradeableLock"`.
 */
export function usePrepareUnlockV12CreateUpgradeableLock(
  config: Omit<UsePrepareContractWriteConfig<typeof unlockV12ABI, 'createUpgradeableLock'>, 'abi' | 'functionName'> = {} as any
) {
  return usePrepareContractWrite({ abi: unlockV12ABI, functionName: 'createUpgradeableLock', ...config } as UsePrepareContractWriteConfig<
    typeof unlockV12ABI,
    'createUpgradeableLock'
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link unlockV12ABI}__ and `functionName` set to `"createUpgradeableLockAtVersion"`.
 */
export function usePrepareUnlockV12CreateUpgradeableLockAtVersion(
  config: Omit<UsePrepareContractWriteConfig<typeof unlockV12ABI, 'createUpgradeableLockAtVersion'>, 'abi' | 'functionName'> = {} as any
) {
  return usePrepareContractWrite({ abi: unlockV12ABI, functionName: 'createUpgradeableLockAtVersion', ...config } as UsePrepareContractWriteConfig<
    typeof unlockV12ABI,
    'createUpgradeableLockAtVersion'
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link unlockV12ABI}__ and `functionName` set to `"initialize"`.
 */
export function usePrepareUnlockV12Initialize(
  config: Omit<UsePrepareContractWriteConfig<typeof unlockV12ABI, 'initialize'>, 'abi' | 'functionName'> = {} as any
) {
  return usePrepareContractWrite({ abi: unlockV12ABI, functionName: 'initialize', ...config } as UsePrepareContractWriteConfig<
    typeof unlockV12ABI,
    'initialize'
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link unlockV12ABI}__ and `functionName` set to `"initializeProxyAdmin"`.
 */
export function usePrepareUnlockV12InitializeProxyAdmin(
  config: Omit<UsePrepareContractWriteConfig<typeof unlockV12ABI, 'initializeProxyAdmin'>, 'abi' | 'functionName'> = {} as any
) {
  return usePrepareContractWrite({ abi: unlockV12ABI, functionName: 'initializeProxyAdmin', ...config } as UsePrepareContractWriteConfig<
    typeof unlockV12ABI,
    'initializeProxyAdmin'
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link unlockV12ABI}__ and `functionName` set to `"postLockUpgrade"`.
 */
export function usePrepareUnlockV12PostLockUpgrade(
  config: Omit<UsePrepareContractWriteConfig<typeof unlockV12ABI, 'postLockUpgrade'>, 'abi' | 'functionName'> = {} as any
) {
  return usePrepareContractWrite({ abi: unlockV12ABI, functionName: 'postLockUpgrade', ...config } as UsePrepareContractWriteConfig<
    typeof unlockV12ABI,
    'postLockUpgrade'
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link unlockV12ABI}__ and `functionName` set to `"recordKeyPurchase"`.
 */
export function usePrepareUnlockV12RecordKeyPurchase(
  config: Omit<UsePrepareContractWriteConfig<typeof unlockV12ABI, 'recordKeyPurchase'>, 'abi' | 'functionName'> = {} as any
) {
  return usePrepareContractWrite({ abi: unlockV12ABI, functionName: 'recordKeyPurchase', ...config } as UsePrepareContractWriteConfig<
    typeof unlockV12ABI,
    'recordKeyPurchase'
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link unlockV12ABI}__ and `functionName` set to `"removeLock"`.
 */
export function usePrepareUnlockV12RemoveLock(
  config: Omit<UsePrepareContractWriteConfig<typeof unlockV12ABI, 'removeLock'>, 'abi' | 'functionName'> = {} as any
) {
  return usePrepareContractWrite({ abi: unlockV12ABI, functionName: 'removeLock', ...config } as UsePrepareContractWriteConfig<
    typeof unlockV12ABI,
    'removeLock'
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link unlockV12ABI}__ and `functionName` set to `"renounceOwnership"`.
 */
export function usePrepareUnlockV12RenounceOwnership(
  config: Omit<UsePrepareContractWriteConfig<typeof unlockV12ABI, 'renounceOwnership'>, 'abi' | 'functionName'> = {} as any
) {
  return usePrepareContractWrite({ abi: unlockV12ABI, functionName: 'renounceOwnership', ...config } as UsePrepareContractWriteConfig<
    typeof unlockV12ABI,
    'renounceOwnership'
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link unlockV12ABI}__ and `functionName` set to `"resetTrackedValue"`.
 */
export function usePrepareUnlockV12ResetTrackedValue(
  config: Omit<UsePrepareContractWriteConfig<typeof unlockV12ABI, 'resetTrackedValue'>, 'abi' | 'functionName'> = {} as any
) {
  return usePrepareContractWrite({ abi: unlockV12ABI, functionName: 'resetTrackedValue', ...config } as UsePrepareContractWriteConfig<
    typeof unlockV12ABI,
    'resetTrackedValue'
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link unlockV12ABI}__ and `functionName` set to `"setLockTemplate"`.
 */
export function usePrepareUnlockV12SetLockTemplate(
  config: Omit<UsePrepareContractWriteConfig<typeof unlockV12ABI, 'setLockTemplate'>, 'abi' | 'functionName'> = {} as any
) {
  return usePrepareContractWrite({ abi: unlockV12ABI, functionName: 'setLockTemplate', ...config } as UsePrepareContractWriteConfig<
    typeof unlockV12ABI,
    'setLockTemplate'
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link unlockV12ABI}__ and `functionName` set to `"setOracle"`.
 */
export function usePrepareUnlockV12SetOracle(
  config: Omit<UsePrepareContractWriteConfig<typeof unlockV12ABI, 'setOracle'>, 'abi' | 'functionName'> = {} as any
) {
  return usePrepareContractWrite({ abi: unlockV12ABI, functionName: 'setOracle', ...config } as UsePrepareContractWriteConfig<
    typeof unlockV12ABI,
    'setOracle'
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link unlockV12ABI}__ and `functionName` set to `"setProtocolFee"`.
 */
export function usePrepareUnlockV12SetProtocolFee(
  config: Omit<UsePrepareContractWriteConfig<typeof unlockV12ABI, 'setProtocolFee'>, 'abi' | 'functionName'> = {} as any
) {
  return usePrepareContractWrite({ abi: unlockV12ABI, functionName: 'setProtocolFee', ...config } as UsePrepareContractWriteConfig<
    typeof unlockV12ABI,
    'setProtocolFee'
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link unlockV12ABI}__ and `functionName` set to `"transferOwnership"`.
 */
export function usePrepareUnlockV12TransferOwnership(
  config: Omit<UsePrepareContractWriteConfig<typeof unlockV12ABI, 'transferOwnership'>, 'abi' | 'functionName'> = {} as any
) {
  return usePrepareContractWrite({ abi: unlockV12ABI, functionName: 'transferOwnership', ...config } as UsePrepareContractWriteConfig<
    typeof unlockV12ABI,
    'transferOwnership'
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link unlockV12ABI}__ and `functionName` set to `"transferTokens"`.
 */
export function usePrepareUnlockV12TransferTokens(
  config: Omit<UsePrepareContractWriteConfig<typeof unlockV12ABI, 'transferTokens'>, 'abi' | 'functionName'> = {} as any
) {
  return usePrepareContractWrite({ abi: unlockV12ABI, functionName: 'transferTokens', ...config } as UsePrepareContractWriteConfig<
    typeof unlockV12ABI,
    'transferTokens'
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link unlockV12ABI}__ and `functionName` set to `"upgradeLock"`.
 */
export function usePrepareUnlockV12UpgradeLock(
  config: Omit<UsePrepareContractWriteConfig<typeof unlockV12ABI, 'upgradeLock'>, 'abi' | 'functionName'> = {} as any
) {
  return usePrepareContractWrite({ abi: unlockV12ABI, functionName: 'upgradeLock', ...config } as UsePrepareContractWriteConfig<
    typeof unlockV12ABI,
    'upgradeLock'
  >)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link unlockV12ABI}__.
 */
export function useUnlockV12Event<TEventName extends string>(
  config: Omit<UseContractEventConfig<typeof unlockV12ABI, TEventName>, 'abi'> = {} as any
) {
  return useContractEvent({ abi: unlockV12ABI, ...config } as UseContractEventConfig<typeof unlockV12ABI, TEventName>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link unlockV12ABI}__ and `eventName` set to `"ConfigUnlock"`.
 */
export function useUnlockV12ConfigUnlockEvent(
  config: Omit<UseContractEventConfig<typeof unlockV12ABI, 'ConfigUnlock'>, 'abi' | 'eventName'> = {} as any
) {
  return useContractEvent({ abi: unlockV12ABI, eventName: 'ConfigUnlock', ...config } as UseContractEventConfig<typeof unlockV12ABI, 'ConfigUnlock'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link unlockV12ABI}__ and `eventName` set to `"GNPChanged"`.
 */
export function useUnlockV12GnpChangedEvent(
  config: Omit<UseContractEventConfig<typeof unlockV12ABI, 'GNPChanged'>, 'abi' | 'eventName'> = {} as any
) {
  return useContractEvent({ abi: unlockV12ABI, eventName: 'GNPChanged', ...config } as UseContractEventConfig<typeof unlockV12ABI, 'GNPChanged'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link unlockV12ABI}__ and `eventName` set to `"LockUpgraded"`.
 */
export function useUnlockV12LockUpgradedEvent(
  config: Omit<UseContractEventConfig<typeof unlockV12ABI, 'LockUpgraded'>, 'abi' | 'eventName'> = {} as any
) {
  return useContractEvent({ abi: unlockV12ABI, eventName: 'LockUpgraded', ...config } as UseContractEventConfig<typeof unlockV12ABI, 'LockUpgraded'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link unlockV12ABI}__ and `eventName` set to `"NewLock"`.
 */
export function useUnlockV12NewLockEvent(config: Omit<UseContractEventConfig<typeof unlockV12ABI, 'NewLock'>, 'abi' | 'eventName'> = {} as any) {
  return useContractEvent({ abi: unlockV12ABI, eventName: 'NewLock', ...config } as UseContractEventConfig<typeof unlockV12ABI, 'NewLock'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link unlockV12ABI}__ and `eventName` set to `"OwnershipTransferred"`.
 */
export function useUnlockV12OwnershipTransferredEvent(
  config: Omit<UseContractEventConfig<typeof unlockV12ABI, 'OwnershipTransferred'>, 'abi' | 'eventName'> = {} as any
) {
  return useContractEvent({ abi: unlockV12ABI, eventName: 'OwnershipTransferred', ...config } as UseContractEventConfig<
    typeof unlockV12ABI,
    'OwnershipTransferred'
  >)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link unlockV12ABI}__ and `eventName` set to `"ResetTrackedValue"`.
 */
export function useUnlockV12ResetTrackedValueEvent(
  config: Omit<UseContractEventConfig<typeof unlockV12ABI, 'ResetTrackedValue'>, 'abi' | 'eventName'> = {} as any
) {
  return useContractEvent({ abi: unlockV12ABI, eventName: 'ResetTrackedValue', ...config } as UseContractEventConfig<
    typeof unlockV12ABI,
    'ResetTrackedValue'
  >)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link unlockV12ABI}__ and `eventName` set to `"SetLockTemplate"`.
 */
export function useUnlockV12SetLockTemplateEvent(
  config: Omit<UseContractEventConfig<typeof unlockV12ABI, 'SetLockTemplate'>, 'abi' | 'eventName'> = {} as any
) {
  return useContractEvent({ abi: unlockV12ABI, eventName: 'SetLockTemplate', ...config } as UseContractEventConfig<
    typeof unlockV12ABI,
    'SetLockTemplate'
  >)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link unlockV12ABI}__ and `eventName` set to `"UnlockTemplateAdded"`.
 */
export function useUnlockV12UnlockTemplateAddedEvent(
  config: Omit<UseContractEventConfig<typeof unlockV12ABI, 'UnlockTemplateAdded'>, 'abi' | 'eventName'> = {} as any
) {
  return useContractEvent({ abi: unlockV12ABI, eventName: 'UnlockTemplateAdded', ...config } as UseContractEventConfig<
    typeof unlockV12ABI,
    'UnlockTemplateAdded'
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link publicLockV13ABI}__.
 */
export function usePublicLockV13Read<TFunctionName extends string, TSelectData = ReadContractResult<typeof publicLockV13ABI, TFunctionName>>(
  config: Omit<UseContractReadConfig<typeof publicLockV13ABI, TFunctionName, TSelectData>, 'abi'> = {} as any
) {
  return useContractRead({ abi: publicLockV13ABI, ...config } as UseContractReadConfig<typeof publicLockV13ABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link publicLockV13ABI}__ and `functionName` set to `"DEFAULT_ADMIN_ROLE"`.
 */
export function usePublicLockV13DefaultAdminRole<
  TFunctionName extends 'DEFAULT_ADMIN_ROLE',
  TSelectData = ReadContractResult<typeof publicLockV13ABI, TFunctionName>
>(config: Omit<UseContractReadConfig<typeof publicLockV13ABI, TFunctionName, TSelectData>, 'abi' | 'functionName'> = {} as any) {
  return useContractRead({ abi: publicLockV13ABI, functionName: 'DEFAULT_ADMIN_ROLE', ...config } as UseContractReadConfig<
    typeof publicLockV13ABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link publicLockV13ABI}__ and `functionName` set to `"balanceOf"`.
 */
export function usePublicLockV13BalanceOf<
  TFunctionName extends 'balanceOf',
  TSelectData = ReadContractResult<typeof publicLockV13ABI, TFunctionName>
>(config: Omit<UseContractReadConfig<typeof publicLockV13ABI, TFunctionName, TSelectData>, 'abi' | 'functionName'> = {} as any) {
  return useContractRead({ abi: publicLockV13ABI, functionName: 'balanceOf', ...config } as UseContractReadConfig<
    typeof publicLockV13ABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link publicLockV13ABI}__ and `functionName` set to `"expirationDuration"`.
 */
export function usePublicLockV13ExpirationDuration<
  TFunctionName extends 'expirationDuration',
  TSelectData = ReadContractResult<typeof publicLockV13ABI, TFunctionName>
>(config: Omit<UseContractReadConfig<typeof publicLockV13ABI, TFunctionName, TSelectData>, 'abi' | 'functionName'> = {} as any) {
  return useContractRead({ abi: publicLockV13ABI, functionName: 'expirationDuration', ...config } as UseContractReadConfig<
    typeof publicLockV13ABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link publicLockV13ABI}__ and `functionName` set to `"freeTrialLength"`.
 */
export function usePublicLockV13FreeTrialLength<
  TFunctionName extends 'freeTrialLength',
  TSelectData = ReadContractResult<typeof publicLockV13ABI, TFunctionName>
>(config: Omit<UseContractReadConfig<typeof publicLockV13ABI, TFunctionName, TSelectData>, 'abi' | 'functionName'> = {} as any) {
  return useContractRead({ abi: publicLockV13ABI, functionName: 'freeTrialLength', ...config } as UseContractReadConfig<
    typeof publicLockV13ABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link publicLockV13ABI}__ and `functionName` set to `"gasRefundValue"`.
 */
export function usePublicLockV13GasRefundValue<
  TFunctionName extends 'gasRefundValue',
  TSelectData = ReadContractResult<typeof publicLockV13ABI, TFunctionName>
>(config: Omit<UseContractReadConfig<typeof publicLockV13ABI, TFunctionName, TSelectData>, 'abi' | 'functionName'> = {} as any) {
  return useContractRead({ abi: publicLockV13ABI, functionName: 'gasRefundValue', ...config } as UseContractReadConfig<
    typeof publicLockV13ABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link publicLockV13ABI}__ and `functionName` set to `"getApproved"`.
 */
export function usePublicLockV13GetApproved<
  TFunctionName extends 'getApproved',
  TSelectData = ReadContractResult<typeof publicLockV13ABI, TFunctionName>
>(config: Omit<UseContractReadConfig<typeof publicLockV13ABI, TFunctionName, TSelectData>, 'abi' | 'functionName'> = {} as any) {
  return useContractRead({ abi: publicLockV13ABI, functionName: 'getApproved', ...config } as UseContractReadConfig<
    typeof publicLockV13ABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link publicLockV13ABI}__ and `functionName` set to `"getCancelAndRefundValue"`.
 */
export function usePublicLockV13GetCancelAndRefundValue<
  TFunctionName extends 'getCancelAndRefundValue',
  TSelectData = ReadContractResult<typeof publicLockV13ABI, TFunctionName>
>(config: Omit<UseContractReadConfig<typeof publicLockV13ABI, TFunctionName, TSelectData>, 'abi' | 'functionName'> = {} as any) {
  return useContractRead({ abi: publicLockV13ABI, functionName: 'getCancelAndRefundValue', ...config } as UseContractReadConfig<
    typeof publicLockV13ABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link publicLockV13ABI}__ and `functionName` set to `"getHasValidKey"`.
 */
export function usePublicLockV13GetHasValidKey<
  TFunctionName extends 'getHasValidKey',
  TSelectData = ReadContractResult<typeof publicLockV13ABI, TFunctionName>
>(config: Omit<UseContractReadConfig<typeof publicLockV13ABI, TFunctionName, TSelectData>, 'abi' | 'functionName'> = {} as any) {
  return useContractRead({ abi: publicLockV13ABI, functionName: 'getHasValidKey', ...config } as UseContractReadConfig<
    typeof publicLockV13ABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link publicLockV13ABI}__ and `functionName` set to `"getRoleAdmin"`.
 */
export function usePublicLockV13GetRoleAdmin<
  TFunctionName extends 'getRoleAdmin',
  TSelectData = ReadContractResult<typeof publicLockV13ABI, TFunctionName>
>(config: Omit<UseContractReadConfig<typeof publicLockV13ABI, TFunctionName, TSelectData>, 'abi' | 'functionName'> = {} as any) {
  return useContractRead({ abi: publicLockV13ABI, functionName: 'getRoleAdmin', ...config } as UseContractReadConfig<
    typeof publicLockV13ABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link publicLockV13ABI}__ and `functionName` set to `"getTransferFee"`.
 */
export function usePublicLockV13GetTransferFee<
  TFunctionName extends 'getTransferFee',
  TSelectData = ReadContractResult<typeof publicLockV13ABI, TFunctionName>
>(config: Omit<UseContractReadConfig<typeof publicLockV13ABI, TFunctionName, TSelectData>, 'abi' | 'functionName'> = {} as any) {
  return useContractRead({ abi: publicLockV13ABI, functionName: 'getTransferFee', ...config } as UseContractReadConfig<
    typeof publicLockV13ABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link publicLockV13ABI}__ and `functionName` set to `"hasRole"`.
 */
export function usePublicLockV13HasRole<TFunctionName extends 'hasRole', TSelectData = ReadContractResult<typeof publicLockV13ABI, TFunctionName>>(
  config: Omit<UseContractReadConfig<typeof publicLockV13ABI, TFunctionName, TSelectData>, 'abi' | 'functionName'> = {} as any
) {
  return useContractRead({ abi: publicLockV13ABI, functionName: 'hasRole', ...config } as UseContractReadConfig<
    typeof publicLockV13ABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link publicLockV13ABI}__ and `functionName` set to `"isApprovedForAll"`.
 */
export function usePublicLockV13IsApprovedForAll<
  TFunctionName extends 'isApprovedForAll',
  TSelectData = ReadContractResult<typeof publicLockV13ABI, TFunctionName>
>(config: Omit<UseContractReadConfig<typeof publicLockV13ABI, TFunctionName, TSelectData>, 'abi' | 'functionName'> = {} as any) {
  return useContractRead({ abi: publicLockV13ABI, functionName: 'isApprovedForAll', ...config } as UseContractReadConfig<
    typeof publicLockV13ABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link publicLockV13ABI}__ and `functionName` set to `"isLockManager"`.
 */
export function usePublicLockV13IsLockManager<
  TFunctionName extends 'isLockManager',
  TSelectData = ReadContractResult<typeof publicLockV13ABI, TFunctionName>
>(config: Omit<UseContractReadConfig<typeof publicLockV13ABI, TFunctionName, TSelectData>, 'abi' | 'functionName'> = {} as any) {
  return useContractRead({ abi: publicLockV13ABI, functionName: 'isLockManager', ...config } as UseContractReadConfig<
    typeof publicLockV13ABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link publicLockV13ABI}__ and `functionName` set to `"isOwner"`.
 */
export function usePublicLockV13IsOwner<TFunctionName extends 'isOwner', TSelectData = ReadContractResult<typeof publicLockV13ABI, TFunctionName>>(
  config: Omit<UseContractReadConfig<typeof publicLockV13ABI, TFunctionName, TSelectData>, 'abi' | 'functionName'> = {} as any
) {
  return useContractRead({ abi: publicLockV13ABI, functionName: 'isOwner', ...config } as UseContractReadConfig<
    typeof publicLockV13ABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link publicLockV13ABI}__ and `functionName` set to `"isRenewable"`.
 */
export function usePublicLockV13IsRenewable<
  TFunctionName extends 'isRenewable',
  TSelectData = ReadContractResult<typeof publicLockV13ABI, TFunctionName>
>(config: Omit<UseContractReadConfig<typeof publicLockV13ABI, TFunctionName, TSelectData>, 'abi' | 'functionName'> = {} as any) {
  return useContractRead({ abi: publicLockV13ABI, functionName: 'isRenewable', ...config } as UseContractReadConfig<
    typeof publicLockV13ABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link publicLockV13ABI}__ and `functionName` set to `"isValidKey"`.
 */
export function usePublicLockV13IsValidKey<
  TFunctionName extends 'isValidKey',
  TSelectData = ReadContractResult<typeof publicLockV13ABI, TFunctionName>
>(config: Omit<UseContractReadConfig<typeof publicLockV13ABI, TFunctionName, TSelectData>, 'abi' | 'functionName'> = {} as any) {
  return useContractRead({ abi: publicLockV13ABI, functionName: 'isValidKey', ...config } as UseContractReadConfig<
    typeof publicLockV13ABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link publicLockV13ABI}__ and `functionName` set to `"keyExpirationTimestampFor"`.
 */
export function usePublicLockV13KeyExpirationTimestampFor<
  TFunctionName extends 'keyExpirationTimestampFor',
  TSelectData = ReadContractResult<typeof publicLockV13ABI, TFunctionName>
>(config: Omit<UseContractReadConfig<typeof publicLockV13ABI, TFunctionName, TSelectData>, 'abi' | 'functionName'> = {} as any) {
  return useContractRead({ abi: publicLockV13ABI, functionName: 'keyExpirationTimestampFor', ...config } as UseContractReadConfig<
    typeof publicLockV13ABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link publicLockV13ABI}__ and `functionName` set to `"keyManagerOf"`.
 */
export function usePublicLockV13KeyManagerOf<
  TFunctionName extends 'keyManagerOf',
  TSelectData = ReadContractResult<typeof publicLockV13ABI, TFunctionName>
>(config: Omit<UseContractReadConfig<typeof publicLockV13ABI, TFunctionName, TSelectData>, 'abi' | 'functionName'> = {} as any) {
  return useContractRead({ abi: publicLockV13ABI, functionName: 'keyManagerOf', ...config } as UseContractReadConfig<
    typeof publicLockV13ABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link publicLockV13ABI}__ and `functionName` set to `"keyPrice"`.
 */
export function usePublicLockV13KeyPrice<TFunctionName extends 'keyPrice', TSelectData = ReadContractResult<typeof publicLockV13ABI, TFunctionName>>(
  config: Omit<UseContractReadConfig<typeof publicLockV13ABI, TFunctionName, TSelectData>, 'abi' | 'functionName'> = {} as any
) {
  return useContractRead({ abi: publicLockV13ABI, functionName: 'keyPrice', ...config } as UseContractReadConfig<
    typeof publicLockV13ABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link publicLockV13ABI}__ and `functionName` set to `"maxKeysPerAddress"`.
 */
export function usePublicLockV13MaxKeysPerAddress<
  TFunctionName extends 'maxKeysPerAddress',
  TSelectData = ReadContractResult<typeof publicLockV13ABI, TFunctionName>
>(config: Omit<UseContractReadConfig<typeof publicLockV13ABI, TFunctionName, TSelectData>, 'abi' | 'functionName'> = {} as any) {
  return useContractRead({ abi: publicLockV13ABI, functionName: 'maxKeysPerAddress', ...config } as UseContractReadConfig<
    typeof publicLockV13ABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link publicLockV13ABI}__ and `functionName` set to `"maxNumberOfKeys"`.
 */
export function usePublicLockV13MaxNumberOfKeys<
  TFunctionName extends 'maxNumberOfKeys',
  TSelectData = ReadContractResult<typeof publicLockV13ABI, TFunctionName>
>(config: Omit<UseContractReadConfig<typeof publicLockV13ABI, TFunctionName, TSelectData>, 'abi' | 'functionName'> = {} as any) {
  return useContractRead({ abi: publicLockV13ABI, functionName: 'maxNumberOfKeys', ...config } as UseContractReadConfig<
    typeof publicLockV13ABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link publicLockV13ABI}__ and `functionName` set to `"name"`.
 */
export function usePublicLockV13Name<TFunctionName extends 'name', TSelectData = ReadContractResult<typeof publicLockV13ABI, TFunctionName>>(
  config: Omit<UseContractReadConfig<typeof publicLockV13ABI, TFunctionName, TSelectData>, 'abi' | 'functionName'> = {} as any
) {
  return useContractRead({ abi: publicLockV13ABI, functionName: 'name', ...config } as UseContractReadConfig<
    typeof publicLockV13ABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link publicLockV13ABI}__ and `functionName` set to `"numberOfOwners"`.
 */
export function usePublicLockV13NumberOfOwners<
  TFunctionName extends 'numberOfOwners',
  TSelectData = ReadContractResult<typeof publicLockV13ABI, TFunctionName>
>(config: Omit<UseContractReadConfig<typeof publicLockV13ABI, TFunctionName, TSelectData>, 'abi' | 'functionName'> = {} as any) {
  return useContractRead({ abi: publicLockV13ABI, functionName: 'numberOfOwners', ...config } as UseContractReadConfig<
    typeof publicLockV13ABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link publicLockV13ABI}__ and `functionName` set to `"onKeyCancelHook"`.
 */
export function usePublicLockV13OnKeyCancelHook<
  TFunctionName extends 'onKeyCancelHook',
  TSelectData = ReadContractResult<typeof publicLockV13ABI, TFunctionName>
>(config: Omit<UseContractReadConfig<typeof publicLockV13ABI, TFunctionName, TSelectData>, 'abi' | 'functionName'> = {} as any) {
  return useContractRead({ abi: publicLockV13ABI, functionName: 'onKeyCancelHook', ...config } as UseContractReadConfig<
    typeof publicLockV13ABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link publicLockV13ABI}__ and `functionName` set to `"onKeyExtendHook"`.
 */
export function usePublicLockV13OnKeyExtendHook<
  TFunctionName extends 'onKeyExtendHook',
  TSelectData = ReadContractResult<typeof publicLockV13ABI, TFunctionName>
>(config: Omit<UseContractReadConfig<typeof publicLockV13ABI, TFunctionName, TSelectData>, 'abi' | 'functionName'> = {} as any) {
  return useContractRead({ abi: publicLockV13ABI, functionName: 'onKeyExtendHook', ...config } as UseContractReadConfig<
    typeof publicLockV13ABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link publicLockV13ABI}__ and `functionName` set to `"onKeyGrantHook"`.
 */
export function usePublicLockV13OnKeyGrantHook<
  TFunctionName extends 'onKeyGrantHook',
  TSelectData = ReadContractResult<typeof publicLockV13ABI, TFunctionName>
>(config: Omit<UseContractReadConfig<typeof publicLockV13ABI, TFunctionName, TSelectData>, 'abi' | 'functionName'> = {} as any) {
  return useContractRead({ abi: publicLockV13ABI, functionName: 'onKeyGrantHook', ...config } as UseContractReadConfig<
    typeof publicLockV13ABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link publicLockV13ABI}__ and `functionName` set to `"onKeyPurchaseHook"`.
 */
export function usePublicLockV13OnKeyPurchaseHook<
  TFunctionName extends 'onKeyPurchaseHook',
  TSelectData = ReadContractResult<typeof publicLockV13ABI, TFunctionName>
>(config: Omit<UseContractReadConfig<typeof publicLockV13ABI, TFunctionName, TSelectData>, 'abi' | 'functionName'> = {} as any) {
  return useContractRead({ abi: publicLockV13ABI, functionName: 'onKeyPurchaseHook', ...config } as UseContractReadConfig<
    typeof publicLockV13ABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link publicLockV13ABI}__ and `functionName` set to `"onKeyTransferHook"`.
 */
export function usePublicLockV13OnKeyTransferHook<
  TFunctionName extends 'onKeyTransferHook',
  TSelectData = ReadContractResult<typeof publicLockV13ABI, TFunctionName>
>(config: Omit<UseContractReadConfig<typeof publicLockV13ABI, TFunctionName, TSelectData>, 'abi' | 'functionName'> = {} as any) {
  return useContractRead({ abi: publicLockV13ABI, functionName: 'onKeyTransferHook', ...config } as UseContractReadConfig<
    typeof publicLockV13ABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link publicLockV13ABI}__ and `functionName` set to `"onTokenURIHook"`.
 */
export function usePublicLockV13OnTokenUriHook<
  TFunctionName extends 'onTokenURIHook',
  TSelectData = ReadContractResult<typeof publicLockV13ABI, TFunctionName>
>(config: Omit<UseContractReadConfig<typeof publicLockV13ABI, TFunctionName, TSelectData>, 'abi' | 'functionName'> = {} as any) {
  return useContractRead({ abi: publicLockV13ABI, functionName: 'onTokenURIHook', ...config } as UseContractReadConfig<
    typeof publicLockV13ABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link publicLockV13ABI}__ and `functionName` set to `"onValidKeyHook"`.
 */
export function usePublicLockV13OnValidKeyHook<
  TFunctionName extends 'onValidKeyHook',
  TSelectData = ReadContractResult<typeof publicLockV13ABI, TFunctionName>
>(config: Omit<UseContractReadConfig<typeof publicLockV13ABI, TFunctionName, TSelectData>, 'abi' | 'functionName'> = {} as any) {
  return useContractRead({ abi: publicLockV13ABI, functionName: 'onValidKeyHook', ...config } as UseContractReadConfig<
    typeof publicLockV13ABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link publicLockV13ABI}__ and `functionName` set to `"owner"`.
 */
export function usePublicLockV13Owner<TFunctionName extends 'owner', TSelectData = ReadContractResult<typeof publicLockV13ABI, TFunctionName>>(
  config: Omit<UseContractReadConfig<typeof publicLockV13ABI, TFunctionName, TSelectData>, 'abi' | 'functionName'> = {} as any
) {
  return useContractRead({ abi: publicLockV13ABI, functionName: 'owner', ...config } as UseContractReadConfig<
    typeof publicLockV13ABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link publicLockV13ABI}__ and `functionName` set to `"ownerOf"`.
 */
export function usePublicLockV13OwnerOf<TFunctionName extends 'ownerOf', TSelectData = ReadContractResult<typeof publicLockV13ABI, TFunctionName>>(
  config: Omit<UseContractReadConfig<typeof publicLockV13ABI, TFunctionName, TSelectData>, 'abi' | 'functionName'> = {} as any
) {
  return useContractRead({ abi: publicLockV13ABI, functionName: 'ownerOf', ...config } as UseContractReadConfig<
    typeof publicLockV13ABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link publicLockV13ABI}__ and `functionName` set to `"publicLockVersion"`.
 */
export function usePublicLockV13PublicLockVersion<
  TFunctionName extends 'publicLockVersion',
  TSelectData = ReadContractResult<typeof publicLockV13ABI, TFunctionName>
>(config: Omit<UseContractReadConfig<typeof publicLockV13ABI, TFunctionName, TSelectData>, 'abi' | 'functionName'> = {} as any) {
  return useContractRead({ abi: publicLockV13ABI, functionName: 'publicLockVersion', ...config } as UseContractReadConfig<
    typeof publicLockV13ABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link publicLockV13ABI}__ and `functionName` set to `"purchasePriceFor"`.
 */
export function usePublicLockV13PurchasePriceFor<
  TFunctionName extends 'purchasePriceFor',
  TSelectData = ReadContractResult<typeof publicLockV13ABI, TFunctionName>
>(config: Omit<UseContractReadConfig<typeof publicLockV13ABI, TFunctionName, TSelectData>, 'abi' | 'functionName'> = {} as any) {
  return useContractRead({ abi: publicLockV13ABI, functionName: 'purchasePriceFor', ...config } as UseContractReadConfig<
    typeof publicLockV13ABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link publicLockV13ABI}__ and `functionName` set to `"referrerFees"`.
 */
export function usePublicLockV13ReferrerFees<
  TFunctionName extends 'referrerFees',
  TSelectData = ReadContractResult<typeof publicLockV13ABI, TFunctionName>
>(config: Omit<UseContractReadConfig<typeof publicLockV13ABI, TFunctionName, TSelectData>, 'abi' | 'functionName'> = {} as any) {
  return useContractRead({ abi: publicLockV13ABI, functionName: 'referrerFees', ...config } as UseContractReadConfig<
    typeof publicLockV13ABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link publicLockV13ABI}__ and `functionName` set to `"refundPenaltyBasisPoints"`.
 */
export function usePublicLockV13RefundPenaltyBasisPoints<
  TFunctionName extends 'refundPenaltyBasisPoints',
  TSelectData = ReadContractResult<typeof publicLockV13ABI, TFunctionName>
>(config: Omit<UseContractReadConfig<typeof publicLockV13ABI, TFunctionName, TSelectData>, 'abi' | 'functionName'> = {} as any) {
  return useContractRead({ abi: publicLockV13ABI, functionName: 'refundPenaltyBasisPoints', ...config } as UseContractReadConfig<
    typeof publicLockV13ABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link publicLockV13ABI}__ and `functionName` set to `"schemaVersion"`.
 */
export function usePublicLockV13SchemaVersion<
  TFunctionName extends 'schemaVersion',
  TSelectData = ReadContractResult<typeof publicLockV13ABI, TFunctionName>
>(config: Omit<UseContractReadConfig<typeof publicLockV13ABI, TFunctionName, TSelectData>, 'abi' | 'functionName'> = {} as any) {
  return useContractRead({ abi: publicLockV13ABI, functionName: 'schemaVersion', ...config } as UseContractReadConfig<
    typeof publicLockV13ABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link publicLockV13ABI}__ and `functionName` set to `"supportsInterface"`.
 */
export function usePublicLockV13SupportsInterface<
  TFunctionName extends 'supportsInterface',
  TSelectData = ReadContractResult<typeof publicLockV13ABI, TFunctionName>
>(config: Omit<UseContractReadConfig<typeof publicLockV13ABI, TFunctionName, TSelectData>, 'abi' | 'functionName'> = {} as any) {
  return useContractRead({ abi: publicLockV13ABI, functionName: 'supportsInterface', ...config } as UseContractReadConfig<
    typeof publicLockV13ABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link publicLockV13ABI}__ and `functionName` set to `"symbol"`.
 */
export function usePublicLockV13Symbol<TFunctionName extends 'symbol', TSelectData = ReadContractResult<typeof publicLockV13ABI, TFunctionName>>(
  config: Omit<UseContractReadConfig<typeof publicLockV13ABI, TFunctionName, TSelectData>, 'abi' | 'functionName'> = {} as any
) {
  return useContractRead({ abi: publicLockV13ABI, functionName: 'symbol', ...config } as UseContractReadConfig<
    typeof publicLockV13ABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link publicLockV13ABI}__ and `functionName` set to `"tokenAddress"`.
 */
export function usePublicLockV13TokenAddress<
  TFunctionName extends 'tokenAddress',
  TSelectData = ReadContractResult<typeof publicLockV13ABI, TFunctionName>
>(config: Omit<UseContractReadConfig<typeof publicLockV13ABI, TFunctionName, TSelectData>, 'abi' | 'functionName'> = {} as any) {
  return useContractRead({ abi: publicLockV13ABI, functionName: 'tokenAddress', ...config } as UseContractReadConfig<
    typeof publicLockV13ABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link publicLockV13ABI}__ and `functionName` set to `"tokenByIndex"`.
 */
export function usePublicLockV13TokenByIndex<
  TFunctionName extends 'tokenByIndex',
  TSelectData = ReadContractResult<typeof publicLockV13ABI, TFunctionName>
>(config: Omit<UseContractReadConfig<typeof publicLockV13ABI, TFunctionName, TSelectData>, 'abi' | 'functionName'> = {} as any) {
  return useContractRead({ abi: publicLockV13ABI, functionName: 'tokenByIndex', ...config } as UseContractReadConfig<
    typeof publicLockV13ABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link publicLockV13ABI}__ and `functionName` set to `"tokenOfOwnerByIndex"`.
 */
export function usePublicLockV13TokenOfOwnerByIndex<
  TFunctionName extends 'tokenOfOwnerByIndex',
  TSelectData = ReadContractResult<typeof publicLockV13ABI, TFunctionName>
>(config: Omit<UseContractReadConfig<typeof publicLockV13ABI, TFunctionName, TSelectData>, 'abi' | 'functionName'> = {} as any) {
  return useContractRead({ abi: publicLockV13ABI, functionName: 'tokenOfOwnerByIndex', ...config } as UseContractReadConfig<
    typeof publicLockV13ABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link publicLockV13ABI}__ and `functionName` set to `"tokenURI"`.
 */
export function usePublicLockV13TokenUri<TFunctionName extends 'tokenURI', TSelectData = ReadContractResult<typeof publicLockV13ABI, TFunctionName>>(
  config: Omit<UseContractReadConfig<typeof publicLockV13ABI, TFunctionName, TSelectData>, 'abi' | 'functionName'> = {} as any
) {
  return useContractRead({ abi: publicLockV13ABI, functionName: 'tokenURI', ...config } as UseContractReadConfig<
    typeof publicLockV13ABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link publicLockV13ABI}__ and `functionName` set to `"totalKeys"`.
 */
export function usePublicLockV13TotalKeys<
  TFunctionName extends 'totalKeys',
  TSelectData = ReadContractResult<typeof publicLockV13ABI, TFunctionName>
>(config: Omit<UseContractReadConfig<typeof publicLockV13ABI, TFunctionName, TSelectData>, 'abi' | 'functionName'> = {} as any) {
  return useContractRead({ abi: publicLockV13ABI, functionName: 'totalKeys', ...config } as UseContractReadConfig<
    typeof publicLockV13ABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link publicLockV13ABI}__ and `functionName` set to `"totalSupply"`.
 */
export function usePublicLockV13TotalSupply<
  TFunctionName extends 'totalSupply',
  TSelectData = ReadContractResult<typeof publicLockV13ABI, TFunctionName>
>(config: Omit<UseContractReadConfig<typeof publicLockV13ABI, TFunctionName, TSelectData>, 'abi' | 'functionName'> = {} as any) {
  return useContractRead({ abi: publicLockV13ABI, functionName: 'totalSupply', ...config } as UseContractReadConfig<
    typeof publicLockV13ABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link publicLockV13ABI}__ and `functionName` set to `"transferFeeBasisPoints"`.
 */
export function usePublicLockV13TransferFeeBasisPoints<
  TFunctionName extends 'transferFeeBasisPoints',
  TSelectData = ReadContractResult<typeof publicLockV13ABI, TFunctionName>
>(config: Omit<UseContractReadConfig<typeof publicLockV13ABI, TFunctionName, TSelectData>, 'abi' | 'functionName'> = {} as any) {
  return useContractRead({ abi: publicLockV13ABI, functionName: 'transferFeeBasisPoints', ...config } as UseContractReadConfig<
    typeof publicLockV13ABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link publicLockV13ABI}__ and `functionName` set to `"unlockProtocol"`.
 */
export function usePublicLockV13UnlockProtocol<
  TFunctionName extends 'unlockProtocol',
  TSelectData = ReadContractResult<typeof publicLockV13ABI, TFunctionName>
>(config: Omit<UseContractReadConfig<typeof publicLockV13ABI, TFunctionName, TSelectData>, 'abi' | 'functionName'> = {} as any) {
  return useContractRead({ abi: publicLockV13ABI, functionName: 'unlockProtocol', ...config } as UseContractReadConfig<
    typeof publicLockV13ABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link publicLockV13ABI}__.
 */
export function usePublicLockV13Write<TFunctionName extends string, TMode extends WriteContractMode = undefined>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<PrepareWriteContractResult<typeof publicLockV13ABI, string>['request']['abi'], TFunctionName, TMode>
    : UseContractWriteConfig<typeof publicLockV13ABI, TFunctionName, TMode> & {
        abi?: never
      } = {} as any
) {
  return useContractWrite<typeof publicLockV13ABI, TFunctionName, TMode>({ abi: publicLockV13ABI, ...config } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link publicLockV13ABI}__ and `functionName` set to `"addLockManager"`.
 */
export function usePublicLockV13AddLockManager<TMode extends WriteContractMode = undefined>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<PrepareWriteContractResult<typeof publicLockV13ABI, 'addLockManager'>['request']['abi'], 'addLockManager', TMode> & {
        functionName?: 'addLockManager'
      }
    : UseContractWriteConfig<typeof publicLockV13ABI, 'addLockManager', TMode> & {
        abi?: never
        functionName?: 'addLockManager'
      } = {} as any
) {
  return useContractWrite<typeof publicLockV13ABI, 'addLockManager', TMode>({
    abi: publicLockV13ABI,
    functionName: 'addLockManager',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link publicLockV13ABI}__ and `functionName` set to `"approve"`.
 */
export function usePublicLockV13Approve<TMode extends WriteContractMode = undefined>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<PrepareWriteContractResult<typeof publicLockV13ABI, 'approve'>['request']['abi'], 'approve', TMode> & {
        functionName?: 'approve'
      }
    : UseContractWriteConfig<typeof publicLockV13ABI, 'approve', TMode> & {
        abi?: never
        functionName?: 'approve'
      } = {} as any
) {
  return useContractWrite<typeof publicLockV13ABI, 'approve', TMode>({ abi: publicLockV13ABI, functionName: 'approve', ...config } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link publicLockV13ABI}__ and `functionName` set to `"burn"`.
 */
export function usePublicLockV13Burn<TMode extends WriteContractMode = undefined>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<PrepareWriteContractResult<typeof publicLockV13ABI, 'burn'>['request']['abi'], 'burn', TMode> & { functionName?: 'burn' }
    : UseContractWriteConfig<typeof publicLockV13ABI, 'burn', TMode> & {
        abi?: never
        functionName?: 'burn'
      } = {} as any
) {
  return useContractWrite<typeof publicLockV13ABI, 'burn', TMode>({ abi: publicLockV13ABI, functionName: 'burn', ...config } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link publicLockV13ABI}__ and `functionName` set to `"cancelAndRefund"`.
 */
export function usePublicLockV13CancelAndRefund<TMode extends WriteContractMode = undefined>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<PrepareWriteContractResult<typeof publicLockV13ABI, 'cancelAndRefund'>['request']['abi'], 'cancelAndRefund', TMode> & {
        functionName?: 'cancelAndRefund'
      }
    : UseContractWriteConfig<typeof publicLockV13ABI, 'cancelAndRefund', TMode> & {
        abi?: never
        functionName?: 'cancelAndRefund'
      } = {} as any
) {
  return useContractWrite<typeof publicLockV13ABI, 'cancelAndRefund', TMode>({
    abi: publicLockV13ABI,
    functionName: 'cancelAndRefund',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link publicLockV13ABI}__ and `functionName` set to `"expireAndRefundFor"`.
 */
export function usePublicLockV13ExpireAndRefundFor<TMode extends WriteContractMode = undefined>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<typeof publicLockV13ABI, 'expireAndRefundFor'>['request']['abi'],
        'expireAndRefundFor',
        TMode
      > & { functionName?: 'expireAndRefundFor' }
    : UseContractWriteConfig<typeof publicLockV13ABI, 'expireAndRefundFor', TMode> & {
        abi?: never
        functionName?: 'expireAndRefundFor'
      } = {} as any
) {
  return useContractWrite<typeof publicLockV13ABI, 'expireAndRefundFor', TMode>({
    abi: publicLockV13ABI,
    functionName: 'expireAndRefundFor',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link publicLockV13ABI}__ and `functionName` set to `"extend"`.
 */
export function usePublicLockV13Extend<TMode extends WriteContractMode = undefined>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<PrepareWriteContractResult<typeof publicLockV13ABI, 'extend'>['request']['abi'], 'extend', TMode> & {
        functionName?: 'extend'
      }
    : UseContractWriteConfig<typeof publicLockV13ABI, 'extend', TMode> & {
        abi?: never
        functionName?: 'extend'
      } = {} as any
) {
  return useContractWrite<typeof publicLockV13ABI, 'extend', TMode>({ abi: publicLockV13ABI, functionName: 'extend', ...config } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link publicLockV13ABI}__ and `functionName` set to `"grantKeyExtension"`.
 */
export function usePublicLockV13GrantKeyExtension<TMode extends WriteContractMode = undefined>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<typeof publicLockV13ABI, 'grantKeyExtension'>['request']['abi'],
        'grantKeyExtension',
        TMode
      > & { functionName?: 'grantKeyExtension' }
    : UseContractWriteConfig<typeof publicLockV13ABI, 'grantKeyExtension', TMode> & {
        abi?: never
        functionName?: 'grantKeyExtension'
      } = {} as any
) {
  return useContractWrite<typeof publicLockV13ABI, 'grantKeyExtension', TMode>({
    abi: publicLockV13ABI,
    functionName: 'grantKeyExtension',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link publicLockV13ABI}__ and `functionName` set to `"grantKeys"`.
 */
export function usePublicLockV13GrantKeys<TMode extends WriteContractMode = undefined>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<PrepareWriteContractResult<typeof publicLockV13ABI, 'grantKeys'>['request']['abi'], 'grantKeys', TMode> & {
        functionName?: 'grantKeys'
      }
    : UseContractWriteConfig<typeof publicLockV13ABI, 'grantKeys', TMode> & {
        abi?: never
        functionName?: 'grantKeys'
      } = {} as any
) {
  return useContractWrite<typeof publicLockV13ABI, 'grantKeys', TMode>({ abi: publicLockV13ABI, functionName: 'grantKeys', ...config } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link publicLockV13ABI}__ and `functionName` set to `"grantRole"`.
 */
export function usePublicLockV13GrantRole<TMode extends WriteContractMode = undefined>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<PrepareWriteContractResult<typeof publicLockV13ABI, 'grantRole'>['request']['abi'], 'grantRole', TMode> & {
        functionName?: 'grantRole'
      }
    : UseContractWriteConfig<typeof publicLockV13ABI, 'grantRole', TMode> & {
        abi?: never
        functionName?: 'grantRole'
      } = {} as any
) {
  return useContractWrite<typeof publicLockV13ABI, 'grantRole', TMode>({ abi: publicLockV13ABI, functionName: 'grantRole', ...config } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link publicLockV13ABI}__ and `functionName` set to `"initialize"`.
 */
export function usePublicLockV13Initialize<TMode extends WriteContractMode = undefined>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<PrepareWriteContractResult<typeof publicLockV13ABI, 'initialize'>['request']['abi'], 'initialize', TMode> & {
        functionName?: 'initialize'
      }
    : UseContractWriteConfig<typeof publicLockV13ABI, 'initialize', TMode> & {
        abi?: never
        functionName?: 'initialize'
      } = {} as any
) {
  return useContractWrite<typeof publicLockV13ABI, 'initialize', TMode>({ abi: publicLockV13ABI, functionName: 'initialize', ...config } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link publicLockV13ABI}__ and `functionName` set to `"lendKey"`.
 */
export function usePublicLockV13LendKey<TMode extends WriteContractMode = undefined>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<PrepareWriteContractResult<typeof publicLockV13ABI, 'lendKey'>['request']['abi'], 'lendKey', TMode> & {
        functionName?: 'lendKey'
      }
    : UseContractWriteConfig<typeof publicLockV13ABI, 'lendKey', TMode> & {
        abi?: never
        functionName?: 'lendKey'
      } = {} as any
) {
  return useContractWrite<typeof publicLockV13ABI, 'lendKey', TMode>({ abi: publicLockV13ABI, functionName: 'lendKey', ...config } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link publicLockV13ABI}__ and `functionName` set to `"mergeKeys"`.
 */
export function usePublicLockV13MergeKeys<TMode extends WriteContractMode = undefined>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<PrepareWriteContractResult<typeof publicLockV13ABI, 'mergeKeys'>['request']['abi'], 'mergeKeys', TMode> & {
        functionName?: 'mergeKeys'
      }
    : UseContractWriteConfig<typeof publicLockV13ABI, 'mergeKeys', TMode> & {
        abi?: never
        functionName?: 'mergeKeys'
      } = {} as any
) {
  return useContractWrite<typeof publicLockV13ABI, 'mergeKeys', TMode>({ abi: publicLockV13ABI, functionName: 'mergeKeys', ...config } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link publicLockV13ABI}__ and `functionName` set to `"migrate"`.
 */
export function usePublicLockV13Migrate<TMode extends WriteContractMode = undefined>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<PrepareWriteContractResult<typeof publicLockV13ABI, 'migrate'>['request']['abi'], 'migrate', TMode> & {
        functionName?: 'migrate'
      }
    : UseContractWriteConfig<typeof publicLockV13ABI, 'migrate', TMode> & {
        abi?: never
        functionName?: 'migrate'
      } = {} as any
) {
  return useContractWrite<typeof publicLockV13ABI, 'migrate', TMode>({ abi: publicLockV13ABI, functionName: 'migrate', ...config } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link publicLockV13ABI}__ and `functionName` set to `"purchase"`.
 */
export function usePublicLockV13Purchase<TMode extends WriteContractMode = undefined>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<PrepareWriteContractResult<typeof publicLockV13ABI, 'purchase'>['request']['abi'], 'purchase', TMode> & {
        functionName?: 'purchase'
      }
    : UseContractWriteConfig<typeof publicLockV13ABI, 'purchase', TMode> & {
        abi?: never
        functionName?: 'purchase'
      } = {} as any
) {
  return useContractWrite<typeof publicLockV13ABI, 'purchase', TMode>({ abi: publicLockV13ABI, functionName: 'purchase', ...config } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link publicLockV13ABI}__ and `functionName` set to `"renewMembershipFor"`.
 */
export function usePublicLockV13RenewMembershipFor<TMode extends WriteContractMode = undefined>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<typeof publicLockV13ABI, 'renewMembershipFor'>['request']['abi'],
        'renewMembershipFor',
        TMode
      > & { functionName?: 'renewMembershipFor' }
    : UseContractWriteConfig<typeof publicLockV13ABI, 'renewMembershipFor', TMode> & {
        abi?: never
        functionName?: 'renewMembershipFor'
      } = {} as any
) {
  return useContractWrite<typeof publicLockV13ABI, 'renewMembershipFor', TMode>({
    abi: publicLockV13ABI,
    functionName: 'renewMembershipFor',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link publicLockV13ABI}__ and `functionName` set to `"renounceLockManager"`.
 */
export function usePublicLockV13RenounceLockManager<TMode extends WriteContractMode = undefined>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<typeof publicLockV13ABI, 'renounceLockManager'>['request']['abi'],
        'renounceLockManager',
        TMode
      > & { functionName?: 'renounceLockManager' }
    : UseContractWriteConfig<typeof publicLockV13ABI, 'renounceLockManager', TMode> & {
        abi?: never
        functionName?: 'renounceLockManager'
      } = {} as any
) {
  return useContractWrite<typeof publicLockV13ABI, 'renounceLockManager', TMode>({
    abi: publicLockV13ABI,
    functionName: 'renounceLockManager',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link publicLockV13ABI}__ and `functionName` set to `"renounceRole"`.
 */
export function usePublicLockV13RenounceRole<TMode extends WriteContractMode = undefined>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<PrepareWriteContractResult<typeof publicLockV13ABI, 'renounceRole'>['request']['abi'], 'renounceRole', TMode> & {
        functionName?: 'renounceRole'
      }
    : UseContractWriteConfig<typeof publicLockV13ABI, 'renounceRole', TMode> & {
        abi?: never
        functionName?: 'renounceRole'
      } = {} as any
) {
  return useContractWrite<typeof publicLockV13ABI, 'renounceRole', TMode>({ abi: publicLockV13ABI, functionName: 'renounceRole', ...config } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link publicLockV13ABI}__ and `functionName` set to `"revokeRole"`.
 */
export function usePublicLockV13RevokeRole<TMode extends WriteContractMode = undefined>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<PrepareWriteContractResult<typeof publicLockV13ABI, 'revokeRole'>['request']['abi'], 'revokeRole', TMode> & {
        functionName?: 'revokeRole'
      }
    : UseContractWriteConfig<typeof publicLockV13ABI, 'revokeRole', TMode> & {
        abi?: never
        functionName?: 'revokeRole'
      } = {} as any
) {
  return useContractWrite<typeof publicLockV13ABI, 'revokeRole', TMode>({ abi: publicLockV13ABI, functionName: 'revokeRole', ...config } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link publicLockV13ABI}__ and `functionName` set to `"safeTransferFrom"`.
 */
export function usePublicLockV13SafeTransferFrom<TMode extends WriteContractMode = undefined>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<PrepareWriteContractResult<typeof publicLockV13ABI, 'safeTransferFrom'>['request']['abi'], 'safeTransferFrom', TMode> & {
        functionName?: 'safeTransferFrom'
      }
    : UseContractWriteConfig<typeof publicLockV13ABI, 'safeTransferFrom', TMode> & {
        abi?: never
        functionName?: 'safeTransferFrom'
      } = {} as any
) {
  return useContractWrite<typeof publicLockV13ABI, 'safeTransferFrom', TMode>({
    abi: publicLockV13ABI,
    functionName: 'safeTransferFrom',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link publicLockV13ABI}__ and `functionName` set to `"setApprovalForAll"`.
 */
export function usePublicLockV13SetApprovalForAll<TMode extends WriteContractMode = undefined>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<typeof publicLockV13ABI, 'setApprovalForAll'>['request']['abi'],
        'setApprovalForAll',
        TMode
      > & { functionName?: 'setApprovalForAll' }
    : UseContractWriteConfig<typeof publicLockV13ABI, 'setApprovalForAll', TMode> & {
        abi?: never
        functionName?: 'setApprovalForAll'
      } = {} as any
) {
  return useContractWrite<typeof publicLockV13ABI, 'setApprovalForAll', TMode>({
    abi: publicLockV13ABI,
    functionName: 'setApprovalForAll',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link publicLockV13ABI}__ and `functionName` set to `"setEventHooks"`.
 */
export function usePublicLockV13SetEventHooks<TMode extends WriteContractMode = undefined>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<PrepareWriteContractResult<typeof publicLockV13ABI, 'setEventHooks'>['request']['abi'], 'setEventHooks', TMode> & {
        functionName?: 'setEventHooks'
      }
    : UseContractWriteConfig<typeof publicLockV13ABI, 'setEventHooks', TMode> & {
        abi?: never
        functionName?: 'setEventHooks'
      } = {} as any
) {
  return useContractWrite<typeof publicLockV13ABI, 'setEventHooks', TMode>({ abi: publicLockV13ABI, functionName: 'setEventHooks', ...config } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link publicLockV13ABI}__ and `functionName` set to `"setGasRefundValue"`.
 */
export function usePublicLockV13SetGasRefundValue<TMode extends WriteContractMode = undefined>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<typeof publicLockV13ABI, 'setGasRefundValue'>['request']['abi'],
        'setGasRefundValue',
        TMode
      > & { functionName?: 'setGasRefundValue' }
    : UseContractWriteConfig<typeof publicLockV13ABI, 'setGasRefundValue', TMode> & {
        abi?: never
        functionName?: 'setGasRefundValue'
      } = {} as any
) {
  return useContractWrite<typeof publicLockV13ABI, 'setGasRefundValue', TMode>({
    abi: publicLockV13ABI,
    functionName: 'setGasRefundValue',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link publicLockV13ABI}__ and `functionName` set to `"setKeyManagerOf"`.
 */
export function usePublicLockV13SetKeyManagerOf<TMode extends WriteContractMode = undefined>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<PrepareWriteContractResult<typeof publicLockV13ABI, 'setKeyManagerOf'>['request']['abi'], 'setKeyManagerOf', TMode> & {
        functionName?: 'setKeyManagerOf'
      }
    : UseContractWriteConfig<typeof publicLockV13ABI, 'setKeyManagerOf', TMode> & {
        abi?: never
        functionName?: 'setKeyManagerOf'
      } = {} as any
) {
  return useContractWrite<typeof publicLockV13ABI, 'setKeyManagerOf', TMode>({
    abi: publicLockV13ABI,
    functionName: 'setKeyManagerOf',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link publicLockV13ABI}__ and `functionName` set to `"setLockMetadata"`.
 */
export function usePublicLockV13SetLockMetadata<TMode extends WriteContractMode = undefined>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<PrepareWriteContractResult<typeof publicLockV13ABI, 'setLockMetadata'>['request']['abi'], 'setLockMetadata', TMode> & {
        functionName?: 'setLockMetadata'
      }
    : UseContractWriteConfig<typeof publicLockV13ABI, 'setLockMetadata', TMode> & {
        abi?: never
        functionName?: 'setLockMetadata'
      } = {} as any
) {
  return useContractWrite<typeof publicLockV13ABI, 'setLockMetadata', TMode>({
    abi: publicLockV13ABI,
    functionName: 'setLockMetadata',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link publicLockV13ABI}__ and `functionName` set to `"setOwner"`.
 */
export function usePublicLockV13SetOwner<TMode extends WriteContractMode = undefined>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<PrepareWriteContractResult<typeof publicLockV13ABI, 'setOwner'>['request']['abi'], 'setOwner', TMode> & {
        functionName?: 'setOwner'
      }
    : UseContractWriteConfig<typeof publicLockV13ABI, 'setOwner', TMode> & {
        abi?: never
        functionName?: 'setOwner'
      } = {} as any
) {
  return useContractWrite<typeof publicLockV13ABI, 'setOwner', TMode>({ abi: publicLockV13ABI, functionName: 'setOwner', ...config } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link publicLockV13ABI}__ and `functionName` set to `"setReferrerFee"`.
 */
export function usePublicLockV13SetReferrerFee<TMode extends WriteContractMode = undefined>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<PrepareWriteContractResult<typeof publicLockV13ABI, 'setReferrerFee'>['request']['abi'], 'setReferrerFee', TMode> & {
        functionName?: 'setReferrerFee'
      }
    : UseContractWriteConfig<typeof publicLockV13ABI, 'setReferrerFee', TMode> & {
        abi?: never
        functionName?: 'setReferrerFee'
      } = {} as any
) {
  return useContractWrite<typeof publicLockV13ABI, 'setReferrerFee', TMode>({
    abi: publicLockV13ABI,
    functionName: 'setReferrerFee',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link publicLockV13ABI}__ and `functionName` set to `"shareKey"`.
 */
export function usePublicLockV13ShareKey<TMode extends WriteContractMode = undefined>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<PrepareWriteContractResult<typeof publicLockV13ABI, 'shareKey'>['request']['abi'], 'shareKey', TMode> & {
        functionName?: 'shareKey'
      }
    : UseContractWriteConfig<typeof publicLockV13ABI, 'shareKey', TMode> & {
        abi?: never
        functionName?: 'shareKey'
      } = {} as any
) {
  return useContractWrite<typeof publicLockV13ABI, 'shareKey', TMode>({ abi: publicLockV13ABI, functionName: 'shareKey', ...config } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link publicLockV13ABI}__ and `functionName` set to `"transferFrom"`.
 */
export function usePublicLockV13TransferFrom<TMode extends WriteContractMode = undefined>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<PrepareWriteContractResult<typeof publicLockV13ABI, 'transferFrom'>['request']['abi'], 'transferFrom', TMode> & {
        functionName?: 'transferFrom'
      }
    : UseContractWriteConfig<typeof publicLockV13ABI, 'transferFrom', TMode> & {
        abi?: never
        functionName?: 'transferFrom'
      } = {} as any
) {
  return useContractWrite<typeof publicLockV13ABI, 'transferFrom', TMode>({ abi: publicLockV13ABI, functionName: 'transferFrom', ...config } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link publicLockV13ABI}__ and `functionName` set to `"unlendKey"`.
 */
export function usePublicLockV13UnlendKey<TMode extends WriteContractMode = undefined>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<PrepareWriteContractResult<typeof publicLockV13ABI, 'unlendKey'>['request']['abi'], 'unlendKey', TMode> & {
        functionName?: 'unlendKey'
      }
    : UseContractWriteConfig<typeof publicLockV13ABI, 'unlendKey', TMode> & {
        abi?: never
        functionName?: 'unlendKey'
      } = {} as any
) {
  return useContractWrite<typeof publicLockV13ABI, 'unlendKey', TMode>({ abi: publicLockV13ABI, functionName: 'unlendKey', ...config } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link publicLockV13ABI}__ and `functionName` set to `"updateKeyPricing"`.
 */
export function usePublicLockV13UpdateKeyPricing<TMode extends WriteContractMode = undefined>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<PrepareWriteContractResult<typeof publicLockV13ABI, 'updateKeyPricing'>['request']['abi'], 'updateKeyPricing', TMode> & {
        functionName?: 'updateKeyPricing'
      }
    : UseContractWriteConfig<typeof publicLockV13ABI, 'updateKeyPricing', TMode> & {
        abi?: never
        functionName?: 'updateKeyPricing'
      } = {} as any
) {
  return useContractWrite<typeof publicLockV13ABI, 'updateKeyPricing', TMode>({
    abi: publicLockV13ABI,
    functionName: 'updateKeyPricing',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link publicLockV13ABI}__ and `functionName` set to `"updateLockConfig"`.
 */
export function usePublicLockV13UpdateLockConfig<TMode extends WriteContractMode = undefined>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<PrepareWriteContractResult<typeof publicLockV13ABI, 'updateLockConfig'>['request']['abi'], 'updateLockConfig', TMode> & {
        functionName?: 'updateLockConfig'
      }
    : UseContractWriteConfig<typeof publicLockV13ABI, 'updateLockConfig', TMode> & {
        abi?: never
        functionName?: 'updateLockConfig'
      } = {} as any
) {
  return useContractWrite<typeof publicLockV13ABI, 'updateLockConfig', TMode>({
    abi: publicLockV13ABI,
    functionName: 'updateLockConfig',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link publicLockV13ABI}__ and `functionName` set to `"updateRefundPenalty"`.
 */
export function usePublicLockV13UpdateRefundPenalty<TMode extends WriteContractMode = undefined>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<typeof publicLockV13ABI, 'updateRefundPenalty'>['request']['abi'],
        'updateRefundPenalty',
        TMode
      > & { functionName?: 'updateRefundPenalty' }
    : UseContractWriteConfig<typeof publicLockV13ABI, 'updateRefundPenalty', TMode> & {
        abi?: never
        functionName?: 'updateRefundPenalty'
      } = {} as any
) {
  return useContractWrite<typeof publicLockV13ABI, 'updateRefundPenalty', TMode>({
    abi: publicLockV13ABI,
    functionName: 'updateRefundPenalty',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link publicLockV13ABI}__ and `functionName` set to `"updateSchemaVersion"`.
 */
export function usePublicLockV13UpdateSchemaVersion<TMode extends WriteContractMode = undefined>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<typeof publicLockV13ABI, 'updateSchemaVersion'>['request']['abi'],
        'updateSchemaVersion',
        TMode
      > & { functionName?: 'updateSchemaVersion' }
    : UseContractWriteConfig<typeof publicLockV13ABI, 'updateSchemaVersion', TMode> & {
        abi?: never
        functionName?: 'updateSchemaVersion'
      } = {} as any
) {
  return useContractWrite<typeof publicLockV13ABI, 'updateSchemaVersion', TMode>({
    abi: publicLockV13ABI,
    functionName: 'updateSchemaVersion',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link publicLockV13ABI}__ and `functionName` set to `"updateTransferFee"`.
 */
export function usePublicLockV13UpdateTransferFee<TMode extends WriteContractMode = undefined>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<typeof publicLockV13ABI, 'updateTransferFee'>['request']['abi'],
        'updateTransferFee',
        TMode
      > & { functionName?: 'updateTransferFee' }
    : UseContractWriteConfig<typeof publicLockV13ABI, 'updateTransferFee', TMode> & {
        abi?: never
        functionName?: 'updateTransferFee'
      } = {} as any
) {
  return useContractWrite<typeof publicLockV13ABI, 'updateTransferFee', TMode>({
    abi: publicLockV13ABI,
    functionName: 'updateTransferFee',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link publicLockV13ABI}__ and `functionName` set to `"withdraw"`.
 */
export function usePublicLockV13Withdraw<TMode extends WriteContractMode = undefined>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<PrepareWriteContractResult<typeof publicLockV13ABI, 'withdraw'>['request']['abi'], 'withdraw', TMode> & {
        functionName?: 'withdraw'
      }
    : UseContractWriteConfig<typeof publicLockV13ABI, 'withdraw', TMode> & {
        abi?: never
        functionName?: 'withdraw'
      } = {} as any
) {
  return useContractWrite<typeof publicLockV13ABI, 'withdraw', TMode>({ abi: publicLockV13ABI, functionName: 'withdraw', ...config } as any)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link publicLockV13ABI}__.
 */
export function usePreparePublicLockV13Write<TFunctionName extends string>(
  config: Omit<UsePrepareContractWriteConfig<typeof publicLockV13ABI, TFunctionName>, 'abi'> = {} as any
) {
  return usePrepareContractWrite({ abi: publicLockV13ABI, ...config } as UsePrepareContractWriteConfig<typeof publicLockV13ABI, TFunctionName>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link publicLockV13ABI}__ and `functionName` set to `"addLockManager"`.
 */
export function usePreparePublicLockV13AddLockManager(
  config: Omit<UsePrepareContractWriteConfig<typeof publicLockV13ABI, 'addLockManager'>, 'abi' | 'functionName'> = {} as any
) {
  return usePrepareContractWrite({ abi: publicLockV13ABI, functionName: 'addLockManager', ...config } as UsePrepareContractWriteConfig<
    typeof publicLockV13ABI,
    'addLockManager'
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link publicLockV13ABI}__ and `functionName` set to `"approve"`.
 */
export function usePreparePublicLockV13Approve(
  config: Omit<UsePrepareContractWriteConfig<typeof publicLockV13ABI, 'approve'>, 'abi' | 'functionName'> = {} as any
) {
  return usePrepareContractWrite({ abi: publicLockV13ABI, functionName: 'approve', ...config } as UsePrepareContractWriteConfig<
    typeof publicLockV13ABI,
    'approve'
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link publicLockV13ABI}__ and `functionName` set to `"burn"`.
 */
export function usePreparePublicLockV13Burn(
  config: Omit<UsePrepareContractWriteConfig<typeof publicLockV13ABI, 'burn'>, 'abi' | 'functionName'> = {} as any
) {
  return usePrepareContractWrite({ abi: publicLockV13ABI, functionName: 'burn', ...config } as UsePrepareContractWriteConfig<
    typeof publicLockV13ABI,
    'burn'
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link publicLockV13ABI}__ and `functionName` set to `"cancelAndRefund"`.
 */
export function usePreparePublicLockV13CancelAndRefund(
  config: Omit<UsePrepareContractWriteConfig<typeof publicLockV13ABI, 'cancelAndRefund'>, 'abi' | 'functionName'> = {} as any
) {
  return usePrepareContractWrite({ abi: publicLockV13ABI, functionName: 'cancelAndRefund', ...config } as UsePrepareContractWriteConfig<
    typeof publicLockV13ABI,
    'cancelAndRefund'
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link publicLockV13ABI}__ and `functionName` set to `"expireAndRefundFor"`.
 */
export function usePreparePublicLockV13ExpireAndRefundFor(
  config: Omit<UsePrepareContractWriteConfig<typeof publicLockV13ABI, 'expireAndRefundFor'>, 'abi' | 'functionName'> = {} as any
) {
  return usePrepareContractWrite({ abi: publicLockV13ABI, functionName: 'expireAndRefundFor', ...config } as UsePrepareContractWriteConfig<
    typeof publicLockV13ABI,
    'expireAndRefundFor'
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link publicLockV13ABI}__ and `functionName` set to `"extend"`.
 */
export function usePreparePublicLockV13Extend(
  config: Omit<UsePrepareContractWriteConfig<typeof publicLockV13ABI, 'extend'>, 'abi' | 'functionName'> = {} as any
) {
  return usePrepareContractWrite({ abi: publicLockV13ABI, functionName: 'extend', ...config } as UsePrepareContractWriteConfig<
    typeof publicLockV13ABI,
    'extend'
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link publicLockV13ABI}__ and `functionName` set to `"grantKeyExtension"`.
 */
export function usePreparePublicLockV13GrantKeyExtension(
  config: Omit<UsePrepareContractWriteConfig<typeof publicLockV13ABI, 'grantKeyExtension'>, 'abi' | 'functionName'> = {} as any
) {
  return usePrepareContractWrite({ abi: publicLockV13ABI, functionName: 'grantKeyExtension', ...config } as UsePrepareContractWriteConfig<
    typeof publicLockV13ABI,
    'grantKeyExtension'
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link publicLockV13ABI}__ and `functionName` set to `"grantKeys"`.
 */
export function usePreparePublicLockV13GrantKeys(
  config: Omit<UsePrepareContractWriteConfig<typeof publicLockV13ABI, 'grantKeys'>, 'abi' | 'functionName'> = {} as any
) {
  return usePrepareContractWrite({ abi: publicLockV13ABI, functionName: 'grantKeys', ...config } as UsePrepareContractWriteConfig<
    typeof publicLockV13ABI,
    'grantKeys'
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link publicLockV13ABI}__ and `functionName` set to `"grantRole"`.
 */
export function usePreparePublicLockV13GrantRole(
  config: Omit<UsePrepareContractWriteConfig<typeof publicLockV13ABI, 'grantRole'>, 'abi' | 'functionName'> = {} as any
) {
  return usePrepareContractWrite({ abi: publicLockV13ABI, functionName: 'grantRole', ...config } as UsePrepareContractWriteConfig<
    typeof publicLockV13ABI,
    'grantRole'
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link publicLockV13ABI}__ and `functionName` set to `"initialize"`.
 */
export function usePreparePublicLockV13Initialize(
  config: Omit<UsePrepareContractWriteConfig<typeof publicLockV13ABI, 'initialize'>, 'abi' | 'functionName'> = {} as any
) {
  return usePrepareContractWrite({ abi: publicLockV13ABI, functionName: 'initialize', ...config } as UsePrepareContractWriteConfig<
    typeof publicLockV13ABI,
    'initialize'
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link publicLockV13ABI}__ and `functionName` set to `"lendKey"`.
 */
export function usePreparePublicLockV13LendKey(
  config: Omit<UsePrepareContractWriteConfig<typeof publicLockV13ABI, 'lendKey'>, 'abi' | 'functionName'> = {} as any
) {
  return usePrepareContractWrite({ abi: publicLockV13ABI, functionName: 'lendKey', ...config } as UsePrepareContractWriteConfig<
    typeof publicLockV13ABI,
    'lendKey'
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link publicLockV13ABI}__ and `functionName` set to `"mergeKeys"`.
 */
export function usePreparePublicLockV13MergeKeys(
  config: Omit<UsePrepareContractWriteConfig<typeof publicLockV13ABI, 'mergeKeys'>, 'abi' | 'functionName'> = {} as any
) {
  return usePrepareContractWrite({ abi: publicLockV13ABI, functionName: 'mergeKeys', ...config } as UsePrepareContractWriteConfig<
    typeof publicLockV13ABI,
    'mergeKeys'
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link publicLockV13ABI}__ and `functionName` set to `"migrate"`.
 */
export function usePreparePublicLockV13Migrate(
  config: Omit<UsePrepareContractWriteConfig<typeof publicLockV13ABI, 'migrate'>, 'abi' | 'functionName'> = {} as any
) {
  return usePrepareContractWrite({ abi: publicLockV13ABI, functionName: 'migrate', ...config } as UsePrepareContractWriteConfig<
    typeof publicLockV13ABI,
    'migrate'
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link publicLockV13ABI}__ and `functionName` set to `"purchase"`.
 */
export function usePreparePublicLockV13Purchase(
  config: Omit<UsePrepareContractWriteConfig<typeof publicLockV13ABI, 'purchase'>, 'abi' | 'functionName'> = {} as any
) {
  return usePrepareContractWrite({ abi: publicLockV13ABI, functionName: 'purchase', ...config } as UsePrepareContractWriteConfig<
    typeof publicLockV13ABI,
    'purchase'
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link publicLockV13ABI}__ and `functionName` set to `"renewMembershipFor"`.
 */
export function usePreparePublicLockV13RenewMembershipFor(
  config: Omit<UsePrepareContractWriteConfig<typeof publicLockV13ABI, 'renewMembershipFor'>, 'abi' | 'functionName'> = {} as any
) {
  return usePrepareContractWrite({ abi: publicLockV13ABI, functionName: 'renewMembershipFor', ...config } as UsePrepareContractWriteConfig<
    typeof publicLockV13ABI,
    'renewMembershipFor'
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link publicLockV13ABI}__ and `functionName` set to `"renounceLockManager"`.
 */
export function usePreparePublicLockV13RenounceLockManager(
  config: Omit<UsePrepareContractWriteConfig<typeof publicLockV13ABI, 'renounceLockManager'>, 'abi' | 'functionName'> = {} as any
) {
  return usePrepareContractWrite({ abi: publicLockV13ABI, functionName: 'renounceLockManager', ...config } as UsePrepareContractWriteConfig<
    typeof publicLockV13ABI,
    'renounceLockManager'
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link publicLockV13ABI}__ and `functionName` set to `"renounceRole"`.
 */
export function usePreparePublicLockV13RenounceRole(
  config: Omit<UsePrepareContractWriteConfig<typeof publicLockV13ABI, 'renounceRole'>, 'abi' | 'functionName'> = {} as any
) {
  return usePrepareContractWrite({ abi: publicLockV13ABI, functionName: 'renounceRole', ...config } as UsePrepareContractWriteConfig<
    typeof publicLockV13ABI,
    'renounceRole'
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link publicLockV13ABI}__ and `functionName` set to `"revokeRole"`.
 */
export function usePreparePublicLockV13RevokeRole(
  config: Omit<UsePrepareContractWriteConfig<typeof publicLockV13ABI, 'revokeRole'>, 'abi' | 'functionName'> = {} as any
) {
  return usePrepareContractWrite({ abi: publicLockV13ABI, functionName: 'revokeRole', ...config } as UsePrepareContractWriteConfig<
    typeof publicLockV13ABI,
    'revokeRole'
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link publicLockV13ABI}__ and `functionName` set to `"safeTransferFrom"`.
 */
export function usePreparePublicLockV13SafeTransferFrom(
  config: Omit<UsePrepareContractWriteConfig<typeof publicLockV13ABI, 'safeTransferFrom'>, 'abi' | 'functionName'> = {} as any
) {
  return usePrepareContractWrite({ abi: publicLockV13ABI, functionName: 'safeTransferFrom', ...config } as UsePrepareContractWriteConfig<
    typeof publicLockV13ABI,
    'safeTransferFrom'
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link publicLockV13ABI}__ and `functionName` set to `"setApprovalForAll"`.
 */
export function usePreparePublicLockV13SetApprovalForAll(
  config: Omit<UsePrepareContractWriteConfig<typeof publicLockV13ABI, 'setApprovalForAll'>, 'abi' | 'functionName'> = {} as any
) {
  return usePrepareContractWrite({ abi: publicLockV13ABI, functionName: 'setApprovalForAll', ...config } as UsePrepareContractWriteConfig<
    typeof publicLockV13ABI,
    'setApprovalForAll'
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link publicLockV13ABI}__ and `functionName` set to `"setEventHooks"`.
 */
export function usePreparePublicLockV13SetEventHooks(
  config: Omit<UsePrepareContractWriteConfig<typeof publicLockV13ABI, 'setEventHooks'>, 'abi' | 'functionName'> = {} as any
) {
  return usePrepareContractWrite({ abi: publicLockV13ABI, functionName: 'setEventHooks', ...config } as UsePrepareContractWriteConfig<
    typeof publicLockV13ABI,
    'setEventHooks'
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link publicLockV13ABI}__ and `functionName` set to `"setGasRefundValue"`.
 */
export function usePreparePublicLockV13SetGasRefundValue(
  config: Omit<UsePrepareContractWriteConfig<typeof publicLockV13ABI, 'setGasRefundValue'>, 'abi' | 'functionName'> = {} as any
) {
  return usePrepareContractWrite({ abi: publicLockV13ABI, functionName: 'setGasRefundValue', ...config } as UsePrepareContractWriteConfig<
    typeof publicLockV13ABI,
    'setGasRefundValue'
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link publicLockV13ABI}__ and `functionName` set to `"setKeyManagerOf"`.
 */
export function usePreparePublicLockV13SetKeyManagerOf(
  config: Omit<UsePrepareContractWriteConfig<typeof publicLockV13ABI, 'setKeyManagerOf'>, 'abi' | 'functionName'> = {} as any
) {
  return usePrepareContractWrite({ abi: publicLockV13ABI, functionName: 'setKeyManagerOf', ...config } as UsePrepareContractWriteConfig<
    typeof publicLockV13ABI,
    'setKeyManagerOf'
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link publicLockV13ABI}__ and `functionName` set to `"setLockMetadata"`.
 */
export function usePreparePublicLockV13SetLockMetadata(
  config: Omit<UsePrepareContractWriteConfig<typeof publicLockV13ABI, 'setLockMetadata'>, 'abi' | 'functionName'> = {} as any
) {
  return usePrepareContractWrite({ abi: publicLockV13ABI, functionName: 'setLockMetadata', ...config } as UsePrepareContractWriteConfig<
    typeof publicLockV13ABI,
    'setLockMetadata'
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link publicLockV13ABI}__ and `functionName` set to `"setOwner"`.
 */
export function usePreparePublicLockV13SetOwner(
  config: Omit<UsePrepareContractWriteConfig<typeof publicLockV13ABI, 'setOwner'>, 'abi' | 'functionName'> = {} as any
) {
  return usePrepareContractWrite({ abi: publicLockV13ABI, functionName: 'setOwner', ...config } as UsePrepareContractWriteConfig<
    typeof publicLockV13ABI,
    'setOwner'
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link publicLockV13ABI}__ and `functionName` set to `"setReferrerFee"`.
 */
export function usePreparePublicLockV13SetReferrerFee(
  config: Omit<UsePrepareContractWriteConfig<typeof publicLockV13ABI, 'setReferrerFee'>, 'abi' | 'functionName'> = {} as any
) {
  return usePrepareContractWrite({ abi: publicLockV13ABI, functionName: 'setReferrerFee', ...config } as UsePrepareContractWriteConfig<
    typeof publicLockV13ABI,
    'setReferrerFee'
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link publicLockV13ABI}__ and `functionName` set to `"shareKey"`.
 */
export function usePreparePublicLockV13ShareKey(
  config: Omit<UsePrepareContractWriteConfig<typeof publicLockV13ABI, 'shareKey'>, 'abi' | 'functionName'> = {} as any
) {
  return usePrepareContractWrite({ abi: publicLockV13ABI, functionName: 'shareKey', ...config } as UsePrepareContractWriteConfig<
    typeof publicLockV13ABI,
    'shareKey'
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link publicLockV13ABI}__ and `functionName` set to `"transferFrom"`.
 */
export function usePreparePublicLockV13TransferFrom(
  config: Omit<UsePrepareContractWriteConfig<typeof publicLockV13ABI, 'transferFrom'>, 'abi' | 'functionName'> = {} as any
) {
  return usePrepareContractWrite({ abi: publicLockV13ABI, functionName: 'transferFrom', ...config } as UsePrepareContractWriteConfig<
    typeof publicLockV13ABI,
    'transferFrom'
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link publicLockV13ABI}__ and `functionName` set to `"unlendKey"`.
 */
export function usePreparePublicLockV13UnlendKey(
  config: Omit<UsePrepareContractWriteConfig<typeof publicLockV13ABI, 'unlendKey'>, 'abi' | 'functionName'> = {} as any
) {
  return usePrepareContractWrite({ abi: publicLockV13ABI, functionName: 'unlendKey', ...config } as UsePrepareContractWriteConfig<
    typeof publicLockV13ABI,
    'unlendKey'
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link publicLockV13ABI}__ and `functionName` set to `"updateKeyPricing"`.
 */
export function usePreparePublicLockV13UpdateKeyPricing(
  config: Omit<UsePrepareContractWriteConfig<typeof publicLockV13ABI, 'updateKeyPricing'>, 'abi' | 'functionName'> = {} as any
) {
  return usePrepareContractWrite({ abi: publicLockV13ABI, functionName: 'updateKeyPricing', ...config } as UsePrepareContractWriteConfig<
    typeof publicLockV13ABI,
    'updateKeyPricing'
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link publicLockV13ABI}__ and `functionName` set to `"updateLockConfig"`.
 */
export function usePreparePublicLockV13UpdateLockConfig(
  config: Omit<UsePrepareContractWriteConfig<typeof publicLockV13ABI, 'updateLockConfig'>, 'abi' | 'functionName'> = {} as any
) {
  return usePrepareContractWrite({ abi: publicLockV13ABI, functionName: 'updateLockConfig', ...config } as UsePrepareContractWriteConfig<
    typeof publicLockV13ABI,
    'updateLockConfig'
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link publicLockV13ABI}__ and `functionName` set to `"updateRefundPenalty"`.
 */
export function usePreparePublicLockV13UpdateRefundPenalty(
  config: Omit<UsePrepareContractWriteConfig<typeof publicLockV13ABI, 'updateRefundPenalty'>, 'abi' | 'functionName'> = {} as any
) {
  return usePrepareContractWrite({ abi: publicLockV13ABI, functionName: 'updateRefundPenalty', ...config } as UsePrepareContractWriteConfig<
    typeof publicLockV13ABI,
    'updateRefundPenalty'
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link publicLockV13ABI}__ and `functionName` set to `"updateSchemaVersion"`.
 */
export function usePreparePublicLockV13UpdateSchemaVersion(
  config: Omit<UsePrepareContractWriteConfig<typeof publicLockV13ABI, 'updateSchemaVersion'>, 'abi' | 'functionName'> = {} as any
) {
  return usePrepareContractWrite({ abi: publicLockV13ABI, functionName: 'updateSchemaVersion', ...config } as UsePrepareContractWriteConfig<
    typeof publicLockV13ABI,
    'updateSchemaVersion'
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link publicLockV13ABI}__ and `functionName` set to `"updateTransferFee"`.
 */
export function usePreparePublicLockV13UpdateTransferFee(
  config: Omit<UsePrepareContractWriteConfig<typeof publicLockV13ABI, 'updateTransferFee'>, 'abi' | 'functionName'> = {} as any
) {
  return usePrepareContractWrite({ abi: publicLockV13ABI, functionName: 'updateTransferFee', ...config } as UsePrepareContractWriteConfig<
    typeof publicLockV13ABI,
    'updateTransferFee'
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link publicLockV13ABI}__ and `functionName` set to `"withdraw"`.
 */
export function usePreparePublicLockV13Withdraw(
  config: Omit<UsePrepareContractWriteConfig<typeof publicLockV13ABI, 'withdraw'>, 'abi' | 'functionName'> = {} as any
) {
  return usePrepareContractWrite({ abi: publicLockV13ABI, functionName: 'withdraw', ...config } as UsePrepareContractWriteConfig<
    typeof publicLockV13ABI,
    'withdraw'
  >)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link publicLockV13ABI}__.
 */
export function usePublicLockV13Event<TEventName extends string>(
  config: Omit<UseContractEventConfig<typeof publicLockV13ABI, TEventName>, 'abi'> = {} as any
) {
  return useContractEvent({ abi: publicLockV13ABI, ...config } as UseContractEventConfig<typeof publicLockV13ABI, TEventName>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link publicLockV13ABI}__ and `eventName` set to `"Approval"`.
 */
export function usePublicLockV13ApprovalEvent(
  config: Omit<UseContractEventConfig<typeof publicLockV13ABI, 'Approval'>, 'abi' | 'eventName'> = {} as any
) {
  return useContractEvent({ abi: publicLockV13ABI, eventName: 'Approval', ...config } as UseContractEventConfig<typeof publicLockV13ABI, 'Approval'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link publicLockV13ABI}__ and `eventName` set to `"ApprovalForAll"`.
 */
export function usePublicLockV13ApprovalForAllEvent(
  config: Omit<UseContractEventConfig<typeof publicLockV13ABI, 'ApprovalForAll'>, 'abi' | 'eventName'> = {} as any
) {
  return useContractEvent({ abi: publicLockV13ABI, eventName: 'ApprovalForAll', ...config } as UseContractEventConfig<
    typeof publicLockV13ABI,
    'ApprovalForAll'
  >)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link publicLockV13ABI}__ and `eventName` set to `"CancelKey"`.
 */
export function usePublicLockV13CancelKeyEvent(
  config: Omit<UseContractEventConfig<typeof publicLockV13ABI, 'CancelKey'>, 'abi' | 'eventName'> = {} as any
) {
  return useContractEvent({ abi: publicLockV13ABI, eventName: 'CancelKey', ...config } as UseContractEventConfig<
    typeof publicLockV13ABI,
    'CancelKey'
  >)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link publicLockV13ABI}__ and `eventName` set to `"EventHooksUpdated"`.
 */
export function usePublicLockV13EventHooksUpdatedEvent(
  config: Omit<UseContractEventConfig<typeof publicLockV13ABI, 'EventHooksUpdated'>, 'abi' | 'eventName'> = {} as any
) {
  return useContractEvent({ abi: publicLockV13ABI, eventName: 'EventHooksUpdated', ...config } as UseContractEventConfig<
    typeof publicLockV13ABI,
    'EventHooksUpdated'
  >)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link publicLockV13ABI}__ and `eventName` set to `"ExpirationChanged"`.
 */
export function usePublicLockV13ExpirationChangedEvent(
  config: Omit<UseContractEventConfig<typeof publicLockV13ABI, 'ExpirationChanged'>, 'abi' | 'eventName'> = {} as any
) {
  return useContractEvent({ abi: publicLockV13ABI, eventName: 'ExpirationChanged', ...config } as UseContractEventConfig<
    typeof publicLockV13ABI,
    'ExpirationChanged'
  >)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link publicLockV13ABI}__ and `eventName` set to `"ExpireKey"`.
 */
export function usePublicLockV13ExpireKeyEvent(
  config: Omit<UseContractEventConfig<typeof publicLockV13ABI, 'ExpireKey'>, 'abi' | 'eventName'> = {} as any
) {
  return useContractEvent({ abi: publicLockV13ABI, eventName: 'ExpireKey', ...config } as UseContractEventConfig<
    typeof publicLockV13ABI,
    'ExpireKey'
  >)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link publicLockV13ABI}__ and `eventName` set to `"GasRefundValueChanged"`.
 */
export function usePublicLockV13GasRefundValueChangedEvent(
  config: Omit<UseContractEventConfig<typeof publicLockV13ABI, 'GasRefundValueChanged'>, 'abi' | 'eventName'> = {} as any
) {
  return useContractEvent({ abi: publicLockV13ABI, eventName: 'GasRefundValueChanged', ...config } as UseContractEventConfig<
    typeof publicLockV13ABI,
    'GasRefundValueChanged'
  >)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link publicLockV13ABI}__ and `eventName` set to `"GasRefunded"`.
 */
export function usePublicLockV13GasRefundedEvent(
  config: Omit<UseContractEventConfig<typeof publicLockV13ABI, 'GasRefunded'>, 'abi' | 'eventName'> = {} as any
) {
  return useContractEvent({ abi: publicLockV13ABI, eventName: 'GasRefunded', ...config } as UseContractEventConfig<
    typeof publicLockV13ABI,
    'GasRefunded'
  >)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link publicLockV13ABI}__ and `eventName` set to `"Initialized"`.
 */
export function usePublicLockV13InitializedEvent(
  config: Omit<UseContractEventConfig<typeof publicLockV13ABI, 'Initialized'>, 'abi' | 'eventName'> = {} as any
) {
  return useContractEvent({ abi: publicLockV13ABI, eventName: 'Initialized', ...config } as UseContractEventConfig<
    typeof publicLockV13ABI,
    'Initialized'
  >)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link publicLockV13ABI}__ and `eventName` set to `"KeyExtended"`.
 */
export function usePublicLockV13KeyExtendedEvent(
  config: Omit<UseContractEventConfig<typeof publicLockV13ABI, 'KeyExtended'>, 'abi' | 'eventName'> = {} as any
) {
  return useContractEvent({ abi: publicLockV13ABI, eventName: 'KeyExtended', ...config } as UseContractEventConfig<
    typeof publicLockV13ABI,
    'KeyExtended'
  >)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link publicLockV13ABI}__ and `eventName` set to `"KeyGranterAdded"`.
 */
export function usePublicLockV13KeyGranterAddedEvent(
  config: Omit<UseContractEventConfig<typeof publicLockV13ABI, 'KeyGranterAdded'>, 'abi' | 'eventName'> = {} as any
) {
  return useContractEvent({ abi: publicLockV13ABI, eventName: 'KeyGranterAdded', ...config } as UseContractEventConfig<
    typeof publicLockV13ABI,
    'KeyGranterAdded'
  >)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link publicLockV13ABI}__ and `eventName` set to `"KeyGranterRemoved"`.
 */
export function usePublicLockV13KeyGranterRemovedEvent(
  config: Omit<UseContractEventConfig<typeof publicLockV13ABI, 'KeyGranterRemoved'>, 'abi' | 'eventName'> = {} as any
) {
  return useContractEvent({ abi: publicLockV13ABI, eventName: 'KeyGranterRemoved', ...config } as UseContractEventConfig<
    typeof publicLockV13ABI,
    'KeyGranterRemoved'
  >)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link publicLockV13ABI}__ and `eventName` set to `"KeyManagerChanged"`.
 */
export function usePublicLockV13KeyManagerChangedEvent(
  config: Omit<UseContractEventConfig<typeof publicLockV13ABI, 'KeyManagerChanged'>, 'abi' | 'eventName'> = {} as any
) {
  return useContractEvent({ abi: publicLockV13ABI, eventName: 'KeyManagerChanged', ...config } as UseContractEventConfig<
    typeof publicLockV13ABI,
    'KeyManagerChanged'
  >)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link publicLockV13ABI}__ and `eventName` set to `"KeysMigrated"`.
 */
export function usePublicLockV13KeysMigratedEvent(
  config: Omit<UseContractEventConfig<typeof publicLockV13ABI, 'KeysMigrated'>, 'abi' | 'eventName'> = {} as any
) {
  return useContractEvent({ abi: publicLockV13ABI, eventName: 'KeysMigrated', ...config } as UseContractEventConfig<
    typeof publicLockV13ABI,
    'KeysMigrated'
  >)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link publicLockV13ABI}__ and `eventName` set to `"LockConfig"`.
 */
export function usePublicLockV13LockConfigEvent(
  config: Omit<UseContractEventConfig<typeof publicLockV13ABI, 'LockConfig'>, 'abi' | 'eventName'> = {} as any
) {
  return useContractEvent({ abi: publicLockV13ABI, eventName: 'LockConfig', ...config } as UseContractEventConfig<
    typeof publicLockV13ABI,
    'LockConfig'
  >)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link publicLockV13ABI}__ and `eventName` set to `"LockManagerAdded"`.
 */
export function usePublicLockV13LockManagerAddedEvent(
  config: Omit<UseContractEventConfig<typeof publicLockV13ABI, 'LockManagerAdded'>, 'abi' | 'eventName'> = {} as any
) {
  return useContractEvent({ abi: publicLockV13ABI, eventName: 'LockManagerAdded', ...config } as UseContractEventConfig<
    typeof publicLockV13ABI,
    'LockManagerAdded'
  >)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link publicLockV13ABI}__ and `eventName` set to `"LockManagerRemoved"`.
 */
export function usePublicLockV13LockManagerRemovedEvent(
  config: Omit<UseContractEventConfig<typeof publicLockV13ABI, 'LockManagerRemoved'>, 'abi' | 'eventName'> = {} as any
) {
  return useContractEvent({ abi: publicLockV13ABI, eventName: 'LockManagerRemoved', ...config } as UseContractEventConfig<
    typeof publicLockV13ABI,
    'LockManagerRemoved'
  >)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link publicLockV13ABI}__ and `eventName` set to `"LockMetadata"`.
 */
export function usePublicLockV13LockMetadataEvent(
  config: Omit<UseContractEventConfig<typeof publicLockV13ABI, 'LockMetadata'>, 'abi' | 'eventName'> = {} as any
) {
  return useContractEvent({ abi: publicLockV13ABI, eventName: 'LockMetadata', ...config } as UseContractEventConfig<
    typeof publicLockV13ABI,
    'LockMetadata'
  >)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link publicLockV13ABI}__ and `eventName` set to `"OwnershipTransferred"`.
 */
export function usePublicLockV13OwnershipTransferredEvent(
  config: Omit<UseContractEventConfig<typeof publicLockV13ABI, 'OwnershipTransferred'>, 'abi' | 'eventName'> = {} as any
) {
  return useContractEvent({ abi: publicLockV13ABI, eventName: 'OwnershipTransferred', ...config } as UseContractEventConfig<
    typeof publicLockV13ABI,
    'OwnershipTransferred'
  >)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link publicLockV13ABI}__ and `eventName` set to `"PricingChanged"`.
 */
export function usePublicLockV13PricingChangedEvent(
  config: Omit<UseContractEventConfig<typeof publicLockV13ABI, 'PricingChanged'>, 'abi' | 'eventName'> = {} as any
) {
  return useContractEvent({ abi: publicLockV13ABI, eventName: 'PricingChanged', ...config } as UseContractEventConfig<
    typeof publicLockV13ABI,
    'PricingChanged'
  >)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link publicLockV13ABI}__ and `eventName` set to `"ReferrerFee"`.
 */
export function usePublicLockV13ReferrerFeeEvent(
  config: Omit<UseContractEventConfig<typeof publicLockV13ABI, 'ReferrerFee'>, 'abi' | 'eventName'> = {} as any
) {
  return useContractEvent({ abi: publicLockV13ABI, eventName: 'ReferrerFee', ...config } as UseContractEventConfig<
    typeof publicLockV13ABI,
    'ReferrerFee'
  >)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link publicLockV13ABI}__ and `eventName` set to `"RefundPenaltyChanged"`.
 */
export function usePublicLockV13RefundPenaltyChangedEvent(
  config: Omit<UseContractEventConfig<typeof publicLockV13ABI, 'RefundPenaltyChanged'>, 'abi' | 'eventName'> = {} as any
) {
  return useContractEvent({ abi: publicLockV13ABI, eventName: 'RefundPenaltyChanged', ...config } as UseContractEventConfig<
    typeof publicLockV13ABI,
    'RefundPenaltyChanged'
  >)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link publicLockV13ABI}__ and `eventName` set to `"RoleAdminChanged"`.
 */
export function usePublicLockV13RoleAdminChangedEvent(
  config: Omit<UseContractEventConfig<typeof publicLockV13ABI, 'RoleAdminChanged'>, 'abi' | 'eventName'> = {} as any
) {
  return useContractEvent({ abi: publicLockV13ABI, eventName: 'RoleAdminChanged', ...config } as UseContractEventConfig<
    typeof publicLockV13ABI,
    'RoleAdminChanged'
  >)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link publicLockV13ABI}__ and `eventName` set to `"RoleGranted"`.
 */
export function usePublicLockV13RoleGrantedEvent(
  config: Omit<UseContractEventConfig<typeof publicLockV13ABI, 'RoleGranted'>, 'abi' | 'eventName'> = {} as any
) {
  return useContractEvent({ abi: publicLockV13ABI, eventName: 'RoleGranted', ...config } as UseContractEventConfig<
    typeof publicLockV13ABI,
    'RoleGranted'
  >)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link publicLockV13ABI}__ and `eventName` set to `"RoleRevoked"`.
 */
export function usePublicLockV13RoleRevokedEvent(
  config: Omit<UseContractEventConfig<typeof publicLockV13ABI, 'RoleRevoked'>, 'abi' | 'eventName'> = {} as any
) {
  return useContractEvent({ abi: publicLockV13ABI, eventName: 'RoleRevoked', ...config } as UseContractEventConfig<
    typeof publicLockV13ABI,
    'RoleRevoked'
  >)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link publicLockV13ABI}__ and `eventName` set to `"Transfer"`.
 */
export function usePublicLockV13TransferEvent(
  config: Omit<UseContractEventConfig<typeof publicLockV13ABI, 'Transfer'>, 'abi' | 'eventName'> = {} as any
) {
  return useContractEvent({ abi: publicLockV13ABI, eventName: 'Transfer', ...config } as UseContractEventConfig<typeof publicLockV13ABI, 'Transfer'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link publicLockV13ABI}__ and `eventName` set to `"TransferFeeChanged"`.
 */
export function usePublicLockV13TransferFeeChangedEvent(
  config: Omit<UseContractEventConfig<typeof publicLockV13ABI, 'TransferFeeChanged'>, 'abi' | 'eventName'> = {} as any
) {
  return useContractEvent({ abi: publicLockV13ABI, eventName: 'TransferFeeChanged', ...config } as UseContractEventConfig<
    typeof publicLockV13ABI,
    'TransferFeeChanged'
  >)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link publicLockV13ABI}__ and `eventName` set to `"UnlockCallFailed"`.
 */
export function usePublicLockV13UnlockCallFailedEvent(
  config: Omit<UseContractEventConfig<typeof publicLockV13ABI, 'UnlockCallFailed'>, 'abi' | 'eventName'> = {} as any
) {
  return useContractEvent({ abi: publicLockV13ABI, eventName: 'UnlockCallFailed', ...config } as UseContractEventConfig<
    typeof publicLockV13ABI,
    'UnlockCallFailed'
  >)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link publicLockV13ABI}__ and `eventName` set to `"Withdrawal"`.
 */
export function usePublicLockV13WithdrawalEvent(
  config: Omit<UseContractEventConfig<typeof publicLockV13ABI, 'Withdrawal'>, 'abi' | 'eventName'> = {} as any
) {
  return useContractEvent({ abi: publicLockV13ABI, eventName: 'Withdrawal', ...config } as UseContractEventConfig<
    typeof publicLockV13ABI,
    'Withdrawal'
  >)
}
