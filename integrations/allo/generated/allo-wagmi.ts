// Generated by @wagmi/cli@1.1.0 on 8/14/2023 at 8:22:21 PM
import {
  useContractRead,
  UseContractReadConfig,
  useContractWrite,
  UseContractWriteConfig,
  usePrepareContractWrite,
  UsePrepareContractWriteConfig,
  useContractEvent,
  UseContractEventConfig,
} from 'wagmi'
import { ReadContractResult, WriteContractMode, PrepareWriteContractResult } from 'wagmi/actions'

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// allo
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

export const alloABI = [
  { type: 'error', inputs: [], name: 'AMOUNT_MISMATCH' },
  { type: 'error', inputs: [], name: 'INVALID_FEE' },
  { type: 'error', inputs: [], name: 'IS_APPROVED_STRATEGY' },
  { type: 'error', inputs: [], name: 'MISMATCH' },
  { type: 'error', inputs: [], name: 'NOT_APPROVED_STRATEGY' },
  { type: 'error', inputs: [], name: 'NOT_CONTRACT' },
  { type: 'error', inputs: [], name: 'NOT_ENOUGH_FUNDS' },
  { type: 'error', inputs: [], name: 'NewOwnerIsZeroAddress' },
  { type: 'error', inputs: [], name: 'NoHandoverRequest' },
  { type: 'error', inputs: [], name: 'UNAUTHORIZED' },
  { type: 'error', inputs: [], name: 'Unauthorized' },
  { type: 'error', inputs: [], name: 'ZERO_ADDRESS' },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'poolId', internalType: 'uint256', type: 'uint256', indexed: true },
      { name: 'amount', internalType: 'uint256', type: 'uint256', indexed: false },
    ],
    name: 'BaseFeePaid',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [{ name: 'baseFee', internalType: 'uint256', type: 'uint256', indexed: false }],
    name: 'BaseFeeUpdated',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [{ name: 'feePercentage', internalType: 'uint256', type: 'uint256', indexed: false }],
    name: 'FeePercentageUpdated',
  },
  { type: 'event', anonymous: false, inputs: [{ name: 'version', internalType: 'uint8', type: 'uint8', indexed: false }], name: 'Initialized' },
  {
    type: 'event',
    anonymous: false,
    inputs: [{ name: 'pendingOwner', internalType: 'address', type: 'address', indexed: true }],
    name: 'OwnershipHandoverCanceled',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [{ name: 'pendingOwner', internalType: 'address', type: 'address', indexed: true }],
    name: 'OwnershipHandoverRequested',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'oldOwner', internalType: 'address', type: 'address', indexed: true },
      { name: 'newOwner', internalType: 'address', type: 'address', indexed: true },
    ],
    name: 'OwnershipTransferred',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'poolId', internalType: 'uint256', type: 'uint256', indexed: true },
      { name: 'profileId', internalType: 'bytes32', type: 'bytes32', indexed: true },
      { name: 'strategy', internalType: 'contract IStrategy', type: 'address', indexed: false },
      { name: 'token', internalType: 'address', type: 'address', indexed: false },
      { name: 'amount', internalType: 'uint256', type: 'uint256', indexed: false },
      {
        name: 'metadata',
        internalType: 'struct Metadata',
        type: 'tuple',
        components: [
          { name: 'protocol', internalType: 'uint256', type: 'uint256' },
          { name: 'pointer', internalType: 'string', type: 'string' },
        ],
        indexed: false,
      },
    ],
    name: 'PoolCreated',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'poolId', internalType: 'uint256', type: 'uint256', indexed: true },
      { name: 'amount', internalType: 'uint256', type: 'uint256', indexed: false },
      { name: 'fee', internalType: 'uint256', type: 'uint256', indexed: false },
    ],
    name: 'PoolFunded',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'poolId', internalType: 'uint256', type: 'uint256', indexed: true },
      {
        name: 'metadata',
        internalType: 'struct Metadata',
        type: 'tuple',
        components: [
          { name: 'protocol', internalType: 'uint256', type: 'uint256' },
          { name: 'pointer', internalType: 'string', type: 'string' },
        ],
        indexed: false,
      },
    ],
    name: 'PoolMetadataUpdated',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [{ name: 'registry', internalType: 'address', type: 'address', indexed: false }],
    name: 'RegistryUpdated',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'role', internalType: 'bytes32', type: 'bytes32', indexed: true },
      { name: 'previousAdminRole', internalType: 'bytes32', type: 'bytes32', indexed: true },
      { name: 'newAdminRole', internalType: 'bytes32', type: 'bytes32', indexed: true },
    ],
    name: 'RoleAdminChanged',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'role', internalType: 'bytes32', type: 'bytes32', indexed: true },
      { name: 'account', internalType: 'address', type: 'address', indexed: true },
      { name: 'sender', internalType: 'address', type: 'address', indexed: true },
    ],
    name: 'RoleGranted',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'role', internalType: 'bytes32', type: 'bytes32', indexed: true },
      { name: 'account', internalType: 'address', type: 'address', indexed: true },
      { name: 'sender', internalType: 'address', type: 'address', indexed: true },
    ],
    name: 'RoleRevoked',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [{ name: 'strategy', internalType: 'address', type: 'address', indexed: false }],
    name: 'StrategyApproved',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [{ name: 'strategy', internalType: 'address', type: 'address', indexed: false }],
    name: 'StrategyRemoved',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [{ name: 'treasury', internalType: 'address', type: 'address', indexed: false }],
    name: 'TreasuryUpdated',
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'DEFAULT_ADMIN_ROLE',
    outputs: [{ name: '', internalType: 'bytes32', type: 'bytes32' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'FEE_DENOMINATOR',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  { stateMutability: 'view', type: 'function', inputs: [], name: 'NATIVE', outputs: [{ name: '', internalType: 'address', type: 'address' }] },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: '_poolId', internalType: 'uint256', type: 'uint256' },
      { name: '_manager', internalType: 'address', type: 'address' },
    ],
    name: 'addPoolManager',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: '_strategy', internalType: 'address', type: 'address' }],
    name: 'addToCloneableStrategies',
    outputs: [],
  },
  {
    stateMutability: 'payable',
    type: 'function',
    inputs: [
      { name: '_poolId', internalType: 'uint256', type: 'uint256' },
      { name: '_data', internalType: 'bytes', type: 'bytes' },
    ],
    name: 'allocate',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: '_poolIds', internalType: 'uint256[]', type: 'uint256[]' },
      { name: '_datas', internalType: 'bytes[]', type: 'bytes[]' },
    ],
    name: 'batchAllocate',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: '_poolIds', internalType: 'uint256[]', type: 'uint256[]' },
      { name: '_data', internalType: 'bytes[]', type: 'bytes[]' },
    ],
    name: 'batchRegisterRecipient',
    outputs: [{ name: '', internalType: 'address[]', type: 'address[]' }],
  },
  { stateMutability: 'payable', type: 'function', inputs: [], name: 'cancelOwnershipHandover', outputs: [] },
  {
    stateMutability: 'payable',
    type: 'function',
    inputs: [{ name: 'pendingOwner', internalType: 'address', type: 'address' }],
    name: 'completeOwnershipHandover',
    outputs: [],
  },
  {
    stateMutability: 'payable',
    type: 'function',
    inputs: [
      { name: '_profileId', internalType: 'bytes32', type: 'bytes32' },
      { name: '_strategy', internalType: 'address', type: 'address' },
      { name: '_initStrategyData', internalType: 'bytes', type: 'bytes' },
      { name: '_token', internalType: 'address', type: 'address' },
      { name: '_amount', internalType: 'uint256', type: 'uint256' },
      {
        name: '_metadata',
        internalType: 'struct Metadata',
        type: 'tuple',
        components: [
          { name: 'protocol', internalType: 'uint256', type: 'uint256' },
          { name: 'pointer', internalType: 'string', type: 'string' },
        ],
      },
      { name: '_managers', internalType: 'address[]', type: 'address[]' },
    ],
    name: 'createPool',
    outputs: [{ name: 'poolId', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'payable',
    type: 'function',
    inputs: [
      { name: '_profileId', internalType: 'bytes32', type: 'bytes32' },
      { name: '_strategy', internalType: 'address', type: 'address' },
      { name: '_initStrategyData', internalType: 'bytes', type: 'bytes' },
      { name: '_token', internalType: 'address', type: 'address' },
      { name: '_amount', internalType: 'uint256', type: 'uint256' },
      {
        name: '_metadata',
        internalType: 'struct Metadata',
        type: 'tuple',
        components: [
          { name: 'protocol', internalType: 'uint256', type: 'uint256' },
          { name: 'pointer', internalType: 'string', type: 'string' },
        ],
      },
      { name: '_managers', internalType: 'address[]', type: 'address[]' },
    ],
    name: 'createPoolWithCustomStrategy',
    outputs: [{ name: 'poolId', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: '_poolId', internalType: 'uint256', type: 'uint256' },
      { name: '_recipientIds', internalType: 'address[]', type: 'address[]' },
      { name: '_data', internalType: 'bytes', type: 'bytes' },
    ],
    name: 'distribute',
    outputs: [],
  },
  {
    stateMutability: 'payable',
    type: 'function',
    inputs: [
      { name: '_poolId', internalType: 'uint256', type: 'uint256' },
      { name: '_amount', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'fundPool',
    outputs: [],
  },
  { stateMutability: 'view', type: 'function', inputs: [], name: 'getBaseFee', outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }] },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'getFeePercentage',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: '_poolId', internalType: 'uint256', type: 'uint256' }],
    name: 'getPool',
    outputs: [
      {
        name: '',
        internalType: 'struct IAllo.Pool',
        type: 'tuple',
        components: [
          { name: 'profileId', internalType: 'bytes32', type: 'bytes32' },
          { name: 'strategy', internalType: 'contract IStrategy', type: 'address' },
          { name: 'token', internalType: 'address', type: 'address' },
          {
            name: 'metadata',
            internalType: 'struct Metadata',
            type: 'tuple',
            components: [
              { name: 'protocol', internalType: 'uint256', type: 'uint256' },
              { name: 'pointer', internalType: 'string', type: 'string' },
            ],
          },
          { name: 'managerRole', internalType: 'bytes32', type: 'bytes32' },
          { name: 'adminRole', internalType: 'bytes32', type: 'bytes32' },
        ],
      },
    ],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'getRegistry',
    outputs: [{ name: '', internalType: 'contract IRegistry', type: 'address' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'role', internalType: 'bytes32', type: 'bytes32' }],
    name: 'getRoleAdmin',
    outputs: [{ name: '', internalType: 'bytes32', type: 'bytes32' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: '_poolId', internalType: 'uint256', type: 'uint256' }],
    name: 'getStrategy',
    outputs: [{ name: '', internalType: 'address', type: 'address' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'getTreasury',
    outputs: [{ name: '', internalType: 'address payable', type: 'address' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'role', internalType: 'bytes32', type: 'bytes32' },
      { name: 'account', internalType: 'address', type: 'address' },
    ],
    name: 'grantRole',
    outputs: [],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [
      { name: 'role', internalType: 'bytes32', type: 'bytes32' },
      { name: 'account', internalType: 'address', type: 'address' },
    ],
    name: 'hasRole',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: '_registry', internalType: 'address', type: 'address' },
      { name: '_treasury', internalType: 'address payable', type: 'address' },
      { name: '_feePercentage', internalType: 'uint256', type: 'uint256' },
      { name: '_baseFee', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'initialize',
    outputs: [],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: '_strategy', internalType: 'address', type: 'address' }],
    name: 'isCloneableStrategy',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [
      { name: '_poolId', internalType: 'uint256', type: 'uint256' },
      { name: '_address', internalType: 'address', type: 'address' },
    ],
    name: 'isPoolAdmin',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [
      { name: '_poolId', internalType: 'uint256', type: 'uint256' },
      { name: '_address', internalType: 'address', type: 'address' },
    ],
    name: 'isPoolManager',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
  { stateMutability: 'view', type: 'function', inputs: [], name: 'owner', outputs: [{ name: 'result', internalType: 'address', type: 'address' }] },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'pendingOwner', internalType: 'address', type: 'address' }],
    name: 'ownershipHandoverExpiresAt',
    outputs: [{ name: 'result', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: '_token', internalType: 'address', type: 'address' },
      { name: '_recipient', internalType: 'address', type: 'address' },
    ],
    name: 'recoverFunds',
    outputs: [],
  },
  {
    stateMutability: 'payable',
    type: 'function',
    inputs: [
      { name: '_poolId', internalType: 'uint256', type: 'uint256' },
      { name: '_data', internalType: 'bytes', type: 'bytes' },
    ],
    name: 'registerRecipient',
    outputs: [{ name: '', internalType: 'address', type: 'address' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: '_strategy', internalType: 'address', type: 'address' }],
    name: 'removeFromCloneableStrategies',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: '_poolId', internalType: 'uint256', type: 'uint256' },
      { name: '_manager', internalType: 'address', type: 'address' },
    ],
    name: 'removePoolManager',
    outputs: [],
  },
  { stateMutability: 'payable', type: 'function', inputs: [], name: 'renounceOwnership', outputs: [] },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'role', internalType: 'bytes32', type: 'bytes32' },
      { name: 'account', internalType: 'address', type: 'address' },
    ],
    name: 'renounceRole',
    outputs: [],
  },
  { stateMutability: 'payable', type: 'function', inputs: [], name: 'requestOwnershipHandover', outputs: [] },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'role', internalType: 'bytes32', type: 'bytes32' },
      { name: 'account', internalType: 'address', type: 'address' },
    ],
    name: 'revokeRole',
    outputs: [],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'interfaceId', internalType: 'bytes4', type: 'bytes4' }],
    name: 'supportsInterface',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
  {
    stateMutability: 'payable',
    type: 'function',
    inputs: [{ name: 'newOwner', internalType: 'address', type: 'address' }],
    name: 'transferOwnership',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: '_baseFee', internalType: 'uint256', type: 'uint256' }],
    name: 'updateBaseFee',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: '_feePercentage', internalType: 'uint256', type: 'uint256' }],
    name: 'updateFeePercentage',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: '_poolId', internalType: 'uint256', type: 'uint256' },
      {
        name: '_metadata',
        internalType: 'struct Metadata',
        type: 'tuple',
        components: [
          { name: 'protocol', internalType: 'uint256', type: 'uint256' },
          { name: 'pointer', internalType: 'string', type: 'string' },
        ],
      },
    ],
    name: 'updatePoolMetadata',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: '_registry', internalType: 'address', type: 'address' }],
    name: 'updateRegistry',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: '_treasury', internalType: 'address payable', type: 'address' }],
    name: 'updateTreasury',
    outputs: [],
  },
] as const

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// registry
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

export const registryABI = [
  { stateMutability: 'nonpayable', type: 'constructor', inputs: [{ name: '_owner', internalType: 'address', type: 'address' }] },
  { type: 'error', inputs: [], name: 'AMOUNT_MISMATCH' },
  { type: 'error', inputs: [], name: 'NONCE_NOT_AVAILABLE' },
  { type: 'error', inputs: [], name: 'NOT_PENDING_OWNER' },
  { type: 'error', inputs: [], name: 'UNAUTHORIZED' },
  { type: 'error', inputs: [], name: 'ZERO_ADDRESS' },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'profileId', internalType: 'bytes32', type: 'bytes32', indexed: true },
      { name: 'nonce', internalType: 'uint256', type: 'uint256', indexed: false },
      { name: 'name', internalType: 'string', type: 'string', indexed: false },
      {
        name: 'metadata',
        internalType: 'struct Metadata',
        type: 'tuple',
        components: [
          { name: 'protocol', internalType: 'uint256', type: 'uint256' },
          { name: 'pointer', internalType: 'string', type: 'string' },
        ],
        indexed: false,
      },
      { name: 'owner', internalType: 'address', type: 'address', indexed: false },
      { name: 'anchor', internalType: 'address', type: 'address', indexed: false },
    ],
    name: 'ProfileCreated',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'profileId', internalType: 'bytes32', type: 'bytes32', indexed: true },
      {
        name: 'metadata',
        internalType: 'struct Metadata',
        type: 'tuple',
        components: [
          { name: 'protocol', internalType: 'uint256', type: 'uint256' },
          { name: 'pointer', internalType: 'string', type: 'string' },
        ],
        indexed: false,
      },
    ],
    name: 'ProfileMetadataUpdated',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'profileId', internalType: 'bytes32', type: 'bytes32', indexed: true },
      { name: 'name', internalType: 'string', type: 'string', indexed: false },
      { name: 'anchor', internalType: 'address', type: 'address', indexed: false },
    ],
    name: 'ProfileNameUpdated',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'profileId', internalType: 'bytes32', type: 'bytes32', indexed: true },
      { name: 'owner', internalType: 'address', type: 'address', indexed: false },
    ],
    name: 'ProfileOwnerUpdated',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'profileId', internalType: 'bytes32', type: 'bytes32', indexed: true },
      { name: 'pendingOwner', internalType: 'address', type: 'address', indexed: false },
    ],
    name: 'ProfilePendingOwnerUpdated',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'role', internalType: 'bytes32', type: 'bytes32', indexed: true },
      { name: 'previousAdminRole', internalType: 'bytes32', type: 'bytes32', indexed: true },
      { name: 'newAdminRole', internalType: 'bytes32', type: 'bytes32', indexed: true },
    ],
    name: 'RoleAdminChanged',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'role', internalType: 'bytes32', type: 'bytes32', indexed: true },
      { name: 'account', internalType: 'address', type: 'address', indexed: true },
      { name: 'sender', internalType: 'address', type: 'address', indexed: true },
    ],
    name: 'RoleGranted',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'role', internalType: 'bytes32', type: 'bytes32', indexed: true },
      { name: 'account', internalType: 'address', type: 'address', indexed: true },
      { name: 'sender', internalType: 'address', type: 'address', indexed: true },
    ],
    name: 'RoleRevoked',
  },
  { stateMutability: 'view', type: 'function', inputs: [], name: 'ALLO_OWNER', outputs: [{ name: '', internalType: 'bytes32', type: 'bytes32' }] },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'DEFAULT_ADMIN_ROLE',
    outputs: [{ name: '', internalType: 'bytes32', type: 'bytes32' }],
  },
  { stateMutability: 'view', type: 'function', inputs: [], name: 'NATIVE', outputs: [{ name: '', internalType: 'address', type: 'address' }] },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: '_profileId', internalType: 'bytes32', type: 'bytes32' }],
    name: 'acceptProfileOwnership',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: '_profileId', internalType: 'bytes32', type: 'bytes32' },
      { name: '_members', internalType: 'address[]', type: 'address[]' },
    ],
    name: 'addMembers',
    outputs: [],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: '', internalType: 'address', type: 'address' }],
    name: 'anchorToProfileId',
    outputs: [{ name: '', internalType: 'bytes32', type: 'bytes32' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: '_nonce', internalType: 'uint256', type: 'uint256' },
      { name: '_name', internalType: 'string', type: 'string' },
      {
        name: '_metadata',
        internalType: 'struct Metadata',
        type: 'tuple',
        components: [
          { name: 'protocol', internalType: 'uint256', type: 'uint256' },
          { name: 'pointer', internalType: 'string', type: 'string' },
        ],
      },
      { name: '_owner', internalType: 'address', type: 'address' },
      { name: '_members', internalType: 'address[]', type: 'address[]' },
    ],
    name: 'createProfile',
    outputs: [{ name: '', internalType: 'bytes32', type: 'bytes32' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: '_anchor', internalType: 'address', type: 'address' }],
    name: 'getProfileByAnchor',
    outputs: [
      {
        name: '',
        internalType: 'struct IRegistry.Profile',
        type: 'tuple',
        components: [
          { name: 'id', internalType: 'bytes32', type: 'bytes32' },
          { name: 'nonce', internalType: 'uint256', type: 'uint256' },
          { name: 'name', internalType: 'string', type: 'string' },
          {
            name: 'metadata',
            internalType: 'struct Metadata',
            type: 'tuple',
            components: [
              { name: 'protocol', internalType: 'uint256', type: 'uint256' },
              { name: 'pointer', internalType: 'string', type: 'string' },
            ],
          },
          { name: 'owner', internalType: 'address', type: 'address' },
          { name: 'anchor', internalType: 'address', type: 'address' },
        ],
      },
    ],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'profileId', internalType: 'bytes32', type: 'bytes32' }],
    name: 'getProfileById',
    outputs: [
      {
        name: '',
        internalType: 'struct IRegistry.Profile',
        type: 'tuple',
        components: [
          { name: 'id', internalType: 'bytes32', type: 'bytes32' },
          { name: 'nonce', internalType: 'uint256', type: 'uint256' },
          { name: 'name', internalType: 'string', type: 'string' },
          {
            name: 'metadata',
            internalType: 'struct Metadata',
            type: 'tuple',
            components: [
              { name: 'protocol', internalType: 'uint256', type: 'uint256' },
              { name: 'pointer', internalType: 'string', type: 'string' },
            ],
          },
          { name: 'owner', internalType: 'address', type: 'address' },
          { name: 'anchor', internalType: 'address', type: 'address' },
        ],
      },
    ],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'role', internalType: 'bytes32', type: 'bytes32' }],
    name: 'getRoleAdmin',
    outputs: [{ name: '', internalType: 'bytes32', type: 'bytes32' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'role', internalType: 'bytes32', type: 'bytes32' },
      { name: 'account', internalType: 'address', type: 'address' },
    ],
    name: 'grantRole',
    outputs: [],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [
      { name: 'role', internalType: 'bytes32', type: 'bytes32' },
      { name: 'account', internalType: 'address', type: 'address' },
    ],
    name: 'hasRole',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [
      { name: '_profileId', internalType: 'bytes32', type: 'bytes32' },
      { name: '_member', internalType: 'address', type: 'address' },
    ],
    name: 'isMemberOfProfile',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [
      { name: '_profileId', internalType: 'bytes32', type: 'bytes32' },
      { name: '_owner', internalType: 'address', type: 'address' },
    ],
    name: 'isOwnerOfProfile',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [
      { name: '_profileId', internalType: 'bytes32', type: 'bytes32' },
      { name: '_account', internalType: 'address', type: 'address' },
    ],
    name: 'isOwnerOrMemberOfProfile',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: '', internalType: 'bytes32', type: 'bytes32' }],
    name: 'profileIdToPendingOwner',
    outputs: [{ name: '', internalType: 'address', type: 'address' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: '', internalType: 'bytes32', type: 'bytes32' }],
    name: 'profilesById',
    outputs: [
      { name: 'id', internalType: 'bytes32', type: 'bytes32' },
      { name: 'nonce', internalType: 'uint256', type: 'uint256' },
      { name: 'name', internalType: 'string', type: 'string' },
      {
        name: 'metadata',
        internalType: 'struct Metadata',
        type: 'tuple',
        components: [
          { name: 'protocol', internalType: 'uint256', type: 'uint256' },
          { name: 'pointer', internalType: 'string', type: 'string' },
        ],
      },
      { name: 'owner', internalType: 'address', type: 'address' },
      { name: 'anchor', internalType: 'address', type: 'address' },
    ],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: '_token', internalType: 'address', type: 'address' },
      { name: '_recipient', internalType: 'address', type: 'address' },
    ],
    name: 'recoverFunds',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: '_profileId', internalType: 'bytes32', type: 'bytes32' },
      { name: '_members', internalType: 'address[]', type: 'address[]' },
    ],
    name: 'removeMembers',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'role', internalType: 'bytes32', type: 'bytes32' },
      { name: 'account', internalType: 'address', type: 'address' },
    ],
    name: 'renounceRole',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'role', internalType: 'bytes32', type: 'bytes32' },
      { name: 'account', internalType: 'address', type: 'address' },
    ],
    name: 'revokeRole',
    outputs: [],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'interfaceId', internalType: 'bytes4', type: 'bytes4' }],
    name: 'supportsInterface',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: '_profileId', internalType: 'bytes32', type: 'bytes32' },
      {
        name: '_metadata',
        internalType: 'struct Metadata',
        type: 'tuple',
        components: [
          { name: 'protocol', internalType: 'uint256', type: 'uint256' },
          { name: 'pointer', internalType: 'string', type: 'string' },
        ],
      },
    ],
    name: 'updateProfileMetadata',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: '_profileId', internalType: 'bytes32', type: 'bytes32' },
      { name: '_name', internalType: 'string', type: 'string' },
    ],
    name: 'updateProfileName',
    outputs: [{ name: '', internalType: 'address', type: 'address' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: '_profileId', internalType: 'bytes32', type: 'bytes32' },
      { name: '_pendingOwner', internalType: 'address', type: 'address' },
    ],
    name: 'updateProfilePendingOwner',
    outputs: [],
  },
] as const

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// React
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link alloABI}__.
 */
export function useAlloRead<TFunctionName extends string, TSelectData = ReadContractResult<typeof alloABI, TFunctionName>>(
  config: Omit<UseContractReadConfig<typeof alloABI, TFunctionName, TSelectData>, 'abi'> = {} as any
) {
  return useContractRead({ abi: alloABI, ...config } as UseContractReadConfig<typeof alloABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link alloABI}__ and `functionName` set to `"DEFAULT_ADMIN_ROLE"`.
 */
export function useAlloDefaultAdminRole<TFunctionName extends 'DEFAULT_ADMIN_ROLE', TSelectData = ReadContractResult<typeof alloABI, TFunctionName>>(
  config: Omit<UseContractReadConfig<typeof alloABI, TFunctionName, TSelectData>, 'abi' | 'functionName'> = {} as any
) {
  return useContractRead({ abi: alloABI, functionName: 'DEFAULT_ADMIN_ROLE', ...config } as UseContractReadConfig<
    typeof alloABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link alloABI}__ and `functionName` set to `"FEE_DENOMINATOR"`.
 */
export function useAlloFeeDenominator<TFunctionName extends 'FEE_DENOMINATOR', TSelectData = ReadContractResult<typeof alloABI, TFunctionName>>(
  config: Omit<UseContractReadConfig<typeof alloABI, TFunctionName, TSelectData>, 'abi' | 'functionName'> = {} as any
) {
  return useContractRead({ abi: alloABI, functionName: 'FEE_DENOMINATOR', ...config } as UseContractReadConfig<
    typeof alloABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link alloABI}__ and `functionName` set to `"NATIVE"`.
 */
export function useAlloNative<TFunctionName extends 'NATIVE', TSelectData = ReadContractResult<typeof alloABI, TFunctionName>>(
  config: Omit<UseContractReadConfig<typeof alloABI, TFunctionName, TSelectData>, 'abi' | 'functionName'> = {} as any
) {
  return useContractRead({ abi: alloABI, functionName: 'NATIVE', ...config } as UseContractReadConfig<typeof alloABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link alloABI}__ and `functionName` set to `"getBaseFee"`.
 */
export function useAlloGetBaseFee<TFunctionName extends 'getBaseFee', TSelectData = ReadContractResult<typeof alloABI, TFunctionName>>(
  config: Omit<UseContractReadConfig<typeof alloABI, TFunctionName, TSelectData>, 'abi' | 'functionName'> = {} as any
) {
  return useContractRead({ abi: alloABI, functionName: 'getBaseFee', ...config } as UseContractReadConfig<typeof alloABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link alloABI}__ and `functionName` set to `"getFeePercentage"`.
 */
export function useAlloGetFeePercentage<TFunctionName extends 'getFeePercentage', TSelectData = ReadContractResult<typeof alloABI, TFunctionName>>(
  config: Omit<UseContractReadConfig<typeof alloABI, TFunctionName, TSelectData>, 'abi' | 'functionName'> = {} as any
) {
  return useContractRead({ abi: alloABI, functionName: 'getFeePercentage', ...config } as UseContractReadConfig<
    typeof alloABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link alloABI}__ and `functionName` set to `"getPool"`.
 */
export function useAlloGetPool<TFunctionName extends 'getPool', TSelectData = ReadContractResult<typeof alloABI, TFunctionName>>(
  config: Omit<UseContractReadConfig<typeof alloABI, TFunctionName, TSelectData>, 'abi' | 'functionName'> = {} as any
) {
  return useContractRead({ abi: alloABI, functionName: 'getPool', ...config } as UseContractReadConfig<typeof alloABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link alloABI}__ and `functionName` set to `"getRegistry"`.
 */
export function useAlloGetRegistry<TFunctionName extends 'getRegistry', TSelectData = ReadContractResult<typeof alloABI, TFunctionName>>(
  config: Omit<UseContractReadConfig<typeof alloABI, TFunctionName, TSelectData>, 'abi' | 'functionName'> = {} as any
) {
  return useContractRead({ abi: alloABI, functionName: 'getRegistry', ...config } as UseContractReadConfig<
    typeof alloABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link alloABI}__ and `functionName` set to `"getRoleAdmin"`.
 */
export function useAlloGetRoleAdmin<TFunctionName extends 'getRoleAdmin', TSelectData = ReadContractResult<typeof alloABI, TFunctionName>>(
  config: Omit<UseContractReadConfig<typeof alloABI, TFunctionName, TSelectData>, 'abi' | 'functionName'> = {} as any
) {
  return useContractRead({ abi: alloABI, functionName: 'getRoleAdmin', ...config } as UseContractReadConfig<
    typeof alloABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link alloABI}__ and `functionName` set to `"getStrategy"`.
 */
export function useAlloGetStrategy<TFunctionName extends 'getStrategy', TSelectData = ReadContractResult<typeof alloABI, TFunctionName>>(
  config: Omit<UseContractReadConfig<typeof alloABI, TFunctionName, TSelectData>, 'abi' | 'functionName'> = {} as any
) {
  return useContractRead({ abi: alloABI, functionName: 'getStrategy', ...config } as UseContractReadConfig<
    typeof alloABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link alloABI}__ and `functionName` set to `"getTreasury"`.
 */
export function useAlloGetTreasury<TFunctionName extends 'getTreasury', TSelectData = ReadContractResult<typeof alloABI, TFunctionName>>(
  config: Omit<UseContractReadConfig<typeof alloABI, TFunctionName, TSelectData>, 'abi' | 'functionName'> = {} as any
) {
  return useContractRead({ abi: alloABI, functionName: 'getTreasury', ...config } as UseContractReadConfig<
    typeof alloABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link alloABI}__ and `functionName` set to `"hasRole"`.
 */
export function useAlloHasRole<TFunctionName extends 'hasRole', TSelectData = ReadContractResult<typeof alloABI, TFunctionName>>(
  config: Omit<UseContractReadConfig<typeof alloABI, TFunctionName, TSelectData>, 'abi' | 'functionName'> = {} as any
) {
  return useContractRead({ abi: alloABI, functionName: 'hasRole', ...config } as UseContractReadConfig<typeof alloABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link alloABI}__ and `functionName` set to `"isCloneableStrategy"`.
 */
export function useAlloIsCloneableStrategy<
  TFunctionName extends 'isCloneableStrategy',
  TSelectData = ReadContractResult<typeof alloABI, TFunctionName>
>(config: Omit<UseContractReadConfig<typeof alloABI, TFunctionName, TSelectData>, 'abi' | 'functionName'> = {} as any) {
  return useContractRead({ abi: alloABI, functionName: 'isCloneableStrategy', ...config } as UseContractReadConfig<
    typeof alloABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link alloABI}__ and `functionName` set to `"isPoolAdmin"`.
 */
export function useAlloIsPoolAdmin<TFunctionName extends 'isPoolAdmin', TSelectData = ReadContractResult<typeof alloABI, TFunctionName>>(
  config: Omit<UseContractReadConfig<typeof alloABI, TFunctionName, TSelectData>, 'abi' | 'functionName'> = {} as any
) {
  return useContractRead({ abi: alloABI, functionName: 'isPoolAdmin', ...config } as UseContractReadConfig<
    typeof alloABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link alloABI}__ and `functionName` set to `"isPoolManager"`.
 */
export function useAlloIsPoolManager<TFunctionName extends 'isPoolManager', TSelectData = ReadContractResult<typeof alloABI, TFunctionName>>(
  config: Omit<UseContractReadConfig<typeof alloABI, TFunctionName, TSelectData>, 'abi' | 'functionName'> = {} as any
) {
  return useContractRead({ abi: alloABI, functionName: 'isPoolManager', ...config } as UseContractReadConfig<
    typeof alloABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link alloABI}__ and `functionName` set to `"owner"`.
 */
export function useAlloOwner<TFunctionName extends 'owner', TSelectData = ReadContractResult<typeof alloABI, TFunctionName>>(
  config: Omit<UseContractReadConfig<typeof alloABI, TFunctionName, TSelectData>, 'abi' | 'functionName'> = {} as any
) {
  return useContractRead({ abi: alloABI, functionName: 'owner', ...config } as UseContractReadConfig<typeof alloABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link alloABI}__ and `functionName` set to `"ownershipHandoverExpiresAt"`.
 */
export function useAlloOwnershipHandoverExpiresAt<
  TFunctionName extends 'ownershipHandoverExpiresAt',
  TSelectData = ReadContractResult<typeof alloABI, TFunctionName>
>(config: Omit<UseContractReadConfig<typeof alloABI, TFunctionName, TSelectData>, 'abi' | 'functionName'> = {} as any) {
  return useContractRead({ abi: alloABI, functionName: 'ownershipHandoverExpiresAt', ...config } as UseContractReadConfig<
    typeof alloABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link alloABI}__ and `functionName` set to `"supportsInterface"`.
 */
export function useAlloSupportsInterface<TFunctionName extends 'supportsInterface', TSelectData = ReadContractResult<typeof alloABI, TFunctionName>>(
  config: Omit<UseContractReadConfig<typeof alloABI, TFunctionName, TSelectData>, 'abi' | 'functionName'> = {} as any
) {
  return useContractRead({ abi: alloABI, functionName: 'supportsInterface', ...config } as UseContractReadConfig<
    typeof alloABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link alloABI}__.
 */
export function useAlloWrite<TFunctionName extends string, TMode extends WriteContractMode = undefined>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<PrepareWriteContractResult<typeof alloABI, string>['request']['abi'], TFunctionName, TMode>
    : UseContractWriteConfig<typeof alloABI, TFunctionName, TMode> & {
        abi?: never
      } = {} as any
) {
  return useContractWrite<typeof alloABI, TFunctionName, TMode>({ abi: alloABI, ...config } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link alloABI}__ and `functionName` set to `"addPoolManager"`.
 */
export function useAlloAddPoolManager<TMode extends WriteContractMode = undefined>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<PrepareWriteContractResult<typeof alloABI, 'addPoolManager'>['request']['abi'], 'addPoolManager', TMode> & {
        functionName?: 'addPoolManager'
      }
    : UseContractWriteConfig<typeof alloABI, 'addPoolManager', TMode> & {
        abi?: never
        functionName?: 'addPoolManager'
      } = {} as any
) {
  return useContractWrite<typeof alloABI, 'addPoolManager', TMode>({ abi: alloABI, functionName: 'addPoolManager', ...config } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link alloABI}__ and `functionName` set to `"addToCloneableStrategies"`.
 */
export function useAlloAddToCloneableStrategies<TMode extends WriteContractMode = undefined>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<typeof alloABI, 'addToCloneableStrategies'>['request']['abi'],
        'addToCloneableStrategies',
        TMode
      > & { functionName?: 'addToCloneableStrategies' }
    : UseContractWriteConfig<typeof alloABI, 'addToCloneableStrategies', TMode> & {
        abi?: never
        functionName?: 'addToCloneableStrategies'
      } = {} as any
) {
  return useContractWrite<typeof alloABI, 'addToCloneableStrategies', TMode>({
    abi: alloABI,
    functionName: 'addToCloneableStrategies',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link alloABI}__ and `functionName` set to `"allocate"`.
 */
export function useAlloAllocate<TMode extends WriteContractMode = undefined>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<PrepareWriteContractResult<typeof alloABI, 'allocate'>['request']['abi'], 'allocate', TMode> & {
        functionName?: 'allocate'
      }
    : UseContractWriteConfig<typeof alloABI, 'allocate', TMode> & {
        abi?: never
        functionName?: 'allocate'
      } = {} as any
) {
  return useContractWrite<typeof alloABI, 'allocate', TMode>({ abi: alloABI, functionName: 'allocate', ...config } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link alloABI}__ and `functionName` set to `"batchAllocate"`.
 */
export function useAlloBatchAllocate<TMode extends WriteContractMode = undefined>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<PrepareWriteContractResult<typeof alloABI, 'batchAllocate'>['request']['abi'], 'batchAllocate', TMode> & {
        functionName?: 'batchAllocate'
      }
    : UseContractWriteConfig<typeof alloABI, 'batchAllocate', TMode> & {
        abi?: never
        functionName?: 'batchAllocate'
      } = {} as any
) {
  return useContractWrite<typeof alloABI, 'batchAllocate', TMode>({ abi: alloABI, functionName: 'batchAllocate', ...config } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link alloABI}__ and `functionName` set to `"batchRegisterRecipient"`.
 */
export function useAlloBatchRegisterRecipient<TMode extends WriteContractMode = undefined>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<typeof alloABI, 'batchRegisterRecipient'>['request']['abi'],
        'batchRegisterRecipient',
        TMode
      > & { functionName?: 'batchRegisterRecipient' }
    : UseContractWriteConfig<typeof alloABI, 'batchRegisterRecipient', TMode> & {
        abi?: never
        functionName?: 'batchRegisterRecipient'
      } = {} as any
) {
  return useContractWrite<typeof alloABI, 'batchRegisterRecipient', TMode>({ abi: alloABI, functionName: 'batchRegisterRecipient', ...config } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link alloABI}__ and `functionName` set to `"cancelOwnershipHandover"`.
 */
export function useAlloCancelOwnershipHandover<TMode extends WriteContractMode = undefined>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<typeof alloABI, 'cancelOwnershipHandover'>['request']['abi'],
        'cancelOwnershipHandover',
        TMode
      > & { functionName?: 'cancelOwnershipHandover' }
    : UseContractWriteConfig<typeof alloABI, 'cancelOwnershipHandover', TMode> & {
        abi?: never
        functionName?: 'cancelOwnershipHandover'
      } = {} as any
) {
  return useContractWrite<typeof alloABI, 'cancelOwnershipHandover', TMode>({
    abi: alloABI,
    functionName: 'cancelOwnershipHandover',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link alloABI}__ and `functionName` set to `"completeOwnershipHandover"`.
 */
export function useAlloCompleteOwnershipHandover<TMode extends WriteContractMode = undefined>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<typeof alloABI, 'completeOwnershipHandover'>['request']['abi'],
        'completeOwnershipHandover',
        TMode
      > & { functionName?: 'completeOwnershipHandover' }
    : UseContractWriteConfig<typeof alloABI, 'completeOwnershipHandover', TMode> & {
        abi?: never
        functionName?: 'completeOwnershipHandover'
      } = {} as any
) {
  return useContractWrite<typeof alloABI, 'completeOwnershipHandover', TMode>({
    abi: alloABI,
    functionName: 'completeOwnershipHandover',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link alloABI}__ and `functionName` set to `"createPool"`.
 */
export function useAlloCreatePool<TMode extends WriteContractMode = undefined>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<PrepareWriteContractResult<typeof alloABI, 'createPool'>['request']['abi'], 'createPool', TMode> & {
        functionName?: 'createPool'
      }
    : UseContractWriteConfig<typeof alloABI, 'createPool', TMode> & {
        abi?: never
        functionName?: 'createPool'
      } = {} as any
) {
  return useContractWrite<typeof alloABI, 'createPool', TMode>({ abi: alloABI, functionName: 'createPool', ...config } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link alloABI}__ and `functionName` set to `"createPoolWithCustomStrategy"`.
 */
export function useAlloCreatePoolWithCustomStrategy<TMode extends WriteContractMode = undefined>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<typeof alloABI, 'createPoolWithCustomStrategy'>['request']['abi'],
        'createPoolWithCustomStrategy',
        TMode
      > & { functionName?: 'createPoolWithCustomStrategy' }
    : UseContractWriteConfig<typeof alloABI, 'createPoolWithCustomStrategy', TMode> & {
        abi?: never
        functionName?: 'createPoolWithCustomStrategy'
      } = {} as any
) {
  return useContractWrite<typeof alloABI, 'createPoolWithCustomStrategy', TMode>({
    abi: alloABI,
    functionName: 'createPoolWithCustomStrategy',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link alloABI}__ and `functionName` set to `"distribute"`.
 */
export function useAlloDistribute<TMode extends WriteContractMode = undefined>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<PrepareWriteContractResult<typeof alloABI, 'distribute'>['request']['abi'], 'distribute', TMode> & {
        functionName?: 'distribute'
      }
    : UseContractWriteConfig<typeof alloABI, 'distribute', TMode> & {
        abi?: never
        functionName?: 'distribute'
      } = {} as any
) {
  return useContractWrite<typeof alloABI, 'distribute', TMode>({ abi: alloABI, functionName: 'distribute', ...config } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link alloABI}__ and `functionName` set to `"fundPool"`.
 */
export function useAlloFundPool<TMode extends WriteContractMode = undefined>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<PrepareWriteContractResult<typeof alloABI, 'fundPool'>['request']['abi'], 'fundPool', TMode> & {
        functionName?: 'fundPool'
      }
    : UseContractWriteConfig<typeof alloABI, 'fundPool', TMode> & {
        abi?: never
        functionName?: 'fundPool'
      } = {} as any
) {
  return useContractWrite<typeof alloABI, 'fundPool', TMode>({ abi: alloABI, functionName: 'fundPool', ...config } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link alloABI}__ and `functionName` set to `"grantRole"`.
 */
export function useAlloGrantRole<TMode extends WriteContractMode = undefined>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<PrepareWriteContractResult<typeof alloABI, 'grantRole'>['request']['abi'], 'grantRole', TMode> & {
        functionName?: 'grantRole'
      }
    : UseContractWriteConfig<typeof alloABI, 'grantRole', TMode> & {
        abi?: never
        functionName?: 'grantRole'
      } = {} as any
) {
  return useContractWrite<typeof alloABI, 'grantRole', TMode>({ abi: alloABI, functionName: 'grantRole', ...config } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link alloABI}__ and `functionName` set to `"initialize"`.
 */
export function useAlloInitialize<TMode extends WriteContractMode = undefined>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<PrepareWriteContractResult<typeof alloABI, 'initialize'>['request']['abi'], 'initialize', TMode> & {
        functionName?: 'initialize'
      }
    : UseContractWriteConfig<typeof alloABI, 'initialize', TMode> & {
        abi?: never
        functionName?: 'initialize'
      } = {} as any
) {
  return useContractWrite<typeof alloABI, 'initialize', TMode>({ abi: alloABI, functionName: 'initialize', ...config } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link alloABI}__ and `functionName` set to `"recoverFunds"`.
 */
export function useAlloRecoverFunds<TMode extends WriteContractMode = undefined>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<PrepareWriteContractResult<typeof alloABI, 'recoverFunds'>['request']['abi'], 'recoverFunds', TMode> & {
        functionName?: 'recoverFunds'
      }
    : UseContractWriteConfig<typeof alloABI, 'recoverFunds', TMode> & {
        abi?: never
        functionName?: 'recoverFunds'
      } = {} as any
) {
  return useContractWrite<typeof alloABI, 'recoverFunds', TMode>({ abi: alloABI, functionName: 'recoverFunds', ...config } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link alloABI}__ and `functionName` set to `"registerRecipient"`.
 */
export function useAlloRegisterRecipient<TMode extends WriteContractMode = undefined>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<PrepareWriteContractResult<typeof alloABI, 'registerRecipient'>['request']['abi'], 'registerRecipient', TMode> & {
        functionName?: 'registerRecipient'
      }
    : UseContractWriteConfig<typeof alloABI, 'registerRecipient', TMode> & {
        abi?: never
        functionName?: 'registerRecipient'
      } = {} as any
) {
  return useContractWrite<typeof alloABI, 'registerRecipient', TMode>({ abi: alloABI, functionName: 'registerRecipient', ...config } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link alloABI}__ and `functionName` set to `"removeFromCloneableStrategies"`.
 */
export function useAlloRemoveFromCloneableStrategies<TMode extends WriteContractMode = undefined>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<typeof alloABI, 'removeFromCloneableStrategies'>['request']['abi'],
        'removeFromCloneableStrategies',
        TMode
      > & { functionName?: 'removeFromCloneableStrategies' }
    : UseContractWriteConfig<typeof alloABI, 'removeFromCloneableStrategies', TMode> & {
        abi?: never
        functionName?: 'removeFromCloneableStrategies'
      } = {} as any
) {
  return useContractWrite<typeof alloABI, 'removeFromCloneableStrategies', TMode>({
    abi: alloABI,
    functionName: 'removeFromCloneableStrategies',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link alloABI}__ and `functionName` set to `"removePoolManager"`.
 */
export function useAlloRemovePoolManager<TMode extends WriteContractMode = undefined>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<PrepareWriteContractResult<typeof alloABI, 'removePoolManager'>['request']['abi'], 'removePoolManager', TMode> & {
        functionName?: 'removePoolManager'
      }
    : UseContractWriteConfig<typeof alloABI, 'removePoolManager', TMode> & {
        abi?: never
        functionName?: 'removePoolManager'
      } = {} as any
) {
  return useContractWrite<typeof alloABI, 'removePoolManager', TMode>({ abi: alloABI, functionName: 'removePoolManager', ...config } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link alloABI}__ and `functionName` set to `"renounceOwnership"`.
 */
export function useAlloRenounceOwnership<TMode extends WriteContractMode = undefined>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<PrepareWriteContractResult<typeof alloABI, 'renounceOwnership'>['request']['abi'], 'renounceOwnership', TMode> & {
        functionName?: 'renounceOwnership'
      }
    : UseContractWriteConfig<typeof alloABI, 'renounceOwnership', TMode> & {
        abi?: never
        functionName?: 'renounceOwnership'
      } = {} as any
) {
  return useContractWrite<typeof alloABI, 'renounceOwnership', TMode>({ abi: alloABI, functionName: 'renounceOwnership', ...config } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link alloABI}__ and `functionName` set to `"renounceRole"`.
 */
export function useAlloRenounceRole<TMode extends WriteContractMode = undefined>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<PrepareWriteContractResult<typeof alloABI, 'renounceRole'>['request']['abi'], 'renounceRole', TMode> & {
        functionName?: 'renounceRole'
      }
    : UseContractWriteConfig<typeof alloABI, 'renounceRole', TMode> & {
        abi?: never
        functionName?: 'renounceRole'
      } = {} as any
) {
  return useContractWrite<typeof alloABI, 'renounceRole', TMode>({ abi: alloABI, functionName: 'renounceRole', ...config } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link alloABI}__ and `functionName` set to `"requestOwnershipHandover"`.
 */
export function useAlloRequestOwnershipHandover<TMode extends WriteContractMode = undefined>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<typeof alloABI, 'requestOwnershipHandover'>['request']['abi'],
        'requestOwnershipHandover',
        TMode
      > & { functionName?: 'requestOwnershipHandover' }
    : UseContractWriteConfig<typeof alloABI, 'requestOwnershipHandover', TMode> & {
        abi?: never
        functionName?: 'requestOwnershipHandover'
      } = {} as any
) {
  return useContractWrite<typeof alloABI, 'requestOwnershipHandover', TMode>({
    abi: alloABI,
    functionName: 'requestOwnershipHandover',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link alloABI}__ and `functionName` set to `"revokeRole"`.
 */
export function useAlloRevokeRole<TMode extends WriteContractMode = undefined>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<PrepareWriteContractResult<typeof alloABI, 'revokeRole'>['request']['abi'], 'revokeRole', TMode> & {
        functionName?: 'revokeRole'
      }
    : UseContractWriteConfig<typeof alloABI, 'revokeRole', TMode> & {
        abi?: never
        functionName?: 'revokeRole'
      } = {} as any
) {
  return useContractWrite<typeof alloABI, 'revokeRole', TMode>({ abi: alloABI, functionName: 'revokeRole', ...config } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link alloABI}__ and `functionName` set to `"transferOwnership"`.
 */
export function useAlloTransferOwnership<TMode extends WriteContractMode = undefined>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<PrepareWriteContractResult<typeof alloABI, 'transferOwnership'>['request']['abi'], 'transferOwnership', TMode> & {
        functionName?: 'transferOwnership'
      }
    : UseContractWriteConfig<typeof alloABI, 'transferOwnership', TMode> & {
        abi?: never
        functionName?: 'transferOwnership'
      } = {} as any
) {
  return useContractWrite<typeof alloABI, 'transferOwnership', TMode>({ abi: alloABI, functionName: 'transferOwnership', ...config } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link alloABI}__ and `functionName` set to `"updateBaseFee"`.
 */
export function useAlloUpdateBaseFee<TMode extends WriteContractMode = undefined>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<PrepareWriteContractResult<typeof alloABI, 'updateBaseFee'>['request']['abi'], 'updateBaseFee', TMode> & {
        functionName?: 'updateBaseFee'
      }
    : UseContractWriteConfig<typeof alloABI, 'updateBaseFee', TMode> & {
        abi?: never
        functionName?: 'updateBaseFee'
      } = {} as any
) {
  return useContractWrite<typeof alloABI, 'updateBaseFee', TMode>({ abi: alloABI, functionName: 'updateBaseFee', ...config } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link alloABI}__ and `functionName` set to `"updateFeePercentage"`.
 */
export function useAlloUpdateFeePercentage<TMode extends WriteContractMode = undefined>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<PrepareWriteContractResult<typeof alloABI, 'updateFeePercentage'>['request']['abi'], 'updateFeePercentage', TMode> & {
        functionName?: 'updateFeePercentage'
      }
    : UseContractWriteConfig<typeof alloABI, 'updateFeePercentage', TMode> & {
        abi?: never
        functionName?: 'updateFeePercentage'
      } = {} as any
) {
  return useContractWrite<typeof alloABI, 'updateFeePercentage', TMode>({ abi: alloABI, functionName: 'updateFeePercentage', ...config } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link alloABI}__ and `functionName` set to `"updatePoolMetadata"`.
 */
export function useAlloUpdatePoolMetadata<TMode extends WriteContractMode = undefined>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<PrepareWriteContractResult<typeof alloABI, 'updatePoolMetadata'>['request']['abi'], 'updatePoolMetadata', TMode> & {
        functionName?: 'updatePoolMetadata'
      }
    : UseContractWriteConfig<typeof alloABI, 'updatePoolMetadata', TMode> & {
        abi?: never
        functionName?: 'updatePoolMetadata'
      } = {} as any
) {
  return useContractWrite<typeof alloABI, 'updatePoolMetadata', TMode>({ abi: alloABI, functionName: 'updatePoolMetadata', ...config } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link alloABI}__ and `functionName` set to `"updateRegistry"`.
 */
export function useAlloUpdateRegistry<TMode extends WriteContractMode = undefined>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<PrepareWriteContractResult<typeof alloABI, 'updateRegistry'>['request']['abi'], 'updateRegistry', TMode> & {
        functionName?: 'updateRegistry'
      }
    : UseContractWriteConfig<typeof alloABI, 'updateRegistry', TMode> & {
        abi?: never
        functionName?: 'updateRegistry'
      } = {} as any
) {
  return useContractWrite<typeof alloABI, 'updateRegistry', TMode>({ abi: alloABI, functionName: 'updateRegistry', ...config } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link alloABI}__ and `functionName` set to `"updateTreasury"`.
 */
export function useAlloUpdateTreasury<TMode extends WriteContractMode = undefined>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<PrepareWriteContractResult<typeof alloABI, 'updateTreasury'>['request']['abi'], 'updateTreasury', TMode> & {
        functionName?: 'updateTreasury'
      }
    : UseContractWriteConfig<typeof alloABI, 'updateTreasury', TMode> & {
        abi?: never
        functionName?: 'updateTreasury'
      } = {} as any
) {
  return useContractWrite<typeof alloABI, 'updateTreasury', TMode>({ abi: alloABI, functionName: 'updateTreasury', ...config } as any)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link alloABI}__.
 */
export function usePrepareAlloWrite<TFunctionName extends string>(
  config: Omit<UsePrepareContractWriteConfig<typeof alloABI, TFunctionName>, 'abi'> = {} as any
) {
  return usePrepareContractWrite({ abi: alloABI, ...config } as UsePrepareContractWriteConfig<typeof alloABI, TFunctionName>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link alloABI}__ and `functionName` set to `"addPoolManager"`.
 */
export function usePrepareAlloAddPoolManager(
  config: Omit<UsePrepareContractWriteConfig<typeof alloABI, 'addPoolManager'>, 'abi' | 'functionName'> = {} as any
) {
  return usePrepareContractWrite({ abi: alloABI, functionName: 'addPoolManager', ...config } as UsePrepareContractWriteConfig<
    typeof alloABI,
    'addPoolManager'
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link alloABI}__ and `functionName` set to `"addToCloneableStrategies"`.
 */
export function usePrepareAlloAddToCloneableStrategies(
  config: Omit<UsePrepareContractWriteConfig<typeof alloABI, 'addToCloneableStrategies'>, 'abi' | 'functionName'> = {} as any
) {
  return usePrepareContractWrite({ abi: alloABI, functionName: 'addToCloneableStrategies', ...config } as UsePrepareContractWriteConfig<
    typeof alloABI,
    'addToCloneableStrategies'
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link alloABI}__ and `functionName` set to `"allocate"`.
 */
export function usePrepareAlloAllocate(config: Omit<UsePrepareContractWriteConfig<typeof alloABI, 'allocate'>, 'abi' | 'functionName'> = {} as any) {
  return usePrepareContractWrite({ abi: alloABI, functionName: 'allocate', ...config } as UsePrepareContractWriteConfig<typeof alloABI, 'allocate'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link alloABI}__ and `functionName` set to `"batchAllocate"`.
 */
export function usePrepareAlloBatchAllocate(
  config: Omit<UsePrepareContractWriteConfig<typeof alloABI, 'batchAllocate'>, 'abi' | 'functionName'> = {} as any
) {
  return usePrepareContractWrite({ abi: alloABI, functionName: 'batchAllocate', ...config } as UsePrepareContractWriteConfig<
    typeof alloABI,
    'batchAllocate'
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link alloABI}__ and `functionName` set to `"batchRegisterRecipient"`.
 */
export function usePrepareAlloBatchRegisterRecipient(
  config: Omit<UsePrepareContractWriteConfig<typeof alloABI, 'batchRegisterRecipient'>, 'abi' | 'functionName'> = {} as any
) {
  return usePrepareContractWrite({ abi: alloABI, functionName: 'batchRegisterRecipient', ...config } as UsePrepareContractWriteConfig<
    typeof alloABI,
    'batchRegisterRecipient'
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link alloABI}__ and `functionName` set to `"cancelOwnershipHandover"`.
 */
export function usePrepareAlloCancelOwnershipHandover(
  config: Omit<UsePrepareContractWriteConfig<typeof alloABI, 'cancelOwnershipHandover'>, 'abi' | 'functionName'> = {} as any
) {
  return usePrepareContractWrite({ abi: alloABI, functionName: 'cancelOwnershipHandover', ...config } as UsePrepareContractWriteConfig<
    typeof alloABI,
    'cancelOwnershipHandover'
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link alloABI}__ and `functionName` set to `"completeOwnershipHandover"`.
 */
export function usePrepareAlloCompleteOwnershipHandover(
  config: Omit<UsePrepareContractWriteConfig<typeof alloABI, 'completeOwnershipHandover'>, 'abi' | 'functionName'> = {} as any
) {
  return usePrepareContractWrite({ abi: alloABI, functionName: 'completeOwnershipHandover', ...config } as UsePrepareContractWriteConfig<
    typeof alloABI,
    'completeOwnershipHandover'
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link alloABI}__ and `functionName` set to `"createPool"`.
 */
export function usePrepareAlloCreatePool(
  config: Omit<UsePrepareContractWriteConfig<typeof alloABI, 'createPool'>, 'abi' | 'functionName'> = {} as any
) {
  return usePrepareContractWrite({ abi: alloABI, functionName: 'createPool', ...config } as UsePrepareContractWriteConfig<
    typeof alloABI,
    'createPool'
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link alloABI}__ and `functionName` set to `"createPoolWithCustomStrategy"`.
 */
export function usePrepareAlloCreatePoolWithCustomStrategy(
  config: Omit<UsePrepareContractWriteConfig<typeof alloABI, 'createPoolWithCustomStrategy'>, 'abi' | 'functionName'> = {} as any
) {
  return usePrepareContractWrite({ abi: alloABI, functionName: 'createPoolWithCustomStrategy', ...config } as UsePrepareContractWriteConfig<
    typeof alloABI,
    'createPoolWithCustomStrategy'
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link alloABI}__ and `functionName` set to `"distribute"`.
 */
export function usePrepareAlloDistribute(
  config: Omit<UsePrepareContractWriteConfig<typeof alloABI, 'distribute'>, 'abi' | 'functionName'> = {} as any
) {
  return usePrepareContractWrite({ abi: alloABI, functionName: 'distribute', ...config } as UsePrepareContractWriteConfig<
    typeof alloABI,
    'distribute'
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link alloABI}__ and `functionName` set to `"fundPool"`.
 */
export function usePrepareAlloFundPool(config: Omit<UsePrepareContractWriteConfig<typeof alloABI, 'fundPool'>, 'abi' | 'functionName'> = {} as any) {
  return usePrepareContractWrite({ abi: alloABI, functionName: 'fundPool', ...config } as UsePrepareContractWriteConfig<typeof alloABI, 'fundPool'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link alloABI}__ and `functionName` set to `"grantRole"`.
 */
export function usePrepareAlloGrantRole(
  config: Omit<UsePrepareContractWriteConfig<typeof alloABI, 'grantRole'>, 'abi' | 'functionName'> = {} as any
) {
  return usePrepareContractWrite({ abi: alloABI, functionName: 'grantRole', ...config } as UsePrepareContractWriteConfig<typeof alloABI, 'grantRole'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link alloABI}__ and `functionName` set to `"initialize"`.
 */
export function usePrepareAlloInitialize(
  config: Omit<UsePrepareContractWriteConfig<typeof alloABI, 'initialize'>, 'abi' | 'functionName'> = {} as any
) {
  return usePrepareContractWrite({ abi: alloABI, functionName: 'initialize', ...config } as UsePrepareContractWriteConfig<
    typeof alloABI,
    'initialize'
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link alloABI}__ and `functionName` set to `"recoverFunds"`.
 */
export function usePrepareAlloRecoverFunds(
  config: Omit<UsePrepareContractWriteConfig<typeof alloABI, 'recoverFunds'>, 'abi' | 'functionName'> = {} as any
) {
  return usePrepareContractWrite({ abi: alloABI, functionName: 'recoverFunds', ...config } as UsePrepareContractWriteConfig<
    typeof alloABI,
    'recoverFunds'
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link alloABI}__ and `functionName` set to `"registerRecipient"`.
 */
export function usePrepareAlloRegisterRecipient(
  config: Omit<UsePrepareContractWriteConfig<typeof alloABI, 'registerRecipient'>, 'abi' | 'functionName'> = {} as any
) {
  return usePrepareContractWrite({ abi: alloABI, functionName: 'registerRecipient', ...config } as UsePrepareContractWriteConfig<
    typeof alloABI,
    'registerRecipient'
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link alloABI}__ and `functionName` set to `"removeFromCloneableStrategies"`.
 */
export function usePrepareAlloRemoveFromCloneableStrategies(
  config: Omit<UsePrepareContractWriteConfig<typeof alloABI, 'removeFromCloneableStrategies'>, 'abi' | 'functionName'> = {} as any
) {
  return usePrepareContractWrite({ abi: alloABI, functionName: 'removeFromCloneableStrategies', ...config } as UsePrepareContractWriteConfig<
    typeof alloABI,
    'removeFromCloneableStrategies'
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link alloABI}__ and `functionName` set to `"removePoolManager"`.
 */
export function usePrepareAlloRemovePoolManager(
  config: Omit<UsePrepareContractWriteConfig<typeof alloABI, 'removePoolManager'>, 'abi' | 'functionName'> = {} as any
) {
  return usePrepareContractWrite({ abi: alloABI, functionName: 'removePoolManager', ...config } as UsePrepareContractWriteConfig<
    typeof alloABI,
    'removePoolManager'
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link alloABI}__ and `functionName` set to `"renounceOwnership"`.
 */
export function usePrepareAlloRenounceOwnership(
  config: Omit<UsePrepareContractWriteConfig<typeof alloABI, 'renounceOwnership'>, 'abi' | 'functionName'> = {} as any
) {
  return usePrepareContractWrite({ abi: alloABI, functionName: 'renounceOwnership', ...config } as UsePrepareContractWriteConfig<
    typeof alloABI,
    'renounceOwnership'
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link alloABI}__ and `functionName` set to `"renounceRole"`.
 */
export function usePrepareAlloRenounceRole(
  config: Omit<UsePrepareContractWriteConfig<typeof alloABI, 'renounceRole'>, 'abi' | 'functionName'> = {} as any
) {
  return usePrepareContractWrite({ abi: alloABI, functionName: 'renounceRole', ...config } as UsePrepareContractWriteConfig<
    typeof alloABI,
    'renounceRole'
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link alloABI}__ and `functionName` set to `"requestOwnershipHandover"`.
 */
export function usePrepareAlloRequestOwnershipHandover(
  config: Omit<UsePrepareContractWriteConfig<typeof alloABI, 'requestOwnershipHandover'>, 'abi' | 'functionName'> = {} as any
) {
  return usePrepareContractWrite({ abi: alloABI, functionName: 'requestOwnershipHandover', ...config } as UsePrepareContractWriteConfig<
    typeof alloABI,
    'requestOwnershipHandover'
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link alloABI}__ and `functionName` set to `"revokeRole"`.
 */
export function usePrepareAlloRevokeRole(
  config: Omit<UsePrepareContractWriteConfig<typeof alloABI, 'revokeRole'>, 'abi' | 'functionName'> = {} as any
) {
  return usePrepareContractWrite({ abi: alloABI, functionName: 'revokeRole', ...config } as UsePrepareContractWriteConfig<
    typeof alloABI,
    'revokeRole'
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link alloABI}__ and `functionName` set to `"transferOwnership"`.
 */
export function usePrepareAlloTransferOwnership(
  config: Omit<UsePrepareContractWriteConfig<typeof alloABI, 'transferOwnership'>, 'abi' | 'functionName'> = {} as any
) {
  return usePrepareContractWrite({ abi: alloABI, functionName: 'transferOwnership', ...config } as UsePrepareContractWriteConfig<
    typeof alloABI,
    'transferOwnership'
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link alloABI}__ and `functionName` set to `"updateBaseFee"`.
 */
export function usePrepareAlloUpdateBaseFee(
  config: Omit<UsePrepareContractWriteConfig<typeof alloABI, 'updateBaseFee'>, 'abi' | 'functionName'> = {} as any
) {
  return usePrepareContractWrite({ abi: alloABI, functionName: 'updateBaseFee', ...config } as UsePrepareContractWriteConfig<
    typeof alloABI,
    'updateBaseFee'
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link alloABI}__ and `functionName` set to `"updateFeePercentage"`.
 */
export function usePrepareAlloUpdateFeePercentage(
  config: Omit<UsePrepareContractWriteConfig<typeof alloABI, 'updateFeePercentage'>, 'abi' | 'functionName'> = {} as any
) {
  return usePrepareContractWrite({ abi: alloABI, functionName: 'updateFeePercentage', ...config } as UsePrepareContractWriteConfig<
    typeof alloABI,
    'updateFeePercentage'
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link alloABI}__ and `functionName` set to `"updatePoolMetadata"`.
 */
export function usePrepareAlloUpdatePoolMetadata(
  config: Omit<UsePrepareContractWriteConfig<typeof alloABI, 'updatePoolMetadata'>, 'abi' | 'functionName'> = {} as any
) {
  return usePrepareContractWrite({ abi: alloABI, functionName: 'updatePoolMetadata', ...config } as UsePrepareContractWriteConfig<
    typeof alloABI,
    'updatePoolMetadata'
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link alloABI}__ and `functionName` set to `"updateRegistry"`.
 */
export function usePrepareAlloUpdateRegistry(
  config: Omit<UsePrepareContractWriteConfig<typeof alloABI, 'updateRegistry'>, 'abi' | 'functionName'> = {} as any
) {
  return usePrepareContractWrite({ abi: alloABI, functionName: 'updateRegistry', ...config } as UsePrepareContractWriteConfig<
    typeof alloABI,
    'updateRegistry'
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link alloABI}__ and `functionName` set to `"updateTreasury"`.
 */
export function usePrepareAlloUpdateTreasury(
  config: Omit<UsePrepareContractWriteConfig<typeof alloABI, 'updateTreasury'>, 'abi' | 'functionName'> = {} as any
) {
  return usePrepareContractWrite({ abi: alloABI, functionName: 'updateTreasury', ...config } as UsePrepareContractWriteConfig<
    typeof alloABI,
    'updateTreasury'
  >)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link alloABI}__.
 */
export function useAlloEvent<TEventName extends string>(config: Omit<UseContractEventConfig<typeof alloABI, TEventName>, 'abi'> = {} as any) {
  return useContractEvent({ abi: alloABI, ...config } as UseContractEventConfig<typeof alloABI, TEventName>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link alloABI}__ and `eventName` set to `"BaseFeePaid"`.
 */
export function useAlloBaseFeePaidEvent(config: Omit<UseContractEventConfig<typeof alloABI, 'BaseFeePaid'>, 'abi' | 'eventName'> = {} as any) {
  return useContractEvent({ abi: alloABI, eventName: 'BaseFeePaid', ...config } as UseContractEventConfig<typeof alloABI, 'BaseFeePaid'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link alloABI}__ and `eventName` set to `"BaseFeeUpdated"`.
 */
export function useAlloBaseFeeUpdatedEvent(config: Omit<UseContractEventConfig<typeof alloABI, 'BaseFeeUpdated'>, 'abi' | 'eventName'> = {} as any) {
  return useContractEvent({ abi: alloABI, eventName: 'BaseFeeUpdated', ...config } as UseContractEventConfig<typeof alloABI, 'BaseFeeUpdated'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link alloABI}__ and `eventName` set to `"FeePercentageUpdated"`.
 */
export function useAlloFeePercentageUpdatedEvent(
  config: Omit<UseContractEventConfig<typeof alloABI, 'FeePercentageUpdated'>, 'abi' | 'eventName'> = {} as any
) {
  return useContractEvent({ abi: alloABI, eventName: 'FeePercentageUpdated', ...config } as UseContractEventConfig<
    typeof alloABI,
    'FeePercentageUpdated'
  >)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link alloABI}__ and `eventName` set to `"Initialized"`.
 */
export function useAlloInitializedEvent(config: Omit<UseContractEventConfig<typeof alloABI, 'Initialized'>, 'abi' | 'eventName'> = {} as any) {
  return useContractEvent({ abi: alloABI, eventName: 'Initialized', ...config } as UseContractEventConfig<typeof alloABI, 'Initialized'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link alloABI}__ and `eventName` set to `"OwnershipHandoverCanceled"`.
 */
export function useAlloOwnershipHandoverCanceledEvent(
  config: Omit<UseContractEventConfig<typeof alloABI, 'OwnershipHandoverCanceled'>, 'abi' | 'eventName'> = {} as any
) {
  return useContractEvent({ abi: alloABI, eventName: 'OwnershipHandoverCanceled', ...config } as UseContractEventConfig<
    typeof alloABI,
    'OwnershipHandoverCanceled'
  >)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link alloABI}__ and `eventName` set to `"OwnershipHandoverRequested"`.
 */
export function useAlloOwnershipHandoverRequestedEvent(
  config: Omit<UseContractEventConfig<typeof alloABI, 'OwnershipHandoverRequested'>, 'abi' | 'eventName'> = {} as any
) {
  return useContractEvent({ abi: alloABI, eventName: 'OwnershipHandoverRequested', ...config } as UseContractEventConfig<
    typeof alloABI,
    'OwnershipHandoverRequested'
  >)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link alloABI}__ and `eventName` set to `"OwnershipTransferred"`.
 */
export function useAlloOwnershipTransferredEvent(
  config: Omit<UseContractEventConfig<typeof alloABI, 'OwnershipTransferred'>, 'abi' | 'eventName'> = {} as any
) {
  return useContractEvent({ abi: alloABI, eventName: 'OwnershipTransferred', ...config } as UseContractEventConfig<
    typeof alloABI,
    'OwnershipTransferred'
  >)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link alloABI}__ and `eventName` set to `"PoolCreated"`.
 */
export function useAlloPoolCreatedEvent(config: Omit<UseContractEventConfig<typeof alloABI, 'PoolCreated'>, 'abi' | 'eventName'> = {} as any) {
  return useContractEvent({ abi: alloABI, eventName: 'PoolCreated', ...config } as UseContractEventConfig<typeof alloABI, 'PoolCreated'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link alloABI}__ and `eventName` set to `"PoolFunded"`.
 */
export function useAlloPoolFundedEvent(config: Omit<UseContractEventConfig<typeof alloABI, 'PoolFunded'>, 'abi' | 'eventName'> = {} as any) {
  return useContractEvent({ abi: alloABI, eventName: 'PoolFunded', ...config } as UseContractEventConfig<typeof alloABI, 'PoolFunded'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link alloABI}__ and `eventName` set to `"PoolMetadataUpdated"`.
 */
export function useAlloPoolMetadataUpdatedEvent(
  config: Omit<UseContractEventConfig<typeof alloABI, 'PoolMetadataUpdated'>, 'abi' | 'eventName'> = {} as any
) {
  return useContractEvent({ abi: alloABI, eventName: 'PoolMetadataUpdated', ...config } as UseContractEventConfig<
    typeof alloABI,
    'PoolMetadataUpdated'
  >)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link alloABI}__ and `eventName` set to `"RegistryUpdated"`.
 */
export function useAlloRegistryUpdatedEvent(
  config: Omit<UseContractEventConfig<typeof alloABI, 'RegistryUpdated'>, 'abi' | 'eventName'> = {} as any
) {
  return useContractEvent({ abi: alloABI, eventName: 'RegistryUpdated', ...config } as UseContractEventConfig<typeof alloABI, 'RegistryUpdated'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link alloABI}__ and `eventName` set to `"RoleAdminChanged"`.
 */
export function useAlloRoleAdminChangedEvent(
  config: Omit<UseContractEventConfig<typeof alloABI, 'RoleAdminChanged'>, 'abi' | 'eventName'> = {} as any
) {
  return useContractEvent({ abi: alloABI, eventName: 'RoleAdminChanged', ...config } as UseContractEventConfig<typeof alloABI, 'RoleAdminChanged'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link alloABI}__ and `eventName` set to `"RoleGranted"`.
 */
export function useAlloRoleGrantedEvent(config: Omit<UseContractEventConfig<typeof alloABI, 'RoleGranted'>, 'abi' | 'eventName'> = {} as any) {
  return useContractEvent({ abi: alloABI, eventName: 'RoleGranted', ...config } as UseContractEventConfig<typeof alloABI, 'RoleGranted'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link alloABI}__ and `eventName` set to `"RoleRevoked"`.
 */
export function useAlloRoleRevokedEvent(config: Omit<UseContractEventConfig<typeof alloABI, 'RoleRevoked'>, 'abi' | 'eventName'> = {} as any) {
  return useContractEvent({ abi: alloABI, eventName: 'RoleRevoked', ...config } as UseContractEventConfig<typeof alloABI, 'RoleRevoked'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link alloABI}__ and `eventName` set to `"StrategyApproved"`.
 */
export function useAlloStrategyApprovedEvent(
  config: Omit<UseContractEventConfig<typeof alloABI, 'StrategyApproved'>, 'abi' | 'eventName'> = {} as any
) {
  return useContractEvent({ abi: alloABI, eventName: 'StrategyApproved', ...config } as UseContractEventConfig<typeof alloABI, 'StrategyApproved'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link alloABI}__ and `eventName` set to `"StrategyRemoved"`.
 */
export function useAlloStrategyRemovedEvent(
  config: Omit<UseContractEventConfig<typeof alloABI, 'StrategyRemoved'>, 'abi' | 'eventName'> = {} as any
) {
  return useContractEvent({ abi: alloABI, eventName: 'StrategyRemoved', ...config } as UseContractEventConfig<typeof alloABI, 'StrategyRemoved'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link alloABI}__ and `eventName` set to `"TreasuryUpdated"`.
 */
export function useAlloTreasuryUpdatedEvent(
  config: Omit<UseContractEventConfig<typeof alloABI, 'TreasuryUpdated'>, 'abi' | 'eventName'> = {} as any
) {
  return useContractEvent({ abi: alloABI, eventName: 'TreasuryUpdated', ...config } as UseContractEventConfig<typeof alloABI, 'TreasuryUpdated'>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link registryABI}__.
 */
export function useRegistryRead<TFunctionName extends string, TSelectData = ReadContractResult<typeof registryABI, TFunctionName>>(
  config: Omit<UseContractReadConfig<typeof registryABI, TFunctionName, TSelectData>, 'abi'> = {} as any
) {
  return useContractRead({ abi: registryABI, ...config } as UseContractReadConfig<typeof registryABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link registryABI}__ and `functionName` set to `"ALLO_OWNER"`.
 */
export function useRegistryAlloOwner<TFunctionName extends 'ALLO_OWNER', TSelectData = ReadContractResult<typeof registryABI, TFunctionName>>(
  config: Omit<UseContractReadConfig<typeof registryABI, TFunctionName, TSelectData>, 'abi' | 'functionName'> = {} as any
) {
  return useContractRead({ abi: registryABI, functionName: 'ALLO_OWNER', ...config } as UseContractReadConfig<
    typeof registryABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link registryABI}__ and `functionName` set to `"DEFAULT_ADMIN_ROLE"`.
 */
export function useRegistryDefaultAdminRole<
  TFunctionName extends 'DEFAULT_ADMIN_ROLE',
  TSelectData = ReadContractResult<typeof registryABI, TFunctionName>
>(config: Omit<UseContractReadConfig<typeof registryABI, TFunctionName, TSelectData>, 'abi' | 'functionName'> = {} as any) {
  return useContractRead({ abi: registryABI, functionName: 'DEFAULT_ADMIN_ROLE', ...config } as UseContractReadConfig<
    typeof registryABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link registryABI}__ and `functionName` set to `"NATIVE"`.
 */
export function useRegistryNative<TFunctionName extends 'NATIVE', TSelectData = ReadContractResult<typeof registryABI, TFunctionName>>(
  config: Omit<UseContractReadConfig<typeof registryABI, TFunctionName, TSelectData>, 'abi' | 'functionName'> = {} as any
) {
  return useContractRead({ abi: registryABI, functionName: 'NATIVE', ...config } as UseContractReadConfig<
    typeof registryABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link registryABI}__ and `functionName` set to `"anchorToProfileId"`.
 */
export function useRegistryAnchorToProfileId<
  TFunctionName extends 'anchorToProfileId',
  TSelectData = ReadContractResult<typeof registryABI, TFunctionName>
>(config: Omit<UseContractReadConfig<typeof registryABI, TFunctionName, TSelectData>, 'abi' | 'functionName'> = {} as any) {
  return useContractRead({ abi: registryABI, functionName: 'anchorToProfileId', ...config } as UseContractReadConfig<
    typeof registryABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link registryABI}__ and `functionName` set to `"getProfileByAnchor"`.
 */
export function useRegistryGetProfileByAnchor<
  TFunctionName extends 'getProfileByAnchor',
  TSelectData = ReadContractResult<typeof registryABI, TFunctionName>
>(config: Omit<UseContractReadConfig<typeof registryABI, TFunctionName, TSelectData>, 'abi' | 'functionName'> = {} as any) {
  return useContractRead({ abi: registryABI, functionName: 'getProfileByAnchor', ...config } as UseContractReadConfig<
    typeof registryABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link registryABI}__ and `functionName` set to `"getProfileById"`.
 */
export function useRegistryGetProfileById<
  TFunctionName extends 'getProfileById',
  TSelectData = ReadContractResult<typeof registryABI, TFunctionName>
>(config: Omit<UseContractReadConfig<typeof registryABI, TFunctionName, TSelectData>, 'abi' | 'functionName'> = {} as any) {
  return useContractRead({ abi: registryABI, functionName: 'getProfileById', ...config } as UseContractReadConfig<
    typeof registryABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link registryABI}__ and `functionName` set to `"getRoleAdmin"`.
 */
export function useRegistryGetRoleAdmin<TFunctionName extends 'getRoleAdmin', TSelectData = ReadContractResult<typeof registryABI, TFunctionName>>(
  config: Omit<UseContractReadConfig<typeof registryABI, TFunctionName, TSelectData>, 'abi' | 'functionName'> = {} as any
) {
  return useContractRead({ abi: registryABI, functionName: 'getRoleAdmin', ...config } as UseContractReadConfig<
    typeof registryABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link registryABI}__ and `functionName` set to `"hasRole"`.
 */
export function useRegistryHasRole<TFunctionName extends 'hasRole', TSelectData = ReadContractResult<typeof registryABI, TFunctionName>>(
  config: Omit<UseContractReadConfig<typeof registryABI, TFunctionName, TSelectData>, 'abi' | 'functionName'> = {} as any
) {
  return useContractRead({ abi: registryABI, functionName: 'hasRole', ...config } as UseContractReadConfig<
    typeof registryABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link registryABI}__ and `functionName` set to `"isMemberOfProfile"`.
 */
export function useRegistryIsMemberOfProfile<
  TFunctionName extends 'isMemberOfProfile',
  TSelectData = ReadContractResult<typeof registryABI, TFunctionName>
>(config: Omit<UseContractReadConfig<typeof registryABI, TFunctionName, TSelectData>, 'abi' | 'functionName'> = {} as any) {
  return useContractRead({ abi: registryABI, functionName: 'isMemberOfProfile', ...config } as UseContractReadConfig<
    typeof registryABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link registryABI}__ and `functionName` set to `"isOwnerOfProfile"`.
 */
export function useRegistryIsOwnerOfProfile<
  TFunctionName extends 'isOwnerOfProfile',
  TSelectData = ReadContractResult<typeof registryABI, TFunctionName>
>(config: Omit<UseContractReadConfig<typeof registryABI, TFunctionName, TSelectData>, 'abi' | 'functionName'> = {} as any) {
  return useContractRead({ abi: registryABI, functionName: 'isOwnerOfProfile', ...config } as UseContractReadConfig<
    typeof registryABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link registryABI}__ and `functionName` set to `"isOwnerOrMemberOfProfile"`.
 */
export function useRegistryIsOwnerOrMemberOfProfile<
  TFunctionName extends 'isOwnerOrMemberOfProfile',
  TSelectData = ReadContractResult<typeof registryABI, TFunctionName>
>(config: Omit<UseContractReadConfig<typeof registryABI, TFunctionName, TSelectData>, 'abi' | 'functionName'> = {} as any) {
  return useContractRead({ abi: registryABI, functionName: 'isOwnerOrMemberOfProfile', ...config } as UseContractReadConfig<
    typeof registryABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link registryABI}__ and `functionName` set to `"profileIdToPendingOwner"`.
 */
export function useRegistryProfileIdToPendingOwner<
  TFunctionName extends 'profileIdToPendingOwner',
  TSelectData = ReadContractResult<typeof registryABI, TFunctionName>
>(config: Omit<UseContractReadConfig<typeof registryABI, TFunctionName, TSelectData>, 'abi' | 'functionName'> = {} as any) {
  return useContractRead({ abi: registryABI, functionName: 'profileIdToPendingOwner', ...config } as UseContractReadConfig<
    typeof registryABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link registryABI}__ and `functionName` set to `"profilesById"`.
 */
export function useRegistryProfilesById<TFunctionName extends 'profilesById', TSelectData = ReadContractResult<typeof registryABI, TFunctionName>>(
  config: Omit<UseContractReadConfig<typeof registryABI, TFunctionName, TSelectData>, 'abi' | 'functionName'> = {} as any
) {
  return useContractRead({ abi: registryABI, functionName: 'profilesById', ...config } as UseContractReadConfig<
    typeof registryABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link registryABI}__ and `functionName` set to `"supportsInterface"`.
 */
export function useRegistrySupportsInterface<
  TFunctionName extends 'supportsInterface',
  TSelectData = ReadContractResult<typeof registryABI, TFunctionName>
>(config: Omit<UseContractReadConfig<typeof registryABI, TFunctionName, TSelectData>, 'abi' | 'functionName'> = {} as any) {
  return useContractRead({ abi: registryABI, functionName: 'supportsInterface', ...config } as UseContractReadConfig<
    typeof registryABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link registryABI}__.
 */
export function useRegistryWrite<TFunctionName extends string, TMode extends WriteContractMode = undefined>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<PrepareWriteContractResult<typeof registryABI, string>['request']['abi'], TFunctionName, TMode>
    : UseContractWriteConfig<typeof registryABI, TFunctionName, TMode> & {
        abi?: never
      } = {} as any
) {
  return useContractWrite<typeof registryABI, TFunctionName, TMode>({ abi: registryABI, ...config } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link registryABI}__ and `functionName` set to `"acceptProfileOwnership"`.
 */
export function useRegistryAcceptProfileOwnership<TMode extends WriteContractMode = undefined>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<typeof registryABI, 'acceptProfileOwnership'>['request']['abi'],
        'acceptProfileOwnership',
        TMode
      > & { functionName?: 'acceptProfileOwnership' }
    : UseContractWriteConfig<typeof registryABI, 'acceptProfileOwnership', TMode> & {
        abi?: never
        functionName?: 'acceptProfileOwnership'
      } = {} as any
) {
  return useContractWrite<typeof registryABI, 'acceptProfileOwnership', TMode>({
    abi: registryABI,
    functionName: 'acceptProfileOwnership',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link registryABI}__ and `functionName` set to `"addMembers"`.
 */
export function useRegistryAddMembers<TMode extends WriteContractMode = undefined>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<PrepareWriteContractResult<typeof registryABI, 'addMembers'>['request']['abi'], 'addMembers', TMode> & {
        functionName?: 'addMembers'
      }
    : UseContractWriteConfig<typeof registryABI, 'addMembers', TMode> & {
        abi?: never
        functionName?: 'addMembers'
      } = {} as any
) {
  return useContractWrite<typeof registryABI, 'addMembers', TMode>({ abi: registryABI, functionName: 'addMembers', ...config } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link registryABI}__ and `functionName` set to `"createProfile"`.
 */
export function useRegistryCreateProfile<TMode extends WriteContractMode = undefined>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<PrepareWriteContractResult<typeof registryABI, 'createProfile'>['request']['abi'], 'createProfile', TMode> & {
        functionName?: 'createProfile'
      }
    : UseContractWriteConfig<typeof registryABI, 'createProfile', TMode> & {
        abi?: never
        functionName?: 'createProfile'
      } = {} as any
) {
  return useContractWrite<typeof registryABI, 'createProfile', TMode>({ abi: registryABI, functionName: 'createProfile', ...config } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link registryABI}__ and `functionName` set to `"grantRole"`.
 */
export function useRegistryGrantRole<TMode extends WriteContractMode = undefined>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<PrepareWriteContractResult<typeof registryABI, 'grantRole'>['request']['abi'], 'grantRole', TMode> & {
        functionName?: 'grantRole'
      }
    : UseContractWriteConfig<typeof registryABI, 'grantRole', TMode> & {
        abi?: never
        functionName?: 'grantRole'
      } = {} as any
) {
  return useContractWrite<typeof registryABI, 'grantRole', TMode>({ abi: registryABI, functionName: 'grantRole', ...config } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link registryABI}__ and `functionName` set to `"recoverFunds"`.
 */
export function useRegistryRecoverFunds<TMode extends WriteContractMode = undefined>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<PrepareWriteContractResult<typeof registryABI, 'recoverFunds'>['request']['abi'], 'recoverFunds', TMode> & {
        functionName?: 'recoverFunds'
      }
    : UseContractWriteConfig<typeof registryABI, 'recoverFunds', TMode> & {
        abi?: never
        functionName?: 'recoverFunds'
      } = {} as any
) {
  return useContractWrite<typeof registryABI, 'recoverFunds', TMode>({ abi: registryABI, functionName: 'recoverFunds', ...config } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link registryABI}__ and `functionName` set to `"removeMembers"`.
 */
export function useRegistryRemoveMembers<TMode extends WriteContractMode = undefined>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<PrepareWriteContractResult<typeof registryABI, 'removeMembers'>['request']['abi'], 'removeMembers', TMode> & {
        functionName?: 'removeMembers'
      }
    : UseContractWriteConfig<typeof registryABI, 'removeMembers', TMode> & {
        abi?: never
        functionName?: 'removeMembers'
      } = {} as any
) {
  return useContractWrite<typeof registryABI, 'removeMembers', TMode>({ abi: registryABI, functionName: 'removeMembers', ...config } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link registryABI}__ and `functionName` set to `"renounceRole"`.
 */
export function useRegistryRenounceRole<TMode extends WriteContractMode = undefined>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<PrepareWriteContractResult<typeof registryABI, 'renounceRole'>['request']['abi'], 'renounceRole', TMode> & {
        functionName?: 'renounceRole'
      }
    : UseContractWriteConfig<typeof registryABI, 'renounceRole', TMode> & {
        abi?: never
        functionName?: 'renounceRole'
      } = {} as any
) {
  return useContractWrite<typeof registryABI, 'renounceRole', TMode>({ abi: registryABI, functionName: 'renounceRole', ...config } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link registryABI}__ and `functionName` set to `"revokeRole"`.
 */
export function useRegistryRevokeRole<TMode extends WriteContractMode = undefined>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<PrepareWriteContractResult<typeof registryABI, 'revokeRole'>['request']['abi'], 'revokeRole', TMode> & {
        functionName?: 'revokeRole'
      }
    : UseContractWriteConfig<typeof registryABI, 'revokeRole', TMode> & {
        abi?: never
        functionName?: 'revokeRole'
      } = {} as any
) {
  return useContractWrite<typeof registryABI, 'revokeRole', TMode>({ abi: registryABI, functionName: 'revokeRole', ...config } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link registryABI}__ and `functionName` set to `"updateProfileMetadata"`.
 */
export function useRegistryUpdateProfileMetadata<TMode extends WriteContractMode = undefined>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<typeof registryABI, 'updateProfileMetadata'>['request']['abi'],
        'updateProfileMetadata',
        TMode
      > & { functionName?: 'updateProfileMetadata' }
    : UseContractWriteConfig<typeof registryABI, 'updateProfileMetadata', TMode> & {
        abi?: never
        functionName?: 'updateProfileMetadata'
      } = {} as any
) {
  return useContractWrite<typeof registryABI, 'updateProfileMetadata', TMode>({
    abi: registryABI,
    functionName: 'updateProfileMetadata',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link registryABI}__ and `functionName` set to `"updateProfileName"`.
 */
export function useRegistryUpdateProfileName<TMode extends WriteContractMode = undefined>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<PrepareWriteContractResult<typeof registryABI, 'updateProfileName'>['request']['abi'], 'updateProfileName', TMode> & {
        functionName?: 'updateProfileName'
      }
    : UseContractWriteConfig<typeof registryABI, 'updateProfileName', TMode> & {
        abi?: never
        functionName?: 'updateProfileName'
      } = {} as any
) {
  return useContractWrite<typeof registryABI, 'updateProfileName', TMode>({ abi: registryABI, functionName: 'updateProfileName', ...config } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link registryABI}__ and `functionName` set to `"updateProfilePendingOwner"`.
 */
export function useRegistryUpdateProfilePendingOwner<TMode extends WriteContractMode = undefined>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<typeof registryABI, 'updateProfilePendingOwner'>['request']['abi'],
        'updateProfilePendingOwner',
        TMode
      > & { functionName?: 'updateProfilePendingOwner' }
    : UseContractWriteConfig<typeof registryABI, 'updateProfilePendingOwner', TMode> & {
        abi?: never
        functionName?: 'updateProfilePendingOwner'
      } = {} as any
) {
  return useContractWrite<typeof registryABI, 'updateProfilePendingOwner', TMode>({
    abi: registryABI,
    functionName: 'updateProfilePendingOwner',
    ...config,
  } as any)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link registryABI}__.
 */
export function usePrepareRegistryWrite<TFunctionName extends string>(
  config: Omit<UsePrepareContractWriteConfig<typeof registryABI, TFunctionName>, 'abi'> = {} as any
) {
  return usePrepareContractWrite({ abi: registryABI, ...config } as UsePrepareContractWriteConfig<typeof registryABI, TFunctionName>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link registryABI}__ and `functionName` set to `"acceptProfileOwnership"`.
 */
export function usePrepareRegistryAcceptProfileOwnership(
  config: Omit<UsePrepareContractWriteConfig<typeof registryABI, 'acceptProfileOwnership'>, 'abi' | 'functionName'> = {} as any
) {
  return usePrepareContractWrite({ abi: registryABI, functionName: 'acceptProfileOwnership', ...config } as UsePrepareContractWriteConfig<
    typeof registryABI,
    'acceptProfileOwnership'
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link registryABI}__ and `functionName` set to `"addMembers"`.
 */
export function usePrepareRegistryAddMembers(
  config: Omit<UsePrepareContractWriteConfig<typeof registryABI, 'addMembers'>, 'abi' | 'functionName'> = {} as any
) {
  return usePrepareContractWrite({ abi: registryABI, functionName: 'addMembers', ...config } as UsePrepareContractWriteConfig<
    typeof registryABI,
    'addMembers'
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link registryABI}__ and `functionName` set to `"createProfile"`.
 */
export function usePrepareRegistryCreateProfile(
  config: Omit<UsePrepareContractWriteConfig<typeof registryABI, 'createProfile'>, 'abi' | 'functionName'> = {} as any
) {
  return usePrepareContractWrite({ abi: registryABI, functionName: 'createProfile', ...config } as UsePrepareContractWriteConfig<
    typeof registryABI,
    'createProfile'
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link registryABI}__ and `functionName` set to `"grantRole"`.
 */
export function usePrepareRegistryGrantRole(
  config: Omit<UsePrepareContractWriteConfig<typeof registryABI, 'grantRole'>, 'abi' | 'functionName'> = {} as any
) {
  return usePrepareContractWrite({ abi: registryABI, functionName: 'grantRole', ...config } as UsePrepareContractWriteConfig<
    typeof registryABI,
    'grantRole'
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link registryABI}__ and `functionName` set to `"recoverFunds"`.
 */
export function usePrepareRegistryRecoverFunds(
  config: Omit<UsePrepareContractWriteConfig<typeof registryABI, 'recoverFunds'>, 'abi' | 'functionName'> = {} as any
) {
  return usePrepareContractWrite({ abi: registryABI, functionName: 'recoverFunds', ...config } as UsePrepareContractWriteConfig<
    typeof registryABI,
    'recoverFunds'
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link registryABI}__ and `functionName` set to `"removeMembers"`.
 */
export function usePrepareRegistryRemoveMembers(
  config: Omit<UsePrepareContractWriteConfig<typeof registryABI, 'removeMembers'>, 'abi' | 'functionName'> = {} as any
) {
  return usePrepareContractWrite({ abi: registryABI, functionName: 'removeMembers', ...config } as UsePrepareContractWriteConfig<
    typeof registryABI,
    'removeMembers'
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link registryABI}__ and `functionName` set to `"renounceRole"`.
 */
export function usePrepareRegistryRenounceRole(
  config: Omit<UsePrepareContractWriteConfig<typeof registryABI, 'renounceRole'>, 'abi' | 'functionName'> = {} as any
) {
  return usePrepareContractWrite({ abi: registryABI, functionName: 'renounceRole', ...config } as UsePrepareContractWriteConfig<
    typeof registryABI,
    'renounceRole'
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link registryABI}__ and `functionName` set to `"revokeRole"`.
 */
export function usePrepareRegistryRevokeRole(
  config: Omit<UsePrepareContractWriteConfig<typeof registryABI, 'revokeRole'>, 'abi' | 'functionName'> = {} as any
) {
  return usePrepareContractWrite({ abi: registryABI, functionName: 'revokeRole', ...config } as UsePrepareContractWriteConfig<
    typeof registryABI,
    'revokeRole'
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link registryABI}__ and `functionName` set to `"updateProfileMetadata"`.
 */
export function usePrepareRegistryUpdateProfileMetadata(
  config: Omit<UsePrepareContractWriteConfig<typeof registryABI, 'updateProfileMetadata'>, 'abi' | 'functionName'> = {} as any
) {
  return usePrepareContractWrite({ abi: registryABI, functionName: 'updateProfileMetadata', ...config } as UsePrepareContractWriteConfig<
    typeof registryABI,
    'updateProfileMetadata'
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link registryABI}__ and `functionName` set to `"updateProfileName"`.
 */
export function usePrepareRegistryUpdateProfileName(
  config: Omit<UsePrepareContractWriteConfig<typeof registryABI, 'updateProfileName'>, 'abi' | 'functionName'> = {} as any
) {
  return usePrepareContractWrite({ abi: registryABI, functionName: 'updateProfileName', ...config } as UsePrepareContractWriteConfig<
    typeof registryABI,
    'updateProfileName'
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link registryABI}__ and `functionName` set to `"updateProfilePendingOwner"`.
 */
export function usePrepareRegistryUpdateProfilePendingOwner(
  config: Omit<UsePrepareContractWriteConfig<typeof registryABI, 'updateProfilePendingOwner'>, 'abi' | 'functionName'> = {} as any
) {
  return usePrepareContractWrite({ abi: registryABI, functionName: 'updateProfilePendingOwner', ...config } as UsePrepareContractWriteConfig<
    typeof registryABI,
    'updateProfilePendingOwner'
  >)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link registryABI}__.
 */
export function useRegistryEvent<TEventName extends string>(config: Omit<UseContractEventConfig<typeof registryABI, TEventName>, 'abi'> = {} as any) {
  return useContractEvent({ abi: registryABI, ...config } as UseContractEventConfig<typeof registryABI, TEventName>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link registryABI}__ and `eventName` set to `"ProfileCreated"`.
 */
export function useRegistryProfileCreatedEvent(
  config: Omit<UseContractEventConfig<typeof registryABI, 'ProfileCreated'>, 'abi' | 'eventName'> = {} as any
) {
  return useContractEvent({ abi: registryABI, eventName: 'ProfileCreated', ...config } as UseContractEventConfig<
    typeof registryABI,
    'ProfileCreated'
  >)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link registryABI}__ and `eventName` set to `"ProfileMetadataUpdated"`.
 */
export function useRegistryProfileMetadataUpdatedEvent(
  config: Omit<UseContractEventConfig<typeof registryABI, 'ProfileMetadataUpdated'>, 'abi' | 'eventName'> = {} as any
) {
  return useContractEvent({ abi: registryABI, eventName: 'ProfileMetadataUpdated', ...config } as UseContractEventConfig<
    typeof registryABI,
    'ProfileMetadataUpdated'
  >)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link registryABI}__ and `eventName` set to `"ProfileNameUpdated"`.
 */
export function useRegistryProfileNameUpdatedEvent(
  config: Omit<UseContractEventConfig<typeof registryABI, 'ProfileNameUpdated'>, 'abi' | 'eventName'> = {} as any
) {
  return useContractEvent({ abi: registryABI, eventName: 'ProfileNameUpdated', ...config } as UseContractEventConfig<
    typeof registryABI,
    'ProfileNameUpdated'
  >)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link registryABI}__ and `eventName` set to `"ProfileOwnerUpdated"`.
 */
export function useRegistryProfileOwnerUpdatedEvent(
  config: Omit<UseContractEventConfig<typeof registryABI, 'ProfileOwnerUpdated'>, 'abi' | 'eventName'> = {} as any
) {
  return useContractEvent({ abi: registryABI, eventName: 'ProfileOwnerUpdated', ...config } as UseContractEventConfig<
    typeof registryABI,
    'ProfileOwnerUpdated'
  >)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link registryABI}__ and `eventName` set to `"ProfilePendingOwnerUpdated"`.
 */
export function useRegistryProfilePendingOwnerUpdatedEvent(
  config: Omit<UseContractEventConfig<typeof registryABI, 'ProfilePendingOwnerUpdated'>, 'abi' | 'eventName'> = {} as any
) {
  return useContractEvent({ abi: registryABI, eventName: 'ProfilePendingOwnerUpdated', ...config } as UseContractEventConfig<
    typeof registryABI,
    'ProfilePendingOwnerUpdated'
  >)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link registryABI}__ and `eventName` set to `"RoleAdminChanged"`.
 */
export function useRegistryRoleAdminChangedEvent(
  config: Omit<UseContractEventConfig<typeof registryABI, 'RoleAdminChanged'>, 'abi' | 'eventName'> = {} as any
) {
  return useContractEvent({ abi: registryABI, eventName: 'RoleAdminChanged', ...config } as UseContractEventConfig<
    typeof registryABI,
    'RoleAdminChanged'
  >)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link registryABI}__ and `eventName` set to `"RoleGranted"`.
 */
export function useRegistryRoleGrantedEvent(
  config: Omit<UseContractEventConfig<typeof registryABI, 'RoleGranted'>, 'abi' | 'eventName'> = {} as any
) {
  return useContractEvent({ abi: registryABI, eventName: 'RoleGranted', ...config } as UseContractEventConfig<typeof registryABI, 'RoleGranted'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link registryABI}__ and `eventName` set to `"RoleRevoked"`.
 */
export function useRegistryRoleRevokedEvent(
  config: Omit<UseContractEventConfig<typeof registryABI, 'RoleRevoked'>, 'abi' | 'eventName'> = {} as any
) {
  return useContractEvent({ abi: registryABI, eventName: 'RoleRevoked', ...config } as UseContractEventConfig<typeof registryABI, 'RoleRevoked'>)
}
