// Generated by @wagmi/cli@1.1.0 on 8/24/2023 at 7:35:30 PM
import {
  useContractEvent,
  UseContractEventConfig,
  useContractRead,
  UseContractReadConfig,
  useContractWrite,
  UseContractWriteConfig,
  usePrepareContractWrite,
  UsePrepareContractWriteConfig,
} from "wagmi"
import {
  PrepareWriteContractResult,
  ReadContractResult,
  WriteContractMode,
} from "wagmi/actions"

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// ui-pool-data-provider
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

export const uiPoolDataProviderABI = [
  {
    stateMutability: "nonpayable",
    type: "constructor",
    inputs: [
      {
        name: "_networkBaseTokenPriceInUsdProxyAggregator",
        internalType: "contract IEACAggregatorProxy",
        type: "address",
      },
      {
        name: "_marketReferenceCurrencyPriceInUsdProxyAggregator",
        internalType: "contract IEACAggregatorProxy",
        type: "address",
      },
    ],
  },
  {
    stateMutability: "view",
    type: "function",
    inputs: [],
    name: "ETH_CURRENCY_UNIT",
    outputs: [{ name: "", internalType: "uint256", type: "uint256" }],
  },
  {
    stateMutability: "view",
    type: "function",
    inputs: [],
    name: "MKR_ADDRESS",
    outputs: [{ name: "", internalType: "address", type: "address" }],
  },
  {
    stateMutability: "pure",
    type: "function",
    inputs: [{ name: "_bytes32", internalType: "bytes32", type: "bytes32" }],
    name: "bytes32ToString",
    outputs: [{ name: "", internalType: "string", type: "string" }],
  },
  {
    stateMutability: "view",
    type: "function",
    inputs: [
      {
        name: "provider",
        internalType: "contract IPoolAddressesProvider",
        type: "address",
      },
    ],
    name: "getReservesData",
    outputs: [
      {
        name: "",
        internalType: "struct IUiPoolDataProviderV3.AggregatedReserveData[]",
        type: "tuple[]",
        components: [
          { name: "underlyingAsset", internalType: "address", type: "address" },
          { name: "name", internalType: "string", type: "string" },
          { name: "symbol", internalType: "string", type: "string" },
          { name: "decimals", internalType: "uint256", type: "uint256" },
          {
            name: "baseLTVasCollateral",
            internalType: "uint256",
            type: "uint256",
          },
          {
            name: "reserveLiquidationThreshold",
            internalType: "uint256",
            type: "uint256",
          },
          {
            name: "reserveLiquidationBonus",
            internalType: "uint256",
            type: "uint256",
          },
          { name: "reserveFactor", internalType: "uint256", type: "uint256" },
          {
            name: "usageAsCollateralEnabled",
            internalType: "bool",
            type: "bool",
          },
          { name: "borrowingEnabled", internalType: "bool", type: "bool" },
          {
            name: "stableBorrowRateEnabled",
            internalType: "bool",
            type: "bool",
          },
          { name: "isActive", internalType: "bool", type: "bool" },
          { name: "isFrozen", internalType: "bool", type: "bool" },
          { name: "liquidityIndex", internalType: "uint128", type: "uint128" },
          {
            name: "variableBorrowIndex",
            internalType: "uint128",
            type: "uint128",
          },
          { name: "liquidityRate", internalType: "uint128", type: "uint128" },
          {
            name: "variableBorrowRate",
            internalType: "uint128",
            type: "uint128",
          },
          {
            name: "stableBorrowRate",
            internalType: "uint128",
            type: "uint128",
          },
          {
            name: "lastUpdateTimestamp",
            internalType: "uint40",
            type: "uint40",
          },
          { name: "aTokenAddress", internalType: "address", type: "address" },
          {
            name: "stableDebtTokenAddress",
            internalType: "address",
            type: "address",
          },
          {
            name: "variableDebtTokenAddress",
            internalType: "address",
            type: "address",
          },
          {
            name: "interestRateStrategyAddress",
            internalType: "address",
            type: "address",
          },
          {
            name: "availableLiquidity",
            internalType: "uint256",
            type: "uint256",
          },
          {
            name: "totalPrincipalStableDebt",
            internalType: "uint256",
            type: "uint256",
          },
          {
            name: "averageStableRate",
            internalType: "uint256",
            type: "uint256",
          },
          {
            name: "stableDebtLastUpdateTimestamp",
            internalType: "uint256",
            type: "uint256",
          },
          {
            name: "totalScaledVariableDebt",
            internalType: "uint256",
            type: "uint256",
          },
          {
            name: "priceInMarketReferenceCurrency",
            internalType: "uint256",
            type: "uint256",
          },
          { name: "priceOracle", internalType: "address", type: "address" },
          {
            name: "variableRateSlope1",
            internalType: "uint256",
            type: "uint256",
          },
          {
            name: "variableRateSlope2",
            internalType: "uint256",
            type: "uint256",
          },
          {
            name: "stableRateSlope1",
            internalType: "uint256",
            type: "uint256",
          },
          {
            name: "stableRateSlope2",
            internalType: "uint256",
            type: "uint256",
          },
          {
            name: "baseStableBorrowRate",
            internalType: "uint256",
            type: "uint256",
          },
          {
            name: "baseVariableBorrowRate",
            internalType: "uint256",
            type: "uint256",
          },
          {
            name: "optimalUsageRatio",
            internalType: "uint256",
            type: "uint256",
          },
          { name: "isPaused", internalType: "bool", type: "bool" },
          { name: "isSiloedBorrowing", internalType: "bool", type: "bool" },
          {
            name: "accruedToTreasury",
            internalType: "uint128",
            type: "uint128",
          },
          { name: "unbacked", internalType: "uint128", type: "uint128" },
          {
            name: "isolationModeTotalDebt",
            internalType: "uint128",
            type: "uint128",
          },
          { name: "flashLoanEnabled", internalType: "bool", type: "bool" },
          { name: "debtCeiling", internalType: "uint256", type: "uint256" },
          {
            name: "debtCeilingDecimals",
            internalType: "uint256",
            type: "uint256",
          },
          { name: "eModeCategoryId", internalType: "uint8", type: "uint8" },
          { name: "borrowCap", internalType: "uint256", type: "uint256" },
          { name: "supplyCap", internalType: "uint256", type: "uint256" },
          { name: "eModeLtv", internalType: "uint16", type: "uint16" },
          {
            name: "eModeLiquidationThreshold",
            internalType: "uint16",
            type: "uint16",
          },
          {
            name: "eModeLiquidationBonus",
            internalType: "uint16",
            type: "uint16",
          },
          {
            name: "eModePriceSource",
            internalType: "address",
            type: "address",
          },
          { name: "eModeLabel", internalType: "string", type: "string" },
          { name: "borrowableInIsolation", internalType: "bool", type: "bool" },
        ],
      },
      {
        name: "",
        internalType: "struct IUiPoolDataProviderV3.BaseCurrencyInfo",
        type: "tuple",
        components: [
          {
            name: "marketReferenceCurrencyUnit",
            internalType: "uint256",
            type: "uint256",
          },
          {
            name: "marketReferenceCurrencyPriceInUsd",
            internalType: "int256",
            type: "int256",
          },
          {
            name: "networkBaseTokenPriceInUsd",
            internalType: "int256",
            type: "int256",
          },
          {
            name: "networkBaseTokenPriceDecimals",
            internalType: "uint8",
            type: "uint8",
          },
        ],
      },
    ],
  },
  {
    stateMutability: "view",
    type: "function",
    inputs: [
      {
        name: "provider",
        internalType: "contract IPoolAddressesProvider",
        type: "address",
      },
    ],
    name: "getReservesList",
    outputs: [{ name: "", internalType: "address[]", type: "address[]" }],
  },
  {
    stateMutability: "view",
    type: "function",
    inputs: [
      {
        name: "provider",
        internalType: "contract IPoolAddressesProvider",
        type: "address",
      },
      { name: "user", internalType: "address", type: "address" },
    ],
    name: "getUserReservesData",
    outputs: [
      {
        name: "",
        internalType: "struct IUiPoolDataProviderV3.UserReserveData[]",
        type: "tuple[]",
        components: [
          { name: "underlyingAsset", internalType: "address", type: "address" },
          {
            name: "scaledATokenBalance",
            internalType: "uint256",
            type: "uint256",
          },
          {
            name: "usageAsCollateralEnabledOnUser",
            internalType: "bool",
            type: "bool",
          },
          {
            name: "stableBorrowRate",
            internalType: "uint256",
            type: "uint256",
          },
          {
            name: "scaledVariableDebt",
            internalType: "uint256",
            type: "uint256",
          },
          {
            name: "principalStableDebt",
            internalType: "uint256",
            type: "uint256",
          },
          {
            name: "stableBorrowLastUpdateTimestamp",
            internalType: "uint256",
            type: "uint256",
          },
        ],
      },
      { name: "", internalType: "uint8", type: "uint8" },
    ],
  },
  {
    stateMutability: "view",
    type: "function",
    inputs: [],
    name: "marketReferenceCurrencyPriceInUsdProxyAggregator",
    outputs: [
      {
        name: "",
        internalType: "contract IEACAggregatorProxy",
        type: "address",
      },
    ],
  },
  {
    stateMutability: "view",
    type: "function",
    inputs: [],
    name: "networkBaseTokenPriceInUsdProxyAggregator",
    outputs: [
      {
        name: "",
        internalType: "contract IEACAggregatorProxy",
        type: "address",
      },
    ],
  },
] as const

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// pool
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

export const poolABI = [
  {
    stateMutability: "nonpayable",
    type: "constructor",
    inputs: [
      {
        name: "provider",
        internalType: "contract IPoolAddressesProvider",
        type: "address",
      },
    ],
  },
  {
    type: "event",
    anonymous: false,
    inputs: [
      {
        name: "reserve",
        internalType: "address",
        type: "address",
        indexed: true,
      },
      {
        name: "backer",
        internalType: "address",
        type: "address",
        indexed: true,
      },
      {
        name: "amount",
        internalType: "uint256",
        type: "uint256",
        indexed: false,
      },
      { name: "fee", internalType: "uint256", type: "uint256", indexed: false },
    ],
    name: "BackUnbacked",
  },
  {
    type: "event",
    anonymous: false,
    inputs: [
      {
        name: "reserve",
        internalType: "address",
        type: "address",
        indexed: true,
      },
      {
        name: "user",
        internalType: "address",
        type: "address",
        indexed: false,
      },
      {
        name: "onBehalfOf",
        internalType: "address",
        type: "address",
        indexed: true,
      },
      {
        name: "amount",
        internalType: "uint256",
        type: "uint256",
        indexed: false,
      },
      {
        name: "interestRateMode",
        internalType: "enum DataTypes.InterestRateMode",
        type: "uint8",
        indexed: false,
      },
      {
        name: "borrowRate",
        internalType: "uint256",
        type: "uint256",
        indexed: false,
      },
      {
        name: "referralCode",
        internalType: "uint16",
        type: "uint16",
        indexed: true,
      },
    ],
    name: "Borrow",
  },
  {
    type: "event",
    anonymous: false,
    inputs: [
      {
        name: "target",
        internalType: "address",
        type: "address",
        indexed: true,
      },
      {
        name: "initiator",
        internalType: "address",
        type: "address",
        indexed: false,
      },
      {
        name: "asset",
        internalType: "address",
        type: "address",
        indexed: true,
      },
      {
        name: "amount",
        internalType: "uint256",
        type: "uint256",
        indexed: false,
      },
      {
        name: "interestRateMode",
        internalType: "enum DataTypes.InterestRateMode",
        type: "uint8",
        indexed: false,
      },
      {
        name: "premium",
        internalType: "uint256",
        type: "uint256",
        indexed: false,
      },
      {
        name: "referralCode",
        internalType: "uint16",
        type: "uint16",
        indexed: true,
      },
    ],
    name: "FlashLoan",
  },
  {
    type: "event",
    anonymous: false,
    inputs: [
      {
        name: "asset",
        internalType: "address",
        type: "address",
        indexed: true,
      },
      {
        name: "totalDebt",
        internalType: "uint256",
        type: "uint256",
        indexed: false,
      },
    ],
    name: "IsolationModeTotalDebtUpdated",
  },
  {
    type: "event",
    anonymous: false,
    inputs: [
      {
        name: "collateralAsset",
        internalType: "address",
        type: "address",
        indexed: true,
      },
      {
        name: "debtAsset",
        internalType: "address",
        type: "address",
        indexed: true,
      },
      { name: "user", internalType: "address", type: "address", indexed: true },
      {
        name: "debtToCover",
        internalType: "uint256",
        type: "uint256",
        indexed: false,
      },
      {
        name: "liquidatedCollateralAmount",
        internalType: "uint256",
        type: "uint256",
        indexed: false,
      },
      {
        name: "liquidator",
        internalType: "address",
        type: "address",
        indexed: false,
      },
      {
        name: "receiveAToken",
        internalType: "bool",
        type: "bool",
        indexed: false,
      },
    ],
    name: "LiquidationCall",
  },
  {
    type: "event",
    anonymous: false,
    inputs: [
      {
        name: "reserve",
        internalType: "address",
        type: "address",
        indexed: true,
      },
      {
        name: "user",
        internalType: "address",
        type: "address",
        indexed: false,
      },
      {
        name: "onBehalfOf",
        internalType: "address",
        type: "address",
        indexed: true,
      },
      {
        name: "amount",
        internalType: "uint256",
        type: "uint256",
        indexed: false,
      },
      {
        name: "referralCode",
        internalType: "uint16",
        type: "uint16",
        indexed: true,
      },
    ],
    name: "MintUnbacked",
  },
  {
    type: "event",
    anonymous: false,
    inputs: [
      {
        name: "reserve",
        internalType: "address",
        type: "address",
        indexed: true,
      },
      {
        name: "amountMinted",
        internalType: "uint256",
        type: "uint256",
        indexed: false,
      },
    ],
    name: "MintedToTreasury",
  },
  {
    type: "event",
    anonymous: false,
    inputs: [
      {
        name: "reserve",
        internalType: "address",
        type: "address",
        indexed: true,
      },
      { name: "user", internalType: "address", type: "address", indexed: true },
    ],
    name: "RebalanceStableBorrowRate",
  },
  {
    type: "event",
    anonymous: false,
    inputs: [
      {
        name: "reserve",
        internalType: "address",
        type: "address",
        indexed: true,
      },
      { name: "user", internalType: "address", type: "address", indexed: true },
      {
        name: "repayer",
        internalType: "address",
        type: "address",
        indexed: true,
      },
      {
        name: "amount",
        internalType: "uint256",
        type: "uint256",
        indexed: false,
      },
      {
        name: "useATokens",
        internalType: "bool",
        type: "bool",
        indexed: false,
      },
    ],
    name: "Repay",
  },
  {
    type: "event",
    anonymous: false,
    inputs: [
      {
        name: "reserve",
        internalType: "address",
        type: "address",
        indexed: true,
      },
      {
        name: "liquidityRate",
        internalType: "uint256",
        type: "uint256",
        indexed: false,
      },
      {
        name: "stableBorrowRate",
        internalType: "uint256",
        type: "uint256",
        indexed: false,
      },
      {
        name: "variableBorrowRate",
        internalType: "uint256",
        type: "uint256",
        indexed: false,
      },
      {
        name: "liquidityIndex",
        internalType: "uint256",
        type: "uint256",
        indexed: false,
      },
      {
        name: "variableBorrowIndex",
        internalType: "uint256",
        type: "uint256",
        indexed: false,
      },
    ],
    name: "ReserveDataUpdated",
  },
  {
    type: "event",
    anonymous: false,
    inputs: [
      {
        name: "reserve",
        internalType: "address",
        type: "address",
        indexed: true,
      },
      { name: "user", internalType: "address", type: "address", indexed: true },
    ],
    name: "ReserveUsedAsCollateralDisabled",
  },
  {
    type: "event",
    anonymous: false,
    inputs: [
      {
        name: "reserve",
        internalType: "address",
        type: "address",
        indexed: true,
      },
      { name: "user", internalType: "address", type: "address", indexed: true },
    ],
    name: "ReserveUsedAsCollateralEnabled",
  },
  {
    type: "event",
    anonymous: false,
    inputs: [
      {
        name: "reserve",
        internalType: "address",
        type: "address",
        indexed: true,
      },
      {
        name: "user",
        internalType: "address",
        type: "address",
        indexed: false,
      },
      {
        name: "onBehalfOf",
        internalType: "address",
        type: "address",
        indexed: true,
      },
      {
        name: "amount",
        internalType: "uint256",
        type: "uint256",
        indexed: false,
      },
      {
        name: "referralCode",
        internalType: "uint16",
        type: "uint16",
        indexed: true,
      },
    ],
    name: "Supply",
  },
  {
    type: "event",
    anonymous: false,
    inputs: [
      {
        name: "reserve",
        internalType: "address",
        type: "address",
        indexed: true,
      },
      { name: "user", internalType: "address", type: "address", indexed: true },
      {
        name: "interestRateMode",
        internalType: "enum DataTypes.InterestRateMode",
        type: "uint8",
        indexed: false,
      },
    ],
    name: "SwapBorrowRateMode",
  },
  {
    type: "event",
    anonymous: false,
    inputs: [
      { name: "user", internalType: "address", type: "address", indexed: true },
      {
        name: "categoryId",
        internalType: "uint8",
        type: "uint8",
        indexed: false,
      },
    ],
    name: "UserEModeSet",
  },
  {
    type: "event",
    anonymous: false,
    inputs: [
      {
        name: "reserve",
        internalType: "address",
        type: "address",
        indexed: true,
      },
      { name: "user", internalType: "address", type: "address", indexed: true },
      { name: "to", internalType: "address", type: "address", indexed: true },
      {
        name: "amount",
        internalType: "uint256",
        type: "uint256",
        indexed: false,
      },
    ],
    name: "Withdraw",
  },
  {
    stateMutability: "view",
    type: "function",
    inputs: [],
    name: "ADDRESSES_PROVIDER",
    outputs: [
      {
        name: "",
        internalType: "contract IPoolAddressesProvider",
        type: "address",
      },
    ],
  },
  {
    stateMutability: "view",
    type: "function",
    inputs: [],
    name: "BRIDGE_PROTOCOL_FEE",
    outputs: [{ name: "", internalType: "uint256", type: "uint256" }],
  },
  {
    stateMutability: "view",
    type: "function",
    inputs: [],
    name: "FLASHLOAN_PREMIUM_TOTAL",
    outputs: [{ name: "", internalType: "uint128", type: "uint128" }],
  },
  {
    stateMutability: "view",
    type: "function",
    inputs: [],
    name: "FLASHLOAN_PREMIUM_TO_PROTOCOL",
    outputs: [{ name: "", internalType: "uint128", type: "uint128" }],
  },
  {
    stateMutability: "view",
    type: "function",
    inputs: [],
    name: "MAX_NUMBER_RESERVES",
    outputs: [{ name: "", internalType: "uint16", type: "uint16" }],
  },
  {
    stateMutability: "view",
    type: "function",
    inputs: [],
    name: "MAX_STABLE_RATE_BORROW_SIZE_PERCENT",
    outputs: [{ name: "", internalType: "uint256", type: "uint256" }],
  },
  {
    stateMutability: "view",
    type: "function",
    inputs: [],
    name: "POOL_REVISION",
    outputs: [{ name: "", internalType: "uint256", type: "uint256" }],
  },
  {
    stateMutability: "nonpayable",
    type: "function",
    inputs: [
      { name: "asset", internalType: "address", type: "address" },
      { name: "amount", internalType: "uint256", type: "uint256" },
      { name: "fee", internalType: "uint256", type: "uint256" },
    ],
    name: "backUnbacked",
    outputs: [],
  },
  {
    stateMutability: "nonpayable",
    type: "function",
    inputs: [
      { name: "asset", internalType: "address", type: "address" },
      { name: "amount", internalType: "uint256", type: "uint256" },
      { name: "interestRateMode", internalType: "uint256", type: "uint256" },
      { name: "referralCode", internalType: "uint16", type: "uint16" },
      { name: "onBehalfOf", internalType: "address", type: "address" },
    ],
    name: "borrow",
    outputs: [],
  },
  {
    stateMutability: "nonpayable",
    type: "function",
    inputs: [
      { name: "id", internalType: "uint8", type: "uint8" },
      {
        name: "category",
        internalType: "struct DataTypes.EModeCategory",
        type: "tuple",
        components: [
          { name: "ltv", internalType: "uint16", type: "uint16" },
          {
            name: "liquidationThreshold",
            internalType: "uint16",
            type: "uint16",
          },
          { name: "liquidationBonus", internalType: "uint16", type: "uint16" },
          { name: "priceSource", internalType: "address", type: "address" },
          { name: "label", internalType: "string", type: "string" },
        ],
      },
    ],
    name: "configureEModeCategory",
    outputs: [],
  },
  {
    stateMutability: "nonpayable",
    type: "function",
    inputs: [
      { name: "asset", internalType: "address", type: "address" },
      { name: "amount", internalType: "uint256", type: "uint256" },
      { name: "onBehalfOf", internalType: "address", type: "address" },
      { name: "referralCode", internalType: "uint16", type: "uint16" },
    ],
    name: "deposit",
    outputs: [],
  },
  {
    stateMutability: "nonpayable",
    type: "function",
    inputs: [{ name: "asset", internalType: "address", type: "address" }],
    name: "dropReserve",
    outputs: [],
  },
  {
    stateMutability: "nonpayable",
    type: "function",
    inputs: [
      { name: "asset", internalType: "address", type: "address" },
      { name: "from", internalType: "address", type: "address" },
      { name: "to", internalType: "address", type: "address" },
      { name: "amount", internalType: "uint256", type: "uint256" },
      { name: "balanceFromBefore", internalType: "uint256", type: "uint256" },
      { name: "balanceToBefore", internalType: "uint256", type: "uint256" },
    ],
    name: "finalizeTransfer",
    outputs: [],
  },
  {
    stateMutability: "nonpayable",
    type: "function",
    inputs: [
      { name: "receiverAddress", internalType: "address", type: "address" },
      { name: "assets", internalType: "address[]", type: "address[]" },
      { name: "amounts", internalType: "uint256[]", type: "uint256[]" },
      {
        name: "interestRateModes",
        internalType: "uint256[]",
        type: "uint256[]",
      },
      { name: "onBehalfOf", internalType: "address", type: "address" },
      { name: "params", internalType: "bytes", type: "bytes" },
      { name: "referralCode", internalType: "uint16", type: "uint16" },
    ],
    name: "flashLoan",
    outputs: [],
  },
  {
    stateMutability: "nonpayable",
    type: "function",
    inputs: [
      { name: "receiverAddress", internalType: "address", type: "address" },
      { name: "asset", internalType: "address", type: "address" },
      { name: "amount", internalType: "uint256", type: "uint256" },
      { name: "params", internalType: "bytes", type: "bytes" },
      { name: "referralCode", internalType: "uint16", type: "uint16" },
    ],
    name: "flashLoanSimple",
    outputs: [],
  },
  {
    stateMutability: "view",
    type: "function",
    inputs: [{ name: "asset", internalType: "address", type: "address" }],
    name: "getConfiguration",
    outputs: [
      {
        name: "",
        internalType: "struct DataTypes.ReserveConfigurationMap",
        type: "tuple",
        components: [
          { name: "data", internalType: "uint256", type: "uint256" },
        ],
      },
    ],
  },
  {
    stateMutability: "view",
    type: "function",
    inputs: [{ name: "id", internalType: "uint8", type: "uint8" }],
    name: "getEModeCategoryData",
    outputs: [
      {
        name: "",
        internalType: "struct DataTypes.EModeCategory",
        type: "tuple",
        components: [
          { name: "ltv", internalType: "uint16", type: "uint16" },
          {
            name: "liquidationThreshold",
            internalType: "uint16",
            type: "uint16",
          },
          { name: "liquidationBonus", internalType: "uint16", type: "uint16" },
          { name: "priceSource", internalType: "address", type: "address" },
          { name: "label", internalType: "string", type: "string" },
        ],
      },
    ],
  },
  {
    stateMutability: "view",
    type: "function",
    inputs: [{ name: "id", internalType: "uint16", type: "uint16" }],
    name: "getReserveAddressById",
    outputs: [{ name: "", internalType: "address", type: "address" }],
  },
  {
    stateMutability: "view",
    type: "function",
    inputs: [{ name: "asset", internalType: "address", type: "address" }],
    name: "getReserveData",
    outputs: [
      {
        name: "",
        internalType: "struct DataTypes.ReserveData",
        type: "tuple",
        components: [
          {
            name: "configuration",
            internalType: "struct DataTypes.ReserveConfigurationMap",
            type: "tuple",
            components: [
              { name: "data", internalType: "uint256", type: "uint256" },
            ],
          },
          { name: "liquidityIndex", internalType: "uint128", type: "uint128" },
          {
            name: "currentLiquidityRate",
            internalType: "uint128",
            type: "uint128",
          },
          {
            name: "variableBorrowIndex",
            internalType: "uint128",
            type: "uint128",
          },
          {
            name: "currentVariableBorrowRate",
            internalType: "uint128",
            type: "uint128",
          },
          {
            name: "currentStableBorrowRate",
            internalType: "uint128",
            type: "uint128",
          },
          {
            name: "lastUpdateTimestamp",
            internalType: "uint40",
            type: "uint40",
          },
          { name: "id", internalType: "uint16", type: "uint16" },
          { name: "aTokenAddress", internalType: "address", type: "address" },
          {
            name: "stableDebtTokenAddress",
            internalType: "address",
            type: "address",
          },
          {
            name: "variableDebtTokenAddress",
            internalType: "address",
            type: "address",
          },
          {
            name: "interestRateStrategyAddress",
            internalType: "address",
            type: "address",
          },
          {
            name: "accruedToTreasury",
            internalType: "uint128",
            type: "uint128",
          },
          { name: "unbacked", internalType: "uint128", type: "uint128" },
          {
            name: "isolationModeTotalDebt",
            internalType: "uint128",
            type: "uint128",
          },
        ],
      },
    ],
  },
  {
    stateMutability: "view",
    type: "function",
    inputs: [{ name: "asset", internalType: "address", type: "address" }],
    name: "getReserveNormalizedIncome",
    outputs: [{ name: "", internalType: "uint256", type: "uint256" }],
  },
  {
    stateMutability: "view",
    type: "function",
    inputs: [{ name: "asset", internalType: "address", type: "address" }],
    name: "getReserveNormalizedVariableDebt",
    outputs: [{ name: "", internalType: "uint256", type: "uint256" }],
  },
  {
    stateMutability: "view",
    type: "function",
    inputs: [],
    name: "getReservesList",
    outputs: [{ name: "", internalType: "address[]", type: "address[]" }],
  },
  {
    stateMutability: "view",
    type: "function",
    inputs: [{ name: "user", internalType: "address", type: "address" }],
    name: "getUserAccountData",
    outputs: [
      { name: "totalCollateralBase", internalType: "uint256", type: "uint256" },
      { name: "totalDebtBase", internalType: "uint256", type: "uint256" },
      {
        name: "availableBorrowsBase",
        internalType: "uint256",
        type: "uint256",
      },
      {
        name: "currentLiquidationThreshold",
        internalType: "uint256",
        type: "uint256",
      },
      { name: "ltv", internalType: "uint256", type: "uint256" },
      { name: "healthFactor", internalType: "uint256", type: "uint256" },
    ],
  },
  {
    stateMutability: "view",
    type: "function",
    inputs: [{ name: "user", internalType: "address", type: "address" }],
    name: "getUserConfiguration",
    outputs: [
      {
        name: "",
        internalType: "struct DataTypes.UserConfigurationMap",
        type: "tuple",
        components: [
          { name: "data", internalType: "uint256", type: "uint256" },
        ],
      },
    ],
  },
  {
    stateMutability: "view",
    type: "function",
    inputs: [{ name: "user", internalType: "address", type: "address" }],
    name: "getUserEMode",
    outputs: [{ name: "", internalType: "uint256", type: "uint256" }],
  },
  {
    stateMutability: "nonpayable",
    type: "function",
    inputs: [
      { name: "asset", internalType: "address", type: "address" },
      { name: "aTokenAddress", internalType: "address", type: "address" },
      { name: "stableDebtAddress", internalType: "address", type: "address" },
      { name: "variableDebtAddress", internalType: "address", type: "address" },
      {
        name: "interestRateStrategyAddress",
        internalType: "address",
        type: "address",
      },
    ],
    name: "initReserve",
    outputs: [],
  },
  {
    stateMutability: "nonpayable",
    type: "function",
    inputs: [
      {
        name: "provider",
        internalType: "contract IPoolAddressesProvider",
        type: "address",
      },
    ],
    name: "initialize",
    outputs: [],
  },
  {
    stateMutability: "nonpayable",
    type: "function",
    inputs: [
      { name: "collateralAsset", internalType: "address", type: "address" },
      { name: "debtAsset", internalType: "address", type: "address" },
      { name: "user", internalType: "address", type: "address" },
      { name: "debtToCover", internalType: "uint256", type: "uint256" },
      { name: "receiveAToken", internalType: "bool", type: "bool" },
    ],
    name: "liquidationCall",
    outputs: [],
  },
  {
    stateMutability: "nonpayable",
    type: "function",
    inputs: [{ name: "assets", internalType: "address[]", type: "address[]" }],
    name: "mintToTreasury",
    outputs: [],
  },
  {
    stateMutability: "nonpayable",
    type: "function",
    inputs: [
      { name: "asset", internalType: "address", type: "address" },
      { name: "amount", internalType: "uint256", type: "uint256" },
      { name: "onBehalfOf", internalType: "address", type: "address" },
      { name: "referralCode", internalType: "uint16", type: "uint16" },
    ],
    name: "mintUnbacked",
    outputs: [],
  },
  {
    stateMutability: "nonpayable",
    type: "function",
    inputs: [
      { name: "asset", internalType: "address", type: "address" },
      { name: "user", internalType: "address", type: "address" },
    ],
    name: "rebalanceStableBorrowRate",
    outputs: [],
  },
  {
    stateMutability: "nonpayable",
    type: "function",
    inputs: [
      { name: "asset", internalType: "address", type: "address" },
      { name: "amount", internalType: "uint256", type: "uint256" },
      { name: "interestRateMode", internalType: "uint256", type: "uint256" },
      { name: "onBehalfOf", internalType: "address", type: "address" },
    ],
    name: "repay",
    outputs: [{ name: "", internalType: "uint256", type: "uint256" }],
  },
  {
    stateMutability: "nonpayable",
    type: "function",
    inputs: [
      { name: "asset", internalType: "address", type: "address" },
      { name: "amount", internalType: "uint256", type: "uint256" },
      { name: "interestRateMode", internalType: "uint256", type: "uint256" },
    ],
    name: "repayWithATokens",
    outputs: [{ name: "", internalType: "uint256", type: "uint256" }],
  },
  {
    stateMutability: "nonpayable",
    type: "function",
    inputs: [
      { name: "asset", internalType: "address", type: "address" },
      { name: "amount", internalType: "uint256", type: "uint256" },
      { name: "interestRateMode", internalType: "uint256", type: "uint256" },
      { name: "onBehalfOf", internalType: "address", type: "address" },
      { name: "deadline", internalType: "uint256", type: "uint256" },
      { name: "permitV", internalType: "uint8", type: "uint8" },
      { name: "permitR", internalType: "bytes32", type: "bytes32" },
      { name: "permitS", internalType: "bytes32", type: "bytes32" },
    ],
    name: "repayWithPermit",
    outputs: [{ name: "", internalType: "uint256", type: "uint256" }],
  },
  {
    stateMutability: "nonpayable",
    type: "function",
    inputs: [
      { name: "token", internalType: "address", type: "address" },
      { name: "to", internalType: "address", type: "address" },
      { name: "amount", internalType: "uint256", type: "uint256" },
    ],
    name: "rescueTokens",
    outputs: [],
  },
  {
    stateMutability: "nonpayable",
    type: "function",
    inputs: [{ name: "asset", internalType: "address", type: "address" }],
    name: "resetIsolationModeTotalDebt",
    outputs: [],
  },
  {
    stateMutability: "nonpayable",
    type: "function",
    inputs: [
      { name: "asset", internalType: "address", type: "address" },
      {
        name: "configuration",
        internalType: "struct DataTypes.ReserveConfigurationMap",
        type: "tuple",
        components: [
          { name: "data", internalType: "uint256", type: "uint256" },
        ],
      },
    ],
    name: "setConfiguration",
    outputs: [],
  },
  {
    stateMutability: "nonpayable",
    type: "function",
    inputs: [
      { name: "asset", internalType: "address", type: "address" },
      { name: "rateStrategyAddress", internalType: "address", type: "address" },
    ],
    name: "setReserveInterestRateStrategyAddress",
    outputs: [],
  },
  {
    stateMutability: "nonpayable",
    type: "function",
    inputs: [{ name: "categoryId", internalType: "uint8", type: "uint8" }],
    name: "setUserEMode",
    outputs: [],
  },
  {
    stateMutability: "nonpayable",
    type: "function",
    inputs: [
      { name: "asset", internalType: "address", type: "address" },
      { name: "useAsCollateral", internalType: "bool", type: "bool" },
    ],
    name: "setUserUseReserveAsCollateral",
    outputs: [],
  },
  {
    stateMutability: "nonpayable",
    type: "function",
    inputs: [
      { name: "asset", internalType: "address", type: "address" },
      { name: "amount", internalType: "uint256", type: "uint256" },
      { name: "onBehalfOf", internalType: "address", type: "address" },
      { name: "referralCode", internalType: "uint16", type: "uint16" },
    ],
    name: "supply",
    outputs: [],
  },
  {
    stateMutability: "nonpayable",
    type: "function",
    inputs: [
      { name: "asset", internalType: "address", type: "address" },
      { name: "amount", internalType: "uint256", type: "uint256" },
      { name: "onBehalfOf", internalType: "address", type: "address" },
      { name: "referralCode", internalType: "uint16", type: "uint16" },
      { name: "deadline", internalType: "uint256", type: "uint256" },
      { name: "permitV", internalType: "uint8", type: "uint8" },
      { name: "permitR", internalType: "bytes32", type: "bytes32" },
      { name: "permitS", internalType: "bytes32", type: "bytes32" },
    ],
    name: "supplyWithPermit",
    outputs: [],
  },
  {
    stateMutability: "nonpayable",
    type: "function",
    inputs: [
      { name: "asset", internalType: "address", type: "address" },
      { name: "interestRateMode", internalType: "uint256", type: "uint256" },
    ],
    name: "swapBorrowRateMode",
    outputs: [],
  },
  {
    stateMutability: "nonpayable",
    type: "function",
    inputs: [{ name: "protocolFee", internalType: "uint256", type: "uint256" }],
    name: "updateBridgeProtocolFee",
    outputs: [],
  },
  {
    stateMutability: "nonpayable",
    type: "function",
    inputs: [
      {
        name: "flashLoanPremiumTotal",
        internalType: "uint128",
        type: "uint128",
      },
      {
        name: "flashLoanPremiumToProtocol",
        internalType: "uint128",
        type: "uint128",
      },
    ],
    name: "updateFlashloanPremiums",
    outputs: [],
  },
  {
    stateMutability: "nonpayable",
    type: "function",
    inputs: [
      { name: "asset", internalType: "address", type: "address" },
      { name: "amount", internalType: "uint256", type: "uint256" },
      { name: "to", internalType: "address", type: "address" },
    ],
    name: "withdraw",
    outputs: [{ name: "", internalType: "uint256", type: "uint256" }],
  },
] as const

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// React
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link uiPoolDataProviderABI}__.
 */
export function useUiPoolDataProviderRead<
  TFunctionName extends string,
  TSelectData = ReadContractResult<typeof uiPoolDataProviderABI, TFunctionName>
>(
  config: Omit<
    UseContractReadConfig<
      typeof uiPoolDataProviderABI,
      TFunctionName,
      TSelectData
    >,
    "abi"
  > = {} as any
) {
  return useContractRead({
    abi: uiPoolDataProviderABI,
    ...config,
  } as UseContractReadConfig<
    typeof uiPoolDataProviderABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link uiPoolDataProviderABI}__ and `functionName` set to `"ETH_CURRENCY_UNIT"`.
 */
export function useUiPoolDataProviderEthCurrencyUnit<
  TFunctionName extends "ETH_CURRENCY_UNIT",
  TSelectData = ReadContractResult<typeof uiPoolDataProviderABI, TFunctionName>
>(
  config: Omit<
    UseContractReadConfig<
      typeof uiPoolDataProviderABI,
      TFunctionName,
      TSelectData
    >,
    "abi" | "functionName"
  > = {} as any
) {
  return useContractRead({
    abi: uiPoolDataProviderABI,
    functionName: "ETH_CURRENCY_UNIT",
    ...config,
  } as UseContractReadConfig<
    typeof uiPoolDataProviderABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link uiPoolDataProviderABI}__ and `functionName` set to `"MKR_ADDRESS"`.
 */
export function useUiPoolDataProviderMkrAddress<
  TFunctionName extends "MKR_ADDRESS",
  TSelectData = ReadContractResult<typeof uiPoolDataProviderABI, TFunctionName>
>(
  config: Omit<
    UseContractReadConfig<
      typeof uiPoolDataProviderABI,
      TFunctionName,
      TSelectData
    >,
    "abi" | "functionName"
  > = {} as any
) {
  return useContractRead({
    abi: uiPoolDataProviderABI,
    functionName: "MKR_ADDRESS",
    ...config,
  } as UseContractReadConfig<
    typeof uiPoolDataProviderABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link uiPoolDataProviderABI}__ and `functionName` set to `"bytes32ToString"`.
 */
export function useUiPoolDataProviderBytes32ToString<
  TFunctionName extends "bytes32ToString",
  TSelectData = ReadContractResult<typeof uiPoolDataProviderABI, TFunctionName>
>(
  config: Omit<
    UseContractReadConfig<
      typeof uiPoolDataProviderABI,
      TFunctionName,
      TSelectData
    >,
    "abi" | "functionName"
  > = {} as any
) {
  return useContractRead({
    abi: uiPoolDataProviderABI,
    functionName: "bytes32ToString",
    ...config,
  } as UseContractReadConfig<
    typeof uiPoolDataProviderABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link uiPoolDataProviderABI}__ and `functionName` set to `"getReservesData"`.
 */
export function useUiPoolDataProviderGetReservesData<
  TFunctionName extends "getReservesData",
  TSelectData = ReadContractResult<typeof uiPoolDataProviderABI, TFunctionName>
>(
  config: Omit<
    UseContractReadConfig<
      typeof uiPoolDataProviderABI,
      TFunctionName,
      TSelectData
    >,
    "abi" | "functionName"
  > = {} as any
) {
  return useContractRead({
    abi: uiPoolDataProviderABI,
    functionName: "getReservesData",
    ...config,
  } as UseContractReadConfig<
    typeof uiPoolDataProviderABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link uiPoolDataProviderABI}__ and `functionName` set to `"getReservesList"`.
 */
export function useUiPoolDataProviderGetReservesList<
  TFunctionName extends "getReservesList",
  TSelectData = ReadContractResult<typeof uiPoolDataProviderABI, TFunctionName>
>(
  config: Omit<
    UseContractReadConfig<
      typeof uiPoolDataProviderABI,
      TFunctionName,
      TSelectData
    >,
    "abi" | "functionName"
  > = {} as any
) {
  return useContractRead({
    abi: uiPoolDataProviderABI,
    functionName: "getReservesList",
    ...config,
  } as UseContractReadConfig<
    typeof uiPoolDataProviderABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link uiPoolDataProviderABI}__ and `functionName` set to `"getUserReservesData"`.
 */
export function useUiPoolDataProviderGetUserReservesData<
  TFunctionName extends "getUserReservesData",
  TSelectData = ReadContractResult<typeof uiPoolDataProviderABI, TFunctionName>
>(
  config: Omit<
    UseContractReadConfig<
      typeof uiPoolDataProviderABI,
      TFunctionName,
      TSelectData
    >,
    "abi" | "functionName"
  > = {} as any
) {
  return useContractRead({
    abi: uiPoolDataProviderABI,
    functionName: "getUserReservesData",
    ...config,
  } as UseContractReadConfig<
    typeof uiPoolDataProviderABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link uiPoolDataProviderABI}__ and `functionName` set to `"marketReferenceCurrencyPriceInUsdProxyAggregator"`.
 */
export function useUiPoolDataProviderMarketReferenceCurrencyPriceInUsdProxyAggregator<
  TFunctionName extends "marketReferenceCurrencyPriceInUsdProxyAggregator",
  TSelectData = ReadContractResult<typeof uiPoolDataProviderABI, TFunctionName>
>(
  config: Omit<
    UseContractReadConfig<
      typeof uiPoolDataProviderABI,
      TFunctionName,
      TSelectData
    >,
    "abi" | "functionName"
  > = {} as any
) {
  return useContractRead({
    abi: uiPoolDataProviderABI,
    functionName: "marketReferenceCurrencyPriceInUsdProxyAggregator",
    ...config,
  } as UseContractReadConfig<
    typeof uiPoolDataProviderABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link uiPoolDataProviderABI}__ and `functionName` set to `"networkBaseTokenPriceInUsdProxyAggregator"`.
 */
export function useUiPoolDataProviderNetworkBaseTokenPriceInUsdProxyAggregator<
  TFunctionName extends "networkBaseTokenPriceInUsdProxyAggregator",
  TSelectData = ReadContractResult<typeof uiPoolDataProviderABI, TFunctionName>
>(
  config: Omit<
    UseContractReadConfig<
      typeof uiPoolDataProviderABI,
      TFunctionName,
      TSelectData
    >,
    "abi" | "functionName"
  > = {} as any
) {
  return useContractRead({
    abi: uiPoolDataProviderABI,
    functionName: "networkBaseTokenPriceInUsdProxyAggregator",
    ...config,
  } as UseContractReadConfig<
    typeof uiPoolDataProviderABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link poolABI}__.
 */
export function usePoolRead<
  TFunctionName extends string,
  TSelectData = ReadContractResult<typeof poolABI, TFunctionName>
>(
  config: Omit<
    UseContractReadConfig<typeof poolABI, TFunctionName, TSelectData>,
    "abi"
  > = {} as any
) {
  return useContractRead({ abi: poolABI, ...config } as UseContractReadConfig<
    typeof poolABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link poolABI}__ and `functionName` set to `"ADDRESSES_PROVIDER"`.
 */
export function usePoolAddressesProvider<
  TFunctionName extends "ADDRESSES_PROVIDER",
  TSelectData = ReadContractResult<typeof poolABI, TFunctionName>
>(
  config: Omit<
    UseContractReadConfig<typeof poolABI, TFunctionName, TSelectData>,
    "abi" | "functionName"
  > = {} as any
) {
  return useContractRead({
    abi: poolABI,
    functionName: "ADDRESSES_PROVIDER",
    ...config,
  } as UseContractReadConfig<typeof poolABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link poolABI}__ and `functionName` set to `"BRIDGE_PROTOCOL_FEE"`.
 */
export function usePoolBridgeProtocolFee<
  TFunctionName extends "BRIDGE_PROTOCOL_FEE",
  TSelectData = ReadContractResult<typeof poolABI, TFunctionName>
>(
  config: Omit<
    UseContractReadConfig<typeof poolABI, TFunctionName, TSelectData>,
    "abi" | "functionName"
  > = {} as any
) {
  return useContractRead({
    abi: poolABI,
    functionName: "BRIDGE_PROTOCOL_FEE",
    ...config,
  } as UseContractReadConfig<typeof poolABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link poolABI}__ and `functionName` set to `"FLASHLOAN_PREMIUM_TOTAL"`.
 */
export function usePoolFlashloanPremiumTotal<
  TFunctionName extends "FLASHLOAN_PREMIUM_TOTAL",
  TSelectData = ReadContractResult<typeof poolABI, TFunctionName>
>(
  config: Omit<
    UseContractReadConfig<typeof poolABI, TFunctionName, TSelectData>,
    "abi" | "functionName"
  > = {} as any
) {
  return useContractRead({
    abi: poolABI,
    functionName: "FLASHLOAN_PREMIUM_TOTAL",
    ...config,
  } as UseContractReadConfig<typeof poolABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link poolABI}__ and `functionName` set to `"FLASHLOAN_PREMIUM_TO_PROTOCOL"`.
 */
export function usePoolFlashloanPremiumToProtocol<
  TFunctionName extends "FLASHLOAN_PREMIUM_TO_PROTOCOL",
  TSelectData = ReadContractResult<typeof poolABI, TFunctionName>
>(
  config: Omit<
    UseContractReadConfig<typeof poolABI, TFunctionName, TSelectData>,
    "abi" | "functionName"
  > = {} as any
) {
  return useContractRead({
    abi: poolABI,
    functionName: "FLASHLOAN_PREMIUM_TO_PROTOCOL",
    ...config,
  } as UseContractReadConfig<typeof poolABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link poolABI}__ and `functionName` set to `"MAX_NUMBER_RESERVES"`.
 */
export function usePoolMaxNumberReserves<
  TFunctionName extends "MAX_NUMBER_RESERVES",
  TSelectData = ReadContractResult<typeof poolABI, TFunctionName>
>(
  config: Omit<
    UseContractReadConfig<typeof poolABI, TFunctionName, TSelectData>,
    "abi" | "functionName"
  > = {} as any
) {
  return useContractRead({
    abi: poolABI,
    functionName: "MAX_NUMBER_RESERVES",
    ...config,
  } as UseContractReadConfig<typeof poolABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link poolABI}__ and `functionName` set to `"MAX_STABLE_RATE_BORROW_SIZE_PERCENT"`.
 */
export function usePoolMaxStableRateBorrowSizePercent<
  TFunctionName extends "MAX_STABLE_RATE_BORROW_SIZE_PERCENT",
  TSelectData = ReadContractResult<typeof poolABI, TFunctionName>
>(
  config: Omit<
    UseContractReadConfig<typeof poolABI, TFunctionName, TSelectData>,
    "abi" | "functionName"
  > = {} as any
) {
  return useContractRead({
    abi: poolABI,
    functionName: "MAX_STABLE_RATE_BORROW_SIZE_PERCENT",
    ...config,
  } as UseContractReadConfig<typeof poolABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link poolABI}__ and `functionName` set to `"POOL_REVISION"`.
 */
export function usePoolPoolRevision<
  TFunctionName extends "POOL_REVISION",
  TSelectData = ReadContractResult<typeof poolABI, TFunctionName>
>(
  config: Omit<
    UseContractReadConfig<typeof poolABI, TFunctionName, TSelectData>,
    "abi" | "functionName"
  > = {} as any
) {
  return useContractRead({
    abi: poolABI,
    functionName: "POOL_REVISION",
    ...config,
  } as UseContractReadConfig<typeof poolABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link poolABI}__ and `functionName` set to `"getConfiguration"`.
 */
export function usePoolGetConfiguration<
  TFunctionName extends "getConfiguration",
  TSelectData = ReadContractResult<typeof poolABI, TFunctionName>
>(
  config: Omit<
    UseContractReadConfig<typeof poolABI, TFunctionName, TSelectData>,
    "abi" | "functionName"
  > = {} as any
) {
  return useContractRead({
    abi: poolABI,
    functionName: "getConfiguration",
    ...config,
  } as UseContractReadConfig<typeof poolABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link poolABI}__ and `functionName` set to `"getEModeCategoryData"`.
 */
export function usePoolGetEModeCategoryData<
  TFunctionName extends "getEModeCategoryData",
  TSelectData = ReadContractResult<typeof poolABI, TFunctionName>
>(
  config: Omit<
    UseContractReadConfig<typeof poolABI, TFunctionName, TSelectData>,
    "abi" | "functionName"
  > = {} as any
) {
  return useContractRead({
    abi: poolABI,
    functionName: "getEModeCategoryData",
    ...config,
  } as UseContractReadConfig<typeof poolABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link poolABI}__ and `functionName` set to `"getReserveAddressById"`.
 */
export function usePoolGetReserveAddressById<
  TFunctionName extends "getReserveAddressById",
  TSelectData = ReadContractResult<typeof poolABI, TFunctionName>
>(
  config: Omit<
    UseContractReadConfig<typeof poolABI, TFunctionName, TSelectData>,
    "abi" | "functionName"
  > = {} as any
) {
  return useContractRead({
    abi: poolABI,
    functionName: "getReserveAddressById",
    ...config,
  } as UseContractReadConfig<typeof poolABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link poolABI}__ and `functionName` set to `"getReserveData"`.
 */
export function usePoolGetReserveData<
  TFunctionName extends "getReserveData",
  TSelectData = ReadContractResult<typeof poolABI, TFunctionName>
>(
  config: Omit<
    UseContractReadConfig<typeof poolABI, TFunctionName, TSelectData>,
    "abi" | "functionName"
  > = {} as any
) {
  return useContractRead({
    abi: poolABI,
    functionName: "getReserveData",
    ...config,
  } as UseContractReadConfig<typeof poolABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link poolABI}__ and `functionName` set to `"getReserveNormalizedIncome"`.
 */
export function usePoolGetReserveNormalizedIncome<
  TFunctionName extends "getReserveNormalizedIncome",
  TSelectData = ReadContractResult<typeof poolABI, TFunctionName>
>(
  config: Omit<
    UseContractReadConfig<typeof poolABI, TFunctionName, TSelectData>,
    "abi" | "functionName"
  > = {} as any
) {
  return useContractRead({
    abi: poolABI,
    functionName: "getReserveNormalizedIncome",
    ...config,
  } as UseContractReadConfig<typeof poolABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link poolABI}__ and `functionName` set to `"getReserveNormalizedVariableDebt"`.
 */
export function usePoolGetReserveNormalizedVariableDebt<
  TFunctionName extends "getReserveNormalizedVariableDebt",
  TSelectData = ReadContractResult<typeof poolABI, TFunctionName>
>(
  config: Omit<
    UseContractReadConfig<typeof poolABI, TFunctionName, TSelectData>,
    "abi" | "functionName"
  > = {} as any
) {
  return useContractRead({
    abi: poolABI,
    functionName: "getReserveNormalizedVariableDebt",
    ...config,
  } as UseContractReadConfig<typeof poolABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link poolABI}__ and `functionName` set to `"getReservesList"`.
 */
export function usePoolGetReservesList<
  TFunctionName extends "getReservesList",
  TSelectData = ReadContractResult<typeof poolABI, TFunctionName>
>(
  config: Omit<
    UseContractReadConfig<typeof poolABI, TFunctionName, TSelectData>,
    "abi" | "functionName"
  > = {} as any
) {
  return useContractRead({
    abi: poolABI,
    functionName: "getReservesList",
    ...config,
  } as UseContractReadConfig<typeof poolABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link poolABI}__ and `functionName` set to `"getUserAccountData"`.
 */
export function usePoolGetUserAccountData<
  TFunctionName extends "getUserAccountData",
  TSelectData = ReadContractResult<typeof poolABI, TFunctionName>
>(
  config: Omit<
    UseContractReadConfig<typeof poolABI, TFunctionName, TSelectData>,
    "abi" | "functionName"
  > = {} as any
) {
  return useContractRead({
    abi: poolABI,
    functionName: "getUserAccountData",
    ...config,
  } as UseContractReadConfig<typeof poolABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link poolABI}__ and `functionName` set to `"getUserConfiguration"`.
 */
export function usePoolGetUserConfiguration<
  TFunctionName extends "getUserConfiguration",
  TSelectData = ReadContractResult<typeof poolABI, TFunctionName>
>(
  config: Omit<
    UseContractReadConfig<typeof poolABI, TFunctionName, TSelectData>,
    "abi" | "functionName"
  > = {} as any
) {
  return useContractRead({
    abi: poolABI,
    functionName: "getUserConfiguration",
    ...config,
  } as UseContractReadConfig<typeof poolABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link poolABI}__ and `functionName` set to `"getUserEMode"`.
 */
export function usePoolGetUserEMode<
  TFunctionName extends "getUserEMode",
  TSelectData = ReadContractResult<typeof poolABI, TFunctionName>
>(
  config: Omit<
    UseContractReadConfig<typeof poolABI, TFunctionName, TSelectData>,
    "abi" | "functionName"
  > = {} as any
) {
  return useContractRead({
    abi: poolABI,
    functionName: "getUserEMode",
    ...config,
  } as UseContractReadConfig<typeof poolABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link poolABI}__.
 */
export function usePoolWrite<
  TFunctionName extends string,
  TMode extends WriteContractMode = undefined
>(
  config: TMode extends "prepared"
    ? UseContractWriteConfig<
        PrepareWriteContractResult<typeof poolABI, string>["request"]["abi"],
        TFunctionName,
        TMode
      >
    : UseContractWriteConfig<typeof poolABI, TFunctionName, TMode> & {
        abi?: never
      } = {} as any
) {
  return useContractWrite<typeof poolABI, TFunctionName, TMode>({
    abi: poolABI,
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link poolABI}__ and `functionName` set to `"backUnbacked"`.
 */
export function usePoolBackUnbacked<
  TMode extends WriteContractMode = undefined
>(
  config: TMode extends "prepared"
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof poolABI,
          "backUnbacked"
        >["request"]["abi"],
        "backUnbacked",
        TMode
      > & { functionName?: "backUnbacked" }
    : UseContractWriteConfig<typeof poolABI, "backUnbacked", TMode> & {
        abi?: never
        functionName?: "backUnbacked"
      } = {} as any
) {
  return useContractWrite<typeof poolABI, "backUnbacked", TMode>({
    abi: poolABI,
    functionName: "backUnbacked",
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link poolABI}__ and `functionName` set to `"borrow"`.
 */
export function usePoolBorrow<TMode extends WriteContractMode = undefined>(
  config: TMode extends "prepared"
    ? UseContractWriteConfig<
        PrepareWriteContractResult<typeof poolABI, "borrow">["request"]["abi"],
        "borrow",
        TMode
      > & { functionName?: "borrow" }
    : UseContractWriteConfig<typeof poolABI, "borrow", TMode> & {
        abi?: never
        functionName?: "borrow"
      } = {} as any
) {
  return useContractWrite<typeof poolABI, "borrow", TMode>({
    abi: poolABI,
    functionName: "borrow",
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link poolABI}__ and `functionName` set to `"configureEModeCategory"`.
 */
export function usePoolConfigureEModeCategory<
  TMode extends WriteContractMode = undefined
>(
  config: TMode extends "prepared"
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof poolABI,
          "configureEModeCategory"
        >["request"]["abi"],
        "configureEModeCategory",
        TMode
      > & { functionName?: "configureEModeCategory" }
    : UseContractWriteConfig<
        typeof poolABI,
        "configureEModeCategory",
        TMode
      > & {
        abi?: never
        functionName?: "configureEModeCategory"
      } = {} as any
) {
  return useContractWrite<typeof poolABI, "configureEModeCategory", TMode>({
    abi: poolABI,
    functionName: "configureEModeCategory",
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link poolABI}__ and `functionName` set to `"deposit"`.
 */
export function usePoolDeposit<TMode extends WriteContractMode = undefined>(
  config: TMode extends "prepared"
    ? UseContractWriteConfig<
        PrepareWriteContractResult<typeof poolABI, "deposit">["request"]["abi"],
        "deposit",
        TMode
      > & { functionName?: "deposit" }
    : UseContractWriteConfig<typeof poolABI, "deposit", TMode> & {
        abi?: never
        functionName?: "deposit"
      } = {} as any
) {
  return useContractWrite<typeof poolABI, "deposit", TMode>({
    abi: poolABI,
    functionName: "deposit",
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link poolABI}__ and `functionName` set to `"dropReserve"`.
 */
export function usePoolDropReserve<TMode extends WriteContractMode = undefined>(
  config: TMode extends "prepared"
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof poolABI,
          "dropReserve"
        >["request"]["abi"],
        "dropReserve",
        TMode
      > & { functionName?: "dropReserve" }
    : UseContractWriteConfig<typeof poolABI, "dropReserve", TMode> & {
        abi?: never
        functionName?: "dropReserve"
      } = {} as any
) {
  return useContractWrite<typeof poolABI, "dropReserve", TMode>({
    abi: poolABI,
    functionName: "dropReserve",
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link poolABI}__ and `functionName` set to `"finalizeTransfer"`.
 */
export function usePoolFinalizeTransfer<
  TMode extends WriteContractMode = undefined
>(
  config: TMode extends "prepared"
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof poolABI,
          "finalizeTransfer"
        >["request"]["abi"],
        "finalizeTransfer",
        TMode
      > & { functionName?: "finalizeTransfer" }
    : UseContractWriteConfig<typeof poolABI, "finalizeTransfer", TMode> & {
        abi?: never
        functionName?: "finalizeTransfer"
      } = {} as any
) {
  return useContractWrite<typeof poolABI, "finalizeTransfer", TMode>({
    abi: poolABI,
    functionName: "finalizeTransfer",
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link poolABI}__ and `functionName` set to `"flashLoan"`.
 */
export function usePoolFlashLoan<TMode extends WriteContractMode = undefined>(
  config: TMode extends "prepared"
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof poolABI,
          "flashLoan"
        >["request"]["abi"],
        "flashLoan",
        TMode
      > & { functionName?: "flashLoan" }
    : UseContractWriteConfig<typeof poolABI, "flashLoan", TMode> & {
        abi?: never
        functionName?: "flashLoan"
      } = {} as any
) {
  return useContractWrite<typeof poolABI, "flashLoan", TMode>({
    abi: poolABI,
    functionName: "flashLoan",
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link poolABI}__ and `functionName` set to `"flashLoanSimple"`.
 */
export function usePoolFlashLoanSimple<
  TMode extends WriteContractMode = undefined
>(
  config: TMode extends "prepared"
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof poolABI,
          "flashLoanSimple"
        >["request"]["abi"],
        "flashLoanSimple",
        TMode
      > & { functionName?: "flashLoanSimple" }
    : UseContractWriteConfig<typeof poolABI, "flashLoanSimple", TMode> & {
        abi?: never
        functionName?: "flashLoanSimple"
      } = {} as any
) {
  return useContractWrite<typeof poolABI, "flashLoanSimple", TMode>({
    abi: poolABI,
    functionName: "flashLoanSimple",
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link poolABI}__ and `functionName` set to `"initReserve"`.
 */
export function usePoolInitReserve<TMode extends WriteContractMode = undefined>(
  config: TMode extends "prepared"
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof poolABI,
          "initReserve"
        >["request"]["abi"],
        "initReserve",
        TMode
      > & { functionName?: "initReserve" }
    : UseContractWriteConfig<typeof poolABI, "initReserve", TMode> & {
        abi?: never
        functionName?: "initReserve"
      } = {} as any
) {
  return useContractWrite<typeof poolABI, "initReserve", TMode>({
    abi: poolABI,
    functionName: "initReserve",
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link poolABI}__ and `functionName` set to `"initialize"`.
 */
export function usePoolInitialize<TMode extends WriteContractMode = undefined>(
  config: TMode extends "prepared"
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof poolABI,
          "initialize"
        >["request"]["abi"],
        "initialize",
        TMode
      > & { functionName?: "initialize" }
    : UseContractWriteConfig<typeof poolABI, "initialize", TMode> & {
        abi?: never
        functionName?: "initialize"
      } = {} as any
) {
  return useContractWrite<typeof poolABI, "initialize", TMode>({
    abi: poolABI,
    functionName: "initialize",
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link poolABI}__ and `functionName` set to `"liquidationCall"`.
 */
export function usePoolLiquidationCall<
  TMode extends WriteContractMode = undefined
>(
  config: TMode extends "prepared"
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof poolABI,
          "liquidationCall"
        >["request"]["abi"],
        "liquidationCall",
        TMode
      > & { functionName?: "liquidationCall" }
    : UseContractWriteConfig<typeof poolABI, "liquidationCall", TMode> & {
        abi?: never
        functionName?: "liquidationCall"
      } = {} as any
) {
  return useContractWrite<typeof poolABI, "liquidationCall", TMode>({
    abi: poolABI,
    functionName: "liquidationCall",
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link poolABI}__ and `functionName` set to `"mintToTreasury"`.
 */
export function usePoolMintToTreasury<
  TMode extends WriteContractMode = undefined
>(
  config: TMode extends "prepared"
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof poolABI,
          "mintToTreasury"
        >["request"]["abi"],
        "mintToTreasury",
        TMode
      > & { functionName?: "mintToTreasury" }
    : UseContractWriteConfig<typeof poolABI, "mintToTreasury", TMode> & {
        abi?: never
        functionName?: "mintToTreasury"
      } = {} as any
) {
  return useContractWrite<typeof poolABI, "mintToTreasury", TMode>({
    abi: poolABI,
    functionName: "mintToTreasury",
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link poolABI}__ and `functionName` set to `"mintUnbacked"`.
 */
export function usePoolMintUnbacked<
  TMode extends WriteContractMode = undefined
>(
  config: TMode extends "prepared"
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof poolABI,
          "mintUnbacked"
        >["request"]["abi"],
        "mintUnbacked",
        TMode
      > & { functionName?: "mintUnbacked" }
    : UseContractWriteConfig<typeof poolABI, "mintUnbacked", TMode> & {
        abi?: never
        functionName?: "mintUnbacked"
      } = {} as any
) {
  return useContractWrite<typeof poolABI, "mintUnbacked", TMode>({
    abi: poolABI,
    functionName: "mintUnbacked",
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link poolABI}__ and `functionName` set to `"rebalanceStableBorrowRate"`.
 */
export function usePoolRebalanceStableBorrowRate<
  TMode extends WriteContractMode = undefined
>(
  config: TMode extends "prepared"
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof poolABI,
          "rebalanceStableBorrowRate"
        >["request"]["abi"],
        "rebalanceStableBorrowRate",
        TMode
      > & { functionName?: "rebalanceStableBorrowRate" }
    : UseContractWriteConfig<
        typeof poolABI,
        "rebalanceStableBorrowRate",
        TMode
      > & {
        abi?: never
        functionName?: "rebalanceStableBorrowRate"
      } = {} as any
) {
  return useContractWrite<typeof poolABI, "rebalanceStableBorrowRate", TMode>({
    abi: poolABI,
    functionName: "rebalanceStableBorrowRate",
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link poolABI}__ and `functionName` set to `"repay"`.
 */
export function usePoolRepay<TMode extends WriteContractMode = undefined>(
  config: TMode extends "prepared"
    ? UseContractWriteConfig<
        PrepareWriteContractResult<typeof poolABI, "repay">["request"]["abi"],
        "repay",
        TMode
      > & { functionName?: "repay" }
    : UseContractWriteConfig<typeof poolABI, "repay", TMode> & {
        abi?: never
        functionName?: "repay"
      } = {} as any
) {
  return useContractWrite<typeof poolABI, "repay", TMode>({
    abi: poolABI,
    functionName: "repay",
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link poolABI}__ and `functionName` set to `"repayWithATokens"`.
 */
export function usePoolRepayWithATokens<
  TMode extends WriteContractMode = undefined
>(
  config: TMode extends "prepared"
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof poolABI,
          "repayWithATokens"
        >["request"]["abi"],
        "repayWithATokens",
        TMode
      > & { functionName?: "repayWithATokens" }
    : UseContractWriteConfig<typeof poolABI, "repayWithATokens", TMode> & {
        abi?: never
        functionName?: "repayWithATokens"
      } = {} as any
) {
  return useContractWrite<typeof poolABI, "repayWithATokens", TMode>({
    abi: poolABI,
    functionName: "repayWithATokens",
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link poolABI}__ and `functionName` set to `"repayWithPermit"`.
 */
export function usePoolRepayWithPermit<
  TMode extends WriteContractMode = undefined
>(
  config: TMode extends "prepared"
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof poolABI,
          "repayWithPermit"
        >["request"]["abi"],
        "repayWithPermit",
        TMode
      > & { functionName?: "repayWithPermit" }
    : UseContractWriteConfig<typeof poolABI, "repayWithPermit", TMode> & {
        abi?: never
        functionName?: "repayWithPermit"
      } = {} as any
) {
  return useContractWrite<typeof poolABI, "repayWithPermit", TMode>({
    abi: poolABI,
    functionName: "repayWithPermit",
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link poolABI}__ and `functionName` set to `"rescueTokens"`.
 */
export function usePoolRescueTokens<
  TMode extends WriteContractMode = undefined
>(
  config: TMode extends "prepared"
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof poolABI,
          "rescueTokens"
        >["request"]["abi"],
        "rescueTokens",
        TMode
      > & { functionName?: "rescueTokens" }
    : UseContractWriteConfig<typeof poolABI, "rescueTokens", TMode> & {
        abi?: never
        functionName?: "rescueTokens"
      } = {} as any
) {
  return useContractWrite<typeof poolABI, "rescueTokens", TMode>({
    abi: poolABI,
    functionName: "rescueTokens",
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link poolABI}__ and `functionName` set to `"resetIsolationModeTotalDebt"`.
 */
export function usePoolResetIsolationModeTotalDebt<
  TMode extends WriteContractMode = undefined
>(
  config: TMode extends "prepared"
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof poolABI,
          "resetIsolationModeTotalDebt"
        >["request"]["abi"],
        "resetIsolationModeTotalDebt",
        TMode
      > & { functionName?: "resetIsolationModeTotalDebt" }
    : UseContractWriteConfig<
        typeof poolABI,
        "resetIsolationModeTotalDebt",
        TMode
      > & {
        abi?: never
        functionName?: "resetIsolationModeTotalDebt"
      } = {} as any
) {
  return useContractWrite<typeof poolABI, "resetIsolationModeTotalDebt", TMode>(
    {
      abi: poolABI,
      functionName: "resetIsolationModeTotalDebt",
      ...config,
    } as any
  )
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link poolABI}__ and `functionName` set to `"setConfiguration"`.
 */
export function usePoolSetConfiguration<
  TMode extends WriteContractMode = undefined
>(
  config: TMode extends "prepared"
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof poolABI,
          "setConfiguration"
        >["request"]["abi"],
        "setConfiguration",
        TMode
      > & { functionName?: "setConfiguration" }
    : UseContractWriteConfig<typeof poolABI, "setConfiguration", TMode> & {
        abi?: never
        functionName?: "setConfiguration"
      } = {} as any
) {
  return useContractWrite<typeof poolABI, "setConfiguration", TMode>({
    abi: poolABI,
    functionName: "setConfiguration",
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link poolABI}__ and `functionName` set to `"setReserveInterestRateStrategyAddress"`.
 */
export function usePoolSetReserveInterestRateStrategyAddress<
  TMode extends WriteContractMode = undefined
>(
  config: TMode extends "prepared"
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof poolABI,
          "setReserveInterestRateStrategyAddress"
        >["request"]["abi"],
        "setReserveInterestRateStrategyAddress",
        TMode
      > & { functionName?: "setReserveInterestRateStrategyAddress" }
    : UseContractWriteConfig<
        typeof poolABI,
        "setReserveInterestRateStrategyAddress",
        TMode
      > & {
        abi?: never
        functionName?: "setReserveInterestRateStrategyAddress"
      } = {} as any
) {
  return useContractWrite<
    typeof poolABI,
    "setReserveInterestRateStrategyAddress",
    TMode
  >({
    abi: poolABI,
    functionName: "setReserveInterestRateStrategyAddress",
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link poolABI}__ and `functionName` set to `"setUserEMode"`.
 */
export function usePoolSetUserEMode<
  TMode extends WriteContractMode = undefined
>(
  config: TMode extends "prepared"
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof poolABI,
          "setUserEMode"
        >["request"]["abi"],
        "setUserEMode",
        TMode
      > & { functionName?: "setUserEMode" }
    : UseContractWriteConfig<typeof poolABI, "setUserEMode", TMode> & {
        abi?: never
        functionName?: "setUserEMode"
      } = {} as any
) {
  return useContractWrite<typeof poolABI, "setUserEMode", TMode>({
    abi: poolABI,
    functionName: "setUserEMode",
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link poolABI}__ and `functionName` set to `"setUserUseReserveAsCollateral"`.
 */
export function usePoolSetUserUseReserveAsCollateral<
  TMode extends WriteContractMode = undefined
>(
  config: TMode extends "prepared"
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof poolABI,
          "setUserUseReserveAsCollateral"
        >["request"]["abi"],
        "setUserUseReserveAsCollateral",
        TMode
      > & { functionName?: "setUserUseReserveAsCollateral" }
    : UseContractWriteConfig<
        typeof poolABI,
        "setUserUseReserveAsCollateral",
        TMode
      > & {
        abi?: never
        functionName?: "setUserUseReserveAsCollateral"
      } = {} as any
) {
  return useContractWrite<
    typeof poolABI,
    "setUserUseReserveAsCollateral",
    TMode
  >({
    abi: poolABI,
    functionName: "setUserUseReserveAsCollateral",
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link poolABI}__ and `functionName` set to `"supply"`.
 */
export function usePoolSupply<TMode extends WriteContractMode = undefined>(
  config: TMode extends "prepared"
    ? UseContractWriteConfig<
        PrepareWriteContractResult<typeof poolABI, "supply">["request"]["abi"],
        "supply",
        TMode
      > & { functionName?: "supply" }
    : UseContractWriteConfig<typeof poolABI, "supply", TMode> & {
        abi?: never
        functionName?: "supply"
      } = {} as any
) {
  return useContractWrite<typeof poolABI, "supply", TMode>({
    abi: poolABI,
    functionName: "supply",
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link poolABI}__ and `functionName` set to `"supplyWithPermit"`.
 */
export function usePoolSupplyWithPermit<
  TMode extends WriteContractMode = undefined
>(
  config: TMode extends "prepared"
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof poolABI,
          "supplyWithPermit"
        >["request"]["abi"],
        "supplyWithPermit",
        TMode
      > & { functionName?: "supplyWithPermit" }
    : UseContractWriteConfig<typeof poolABI, "supplyWithPermit", TMode> & {
        abi?: never
        functionName?: "supplyWithPermit"
      } = {} as any
) {
  return useContractWrite<typeof poolABI, "supplyWithPermit", TMode>({
    abi: poolABI,
    functionName: "supplyWithPermit",
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link poolABI}__ and `functionName` set to `"swapBorrowRateMode"`.
 */
export function usePoolSwapBorrowRateMode<
  TMode extends WriteContractMode = undefined
>(
  config: TMode extends "prepared"
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof poolABI,
          "swapBorrowRateMode"
        >["request"]["abi"],
        "swapBorrowRateMode",
        TMode
      > & { functionName?: "swapBorrowRateMode" }
    : UseContractWriteConfig<typeof poolABI, "swapBorrowRateMode", TMode> & {
        abi?: never
        functionName?: "swapBorrowRateMode"
      } = {} as any
) {
  return useContractWrite<typeof poolABI, "swapBorrowRateMode", TMode>({
    abi: poolABI,
    functionName: "swapBorrowRateMode",
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link poolABI}__ and `functionName` set to `"updateBridgeProtocolFee"`.
 */
export function usePoolUpdateBridgeProtocolFee<
  TMode extends WriteContractMode = undefined
>(
  config: TMode extends "prepared"
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof poolABI,
          "updateBridgeProtocolFee"
        >["request"]["abi"],
        "updateBridgeProtocolFee",
        TMode
      > & { functionName?: "updateBridgeProtocolFee" }
    : UseContractWriteConfig<
        typeof poolABI,
        "updateBridgeProtocolFee",
        TMode
      > & {
        abi?: never
        functionName?: "updateBridgeProtocolFee"
      } = {} as any
) {
  return useContractWrite<typeof poolABI, "updateBridgeProtocolFee", TMode>({
    abi: poolABI,
    functionName: "updateBridgeProtocolFee",
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link poolABI}__ and `functionName` set to `"updateFlashloanPremiums"`.
 */
export function usePoolUpdateFlashloanPremiums<
  TMode extends WriteContractMode = undefined
>(
  config: TMode extends "prepared"
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof poolABI,
          "updateFlashloanPremiums"
        >["request"]["abi"],
        "updateFlashloanPremiums",
        TMode
      > & { functionName?: "updateFlashloanPremiums" }
    : UseContractWriteConfig<
        typeof poolABI,
        "updateFlashloanPremiums",
        TMode
      > & {
        abi?: never
        functionName?: "updateFlashloanPremiums"
      } = {} as any
) {
  return useContractWrite<typeof poolABI, "updateFlashloanPremiums", TMode>({
    abi: poolABI,
    functionName: "updateFlashloanPremiums",
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link poolABI}__ and `functionName` set to `"withdraw"`.
 */
export function usePoolWithdraw<TMode extends WriteContractMode = undefined>(
  config: TMode extends "prepared"
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof poolABI,
          "withdraw"
        >["request"]["abi"],
        "withdraw",
        TMode
      > & { functionName?: "withdraw" }
    : UseContractWriteConfig<typeof poolABI, "withdraw", TMode> & {
        abi?: never
        functionName?: "withdraw"
      } = {} as any
) {
  return useContractWrite<typeof poolABI, "withdraw", TMode>({
    abi: poolABI,
    functionName: "withdraw",
    ...config,
  } as any)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link poolABI}__.
 */
export function usePreparePoolWrite<TFunctionName extends string>(
  config: Omit<
    UsePrepareContractWriteConfig<typeof poolABI, TFunctionName>,
    "abi"
  > = {} as any
) {
  return usePrepareContractWrite({
    abi: poolABI,
    ...config,
  } as UsePrepareContractWriteConfig<typeof poolABI, TFunctionName>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link poolABI}__ and `functionName` set to `"backUnbacked"`.
 */
export function usePreparePoolBackUnbacked(
  config: Omit<
    UsePrepareContractWriteConfig<typeof poolABI, "backUnbacked">,
    "abi" | "functionName"
  > = {} as any
) {
  return usePrepareContractWrite({
    abi: poolABI,
    functionName: "backUnbacked",
    ...config,
  } as UsePrepareContractWriteConfig<typeof poolABI, "backUnbacked">)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link poolABI}__ and `functionName` set to `"borrow"`.
 */
export function usePreparePoolBorrow(
  config: Omit<
    UsePrepareContractWriteConfig<typeof poolABI, "borrow">,
    "abi" | "functionName"
  > = {} as any
) {
  return usePrepareContractWrite({
    abi: poolABI,
    functionName: "borrow",
    ...config,
  } as UsePrepareContractWriteConfig<typeof poolABI, "borrow">)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link poolABI}__ and `functionName` set to `"configureEModeCategory"`.
 */
export function usePreparePoolConfigureEModeCategory(
  config: Omit<
    UsePrepareContractWriteConfig<typeof poolABI, "configureEModeCategory">,
    "abi" | "functionName"
  > = {} as any
) {
  return usePrepareContractWrite({
    abi: poolABI,
    functionName: "configureEModeCategory",
    ...config,
  } as UsePrepareContractWriteConfig<typeof poolABI, "configureEModeCategory">)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link poolABI}__ and `functionName` set to `"deposit"`.
 */
export function usePreparePoolDeposit(
  config: Omit<
    UsePrepareContractWriteConfig<typeof poolABI, "deposit">,
    "abi" | "functionName"
  > = {} as any
) {
  return usePrepareContractWrite({
    abi: poolABI,
    functionName: "deposit",
    ...config,
  } as UsePrepareContractWriteConfig<typeof poolABI, "deposit">)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link poolABI}__ and `functionName` set to `"dropReserve"`.
 */
export function usePreparePoolDropReserve(
  config: Omit<
    UsePrepareContractWriteConfig<typeof poolABI, "dropReserve">,
    "abi" | "functionName"
  > = {} as any
) {
  return usePrepareContractWrite({
    abi: poolABI,
    functionName: "dropReserve",
    ...config,
  } as UsePrepareContractWriteConfig<typeof poolABI, "dropReserve">)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link poolABI}__ and `functionName` set to `"finalizeTransfer"`.
 */
export function usePreparePoolFinalizeTransfer(
  config: Omit<
    UsePrepareContractWriteConfig<typeof poolABI, "finalizeTransfer">,
    "abi" | "functionName"
  > = {} as any
) {
  return usePrepareContractWrite({
    abi: poolABI,
    functionName: "finalizeTransfer",
    ...config,
  } as UsePrepareContractWriteConfig<typeof poolABI, "finalizeTransfer">)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link poolABI}__ and `functionName` set to `"flashLoan"`.
 */
export function usePreparePoolFlashLoan(
  config: Omit<
    UsePrepareContractWriteConfig<typeof poolABI, "flashLoan">,
    "abi" | "functionName"
  > = {} as any
) {
  return usePrepareContractWrite({
    abi: poolABI,
    functionName: "flashLoan",
    ...config,
  } as UsePrepareContractWriteConfig<typeof poolABI, "flashLoan">)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link poolABI}__ and `functionName` set to `"flashLoanSimple"`.
 */
export function usePreparePoolFlashLoanSimple(
  config: Omit<
    UsePrepareContractWriteConfig<typeof poolABI, "flashLoanSimple">,
    "abi" | "functionName"
  > = {} as any
) {
  return usePrepareContractWrite({
    abi: poolABI,
    functionName: "flashLoanSimple",
    ...config,
  } as UsePrepareContractWriteConfig<typeof poolABI, "flashLoanSimple">)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link poolABI}__ and `functionName` set to `"initReserve"`.
 */
export function usePreparePoolInitReserve(
  config: Omit<
    UsePrepareContractWriteConfig<typeof poolABI, "initReserve">,
    "abi" | "functionName"
  > = {} as any
) {
  return usePrepareContractWrite({
    abi: poolABI,
    functionName: "initReserve",
    ...config,
  } as UsePrepareContractWriteConfig<typeof poolABI, "initReserve">)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link poolABI}__ and `functionName` set to `"initialize"`.
 */
export function usePreparePoolInitialize(
  config: Omit<
    UsePrepareContractWriteConfig<typeof poolABI, "initialize">,
    "abi" | "functionName"
  > = {} as any
) {
  return usePrepareContractWrite({
    abi: poolABI,
    functionName: "initialize",
    ...config,
  } as UsePrepareContractWriteConfig<typeof poolABI, "initialize">)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link poolABI}__ and `functionName` set to `"liquidationCall"`.
 */
export function usePreparePoolLiquidationCall(
  config: Omit<
    UsePrepareContractWriteConfig<typeof poolABI, "liquidationCall">,
    "abi" | "functionName"
  > = {} as any
) {
  return usePrepareContractWrite({
    abi: poolABI,
    functionName: "liquidationCall",
    ...config,
  } as UsePrepareContractWriteConfig<typeof poolABI, "liquidationCall">)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link poolABI}__ and `functionName` set to `"mintToTreasury"`.
 */
export function usePreparePoolMintToTreasury(
  config: Omit<
    UsePrepareContractWriteConfig<typeof poolABI, "mintToTreasury">,
    "abi" | "functionName"
  > = {} as any
) {
  return usePrepareContractWrite({
    abi: poolABI,
    functionName: "mintToTreasury",
    ...config,
  } as UsePrepareContractWriteConfig<typeof poolABI, "mintToTreasury">)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link poolABI}__ and `functionName` set to `"mintUnbacked"`.
 */
export function usePreparePoolMintUnbacked(
  config: Omit<
    UsePrepareContractWriteConfig<typeof poolABI, "mintUnbacked">,
    "abi" | "functionName"
  > = {} as any
) {
  return usePrepareContractWrite({
    abi: poolABI,
    functionName: "mintUnbacked",
    ...config,
  } as UsePrepareContractWriteConfig<typeof poolABI, "mintUnbacked">)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link poolABI}__ and `functionName` set to `"rebalanceStableBorrowRate"`.
 */
export function usePreparePoolRebalanceStableBorrowRate(
  config: Omit<
    UsePrepareContractWriteConfig<typeof poolABI, "rebalanceStableBorrowRate">,
    "abi" | "functionName"
  > = {} as any
) {
  return usePrepareContractWrite({
    abi: poolABI,
    functionName: "rebalanceStableBorrowRate",
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof poolABI,
    "rebalanceStableBorrowRate"
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link poolABI}__ and `functionName` set to `"repay"`.
 */
export function usePreparePoolRepay(
  config: Omit<
    UsePrepareContractWriteConfig<typeof poolABI, "repay">,
    "abi" | "functionName"
  > = {} as any
) {
  return usePrepareContractWrite({
    abi: poolABI,
    functionName: "repay",
    ...config,
  } as UsePrepareContractWriteConfig<typeof poolABI, "repay">)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link poolABI}__ and `functionName` set to `"repayWithATokens"`.
 */
export function usePreparePoolRepayWithATokens(
  config: Omit<
    UsePrepareContractWriteConfig<typeof poolABI, "repayWithATokens">,
    "abi" | "functionName"
  > = {} as any
) {
  return usePrepareContractWrite({
    abi: poolABI,
    functionName: "repayWithATokens",
    ...config,
  } as UsePrepareContractWriteConfig<typeof poolABI, "repayWithATokens">)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link poolABI}__ and `functionName` set to `"repayWithPermit"`.
 */
export function usePreparePoolRepayWithPermit(
  config: Omit<
    UsePrepareContractWriteConfig<typeof poolABI, "repayWithPermit">,
    "abi" | "functionName"
  > = {} as any
) {
  return usePrepareContractWrite({
    abi: poolABI,
    functionName: "repayWithPermit",
    ...config,
  } as UsePrepareContractWriteConfig<typeof poolABI, "repayWithPermit">)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link poolABI}__ and `functionName` set to `"rescueTokens"`.
 */
export function usePreparePoolRescueTokens(
  config: Omit<
    UsePrepareContractWriteConfig<typeof poolABI, "rescueTokens">,
    "abi" | "functionName"
  > = {} as any
) {
  return usePrepareContractWrite({
    abi: poolABI,
    functionName: "rescueTokens",
    ...config,
  } as UsePrepareContractWriteConfig<typeof poolABI, "rescueTokens">)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link poolABI}__ and `functionName` set to `"resetIsolationModeTotalDebt"`.
 */
export function usePreparePoolResetIsolationModeTotalDebt(
  config: Omit<
    UsePrepareContractWriteConfig<
      typeof poolABI,
      "resetIsolationModeTotalDebt"
    >,
    "abi" | "functionName"
  > = {} as any
) {
  return usePrepareContractWrite({
    abi: poolABI,
    functionName: "resetIsolationModeTotalDebt",
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof poolABI,
    "resetIsolationModeTotalDebt"
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link poolABI}__ and `functionName` set to `"setConfiguration"`.
 */
export function usePreparePoolSetConfiguration(
  config: Omit<
    UsePrepareContractWriteConfig<typeof poolABI, "setConfiguration">,
    "abi" | "functionName"
  > = {} as any
) {
  return usePrepareContractWrite({
    abi: poolABI,
    functionName: "setConfiguration",
    ...config,
  } as UsePrepareContractWriteConfig<typeof poolABI, "setConfiguration">)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link poolABI}__ and `functionName` set to `"setReserveInterestRateStrategyAddress"`.
 */
export function usePreparePoolSetReserveInterestRateStrategyAddress(
  config: Omit<
    UsePrepareContractWriteConfig<
      typeof poolABI,
      "setReserveInterestRateStrategyAddress"
    >,
    "abi" | "functionName"
  > = {} as any
) {
  return usePrepareContractWrite({
    abi: poolABI,
    functionName: "setReserveInterestRateStrategyAddress",
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof poolABI,
    "setReserveInterestRateStrategyAddress"
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link poolABI}__ and `functionName` set to `"setUserEMode"`.
 */
export function usePreparePoolSetUserEMode(
  config: Omit<
    UsePrepareContractWriteConfig<typeof poolABI, "setUserEMode">,
    "abi" | "functionName"
  > = {} as any
) {
  return usePrepareContractWrite({
    abi: poolABI,
    functionName: "setUserEMode",
    ...config,
  } as UsePrepareContractWriteConfig<typeof poolABI, "setUserEMode">)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link poolABI}__ and `functionName` set to `"setUserUseReserveAsCollateral"`.
 */
export function usePreparePoolSetUserUseReserveAsCollateral(
  config: Omit<
    UsePrepareContractWriteConfig<
      typeof poolABI,
      "setUserUseReserveAsCollateral"
    >,
    "abi" | "functionName"
  > = {} as any
) {
  return usePrepareContractWrite({
    abi: poolABI,
    functionName: "setUserUseReserveAsCollateral",
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof poolABI,
    "setUserUseReserveAsCollateral"
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link poolABI}__ and `functionName` set to `"supply"`.
 */
export function usePreparePoolSupply(
  config: Omit<
    UsePrepareContractWriteConfig<typeof poolABI, "supply">,
    "abi" | "functionName"
  > = {} as any
) {
  return usePrepareContractWrite({
    abi: poolABI,
    functionName: "supply",
    ...config,
  } as UsePrepareContractWriteConfig<typeof poolABI, "supply">)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link poolABI}__ and `functionName` set to `"supplyWithPermit"`.
 */
export function usePreparePoolSupplyWithPermit(
  config: Omit<
    UsePrepareContractWriteConfig<typeof poolABI, "supplyWithPermit">,
    "abi" | "functionName"
  > = {} as any
) {
  return usePrepareContractWrite({
    abi: poolABI,
    functionName: "supplyWithPermit",
    ...config,
  } as UsePrepareContractWriteConfig<typeof poolABI, "supplyWithPermit">)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link poolABI}__ and `functionName` set to `"swapBorrowRateMode"`.
 */
export function usePreparePoolSwapBorrowRateMode(
  config: Omit<
    UsePrepareContractWriteConfig<typeof poolABI, "swapBorrowRateMode">,
    "abi" | "functionName"
  > = {} as any
) {
  return usePrepareContractWrite({
    abi: poolABI,
    functionName: "swapBorrowRateMode",
    ...config,
  } as UsePrepareContractWriteConfig<typeof poolABI, "swapBorrowRateMode">)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link poolABI}__ and `functionName` set to `"updateBridgeProtocolFee"`.
 */
export function usePreparePoolUpdateBridgeProtocolFee(
  config: Omit<
    UsePrepareContractWriteConfig<typeof poolABI, "updateBridgeProtocolFee">,
    "abi" | "functionName"
  > = {} as any
) {
  return usePrepareContractWrite({
    abi: poolABI,
    functionName: "updateBridgeProtocolFee",
    ...config,
  } as UsePrepareContractWriteConfig<typeof poolABI, "updateBridgeProtocolFee">)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link poolABI}__ and `functionName` set to `"updateFlashloanPremiums"`.
 */
export function usePreparePoolUpdateFlashloanPremiums(
  config: Omit<
    UsePrepareContractWriteConfig<typeof poolABI, "updateFlashloanPremiums">,
    "abi" | "functionName"
  > = {} as any
) {
  return usePrepareContractWrite({
    abi: poolABI,
    functionName: "updateFlashloanPremiums",
    ...config,
  } as UsePrepareContractWriteConfig<typeof poolABI, "updateFlashloanPremiums">)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link poolABI}__ and `functionName` set to `"withdraw"`.
 */
export function usePreparePoolWithdraw(
  config: Omit<
    UsePrepareContractWriteConfig<typeof poolABI, "withdraw">,
    "abi" | "functionName"
  > = {} as any
) {
  return usePrepareContractWrite({
    abi: poolABI,
    functionName: "withdraw",
    ...config,
  } as UsePrepareContractWriteConfig<typeof poolABI, "withdraw">)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link poolABI}__.
 */
export function usePoolEvent<TEventName extends string>(
  config: Omit<
    UseContractEventConfig<typeof poolABI, TEventName>,
    "abi"
  > = {} as any
) {
  return useContractEvent({ abi: poolABI, ...config } as UseContractEventConfig<
    typeof poolABI,
    TEventName
  >)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link poolABI}__ and `eventName` set to `"BackUnbacked"`.
 */
export function usePoolBackUnbackedEvent(
  config: Omit<
    UseContractEventConfig<typeof poolABI, "BackUnbacked">,
    "abi" | "eventName"
  > = {} as any
) {
  return useContractEvent({
    abi: poolABI,
    eventName: "BackUnbacked",
    ...config,
  } as UseContractEventConfig<typeof poolABI, "BackUnbacked">)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link poolABI}__ and `eventName` set to `"Borrow"`.
 */
export function usePoolBorrowEvent(
  config: Omit<
    UseContractEventConfig<typeof poolABI, "Borrow">,
    "abi" | "eventName"
  > = {} as any
) {
  return useContractEvent({
    abi: poolABI,
    eventName: "Borrow",
    ...config,
  } as UseContractEventConfig<typeof poolABI, "Borrow">)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link poolABI}__ and `eventName` set to `"FlashLoan"`.
 */
export function usePoolFlashLoanEvent(
  config: Omit<
    UseContractEventConfig<typeof poolABI, "FlashLoan">,
    "abi" | "eventName"
  > = {} as any
) {
  return useContractEvent({
    abi: poolABI,
    eventName: "FlashLoan",
    ...config,
  } as UseContractEventConfig<typeof poolABI, "FlashLoan">)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link poolABI}__ and `eventName` set to `"IsolationModeTotalDebtUpdated"`.
 */
export function usePoolIsolationModeTotalDebtUpdatedEvent(
  config: Omit<
    UseContractEventConfig<typeof poolABI, "IsolationModeTotalDebtUpdated">,
    "abi" | "eventName"
  > = {} as any
) {
  return useContractEvent({
    abi: poolABI,
    eventName: "IsolationModeTotalDebtUpdated",
    ...config,
  } as UseContractEventConfig<typeof poolABI, "IsolationModeTotalDebtUpdated">)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link poolABI}__ and `eventName` set to `"LiquidationCall"`.
 */
export function usePoolLiquidationCallEvent(
  config: Omit<
    UseContractEventConfig<typeof poolABI, "LiquidationCall">,
    "abi" | "eventName"
  > = {} as any
) {
  return useContractEvent({
    abi: poolABI,
    eventName: "LiquidationCall",
    ...config,
  } as UseContractEventConfig<typeof poolABI, "LiquidationCall">)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link poolABI}__ and `eventName` set to `"MintUnbacked"`.
 */
export function usePoolMintUnbackedEvent(
  config: Omit<
    UseContractEventConfig<typeof poolABI, "MintUnbacked">,
    "abi" | "eventName"
  > = {} as any
) {
  return useContractEvent({
    abi: poolABI,
    eventName: "MintUnbacked",
    ...config,
  } as UseContractEventConfig<typeof poolABI, "MintUnbacked">)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link poolABI}__ and `eventName` set to `"MintedToTreasury"`.
 */
export function usePoolMintedToTreasuryEvent(
  config: Omit<
    UseContractEventConfig<typeof poolABI, "MintedToTreasury">,
    "abi" | "eventName"
  > = {} as any
) {
  return useContractEvent({
    abi: poolABI,
    eventName: "MintedToTreasury",
    ...config,
  } as UseContractEventConfig<typeof poolABI, "MintedToTreasury">)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link poolABI}__ and `eventName` set to `"RebalanceStableBorrowRate"`.
 */
export function usePoolRebalanceStableBorrowRateEvent(
  config: Omit<
    UseContractEventConfig<typeof poolABI, "RebalanceStableBorrowRate">,
    "abi" | "eventName"
  > = {} as any
) {
  return useContractEvent({
    abi: poolABI,
    eventName: "RebalanceStableBorrowRate",
    ...config,
  } as UseContractEventConfig<typeof poolABI, "RebalanceStableBorrowRate">)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link poolABI}__ and `eventName` set to `"Repay"`.
 */
export function usePoolRepayEvent(
  config: Omit<
    UseContractEventConfig<typeof poolABI, "Repay">,
    "abi" | "eventName"
  > = {} as any
) {
  return useContractEvent({
    abi: poolABI,
    eventName: "Repay",
    ...config,
  } as UseContractEventConfig<typeof poolABI, "Repay">)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link poolABI}__ and `eventName` set to `"ReserveDataUpdated"`.
 */
export function usePoolReserveDataUpdatedEvent(
  config: Omit<
    UseContractEventConfig<typeof poolABI, "ReserveDataUpdated">,
    "abi" | "eventName"
  > = {} as any
) {
  return useContractEvent({
    abi: poolABI,
    eventName: "ReserveDataUpdated",
    ...config,
  } as UseContractEventConfig<typeof poolABI, "ReserveDataUpdated">)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link poolABI}__ and `eventName` set to `"ReserveUsedAsCollateralDisabled"`.
 */
export function usePoolReserveUsedAsCollateralDisabledEvent(
  config: Omit<
    UseContractEventConfig<typeof poolABI, "ReserveUsedAsCollateralDisabled">,
    "abi" | "eventName"
  > = {} as any
) {
  return useContractEvent({
    abi: poolABI,
    eventName: "ReserveUsedAsCollateralDisabled",
    ...config,
  } as UseContractEventConfig<
    typeof poolABI,
    "ReserveUsedAsCollateralDisabled"
  >)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link poolABI}__ and `eventName` set to `"ReserveUsedAsCollateralEnabled"`.
 */
export function usePoolReserveUsedAsCollateralEnabledEvent(
  config: Omit<
    UseContractEventConfig<typeof poolABI, "ReserveUsedAsCollateralEnabled">,
    "abi" | "eventName"
  > = {} as any
) {
  return useContractEvent({
    abi: poolABI,
    eventName: "ReserveUsedAsCollateralEnabled",
    ...config,
  } as UseContractEventConfig<typeof poolABI, "ReserveUsedAsCollateralEnabled">)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link poolABI}__ and `eventName` set to `"Supply"`.
 */
export function usePoolSupplyEvent(
  config: Omit<
    UseContractEventConfig<typeof poolABI, "Supply">,
    "abi" | "eventName"
  > = {} as any
) {
  return useContractEvent({
    abi: poolABI,
    eventName: "Supply",
    ...config,
  } as UseContractEventConfig<typeof poolABI, "Supply">)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link poolABI}__ and `eventName` set to `"SwapBorrowRateMode"`.
 */
export function usePoolSwapBorrowRateModeEvent(
  config: Omit<
    UseContractEventConfig<typeof poolABI, "SwapBorrowRateMode">,
    "abi" | "eventName"
  > = {} as any
) {
  return useContractEvent({
    abi: poolABI,
    eventName: "SwapBorrowRateMode",
    ...config,
  } as UseContractEventConfig<typeof poolABI, "SwapBorrowRateMode">)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link poolABI}__ and `eventName` set to `"UserEModeSet"`.
 */
export function usePoolUserEModeSetEvent(
  config: Omit<
    UseContractEventConfig<typeof poolABI, "UserEModeSet">,
    "abi" | "eventName"
  > = {} as any
) {
  return useContractEvent({
    abi: poolABI,
    eventName: "UserEModeSet",
    ...config,
  } as UseContractEventConfig<typeof poolABI, "UserEModeSet">)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link poolABI}__ and `eventName` set to `"Withdraw"`.
 */
export function usePoolWithdrawEvent(
  config: Omit<
    UseContractEventConfig<typeof poolABI, "Withdraw">,
    "abi" | "eventName"
  > = {} as any
) {
  return useContractEvent({
    abi: poolABI,
    eventName: "Withdraw",
    ...config,
  } as UseContractEventConfig<typeof poolABI, "Withdraw">)
}
