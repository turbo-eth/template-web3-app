schema {
  query: Query
  subscription: Subscription
}

"Marks the GraphQL type as indexable entity.  Each type that should be an entity is required to be annotated with this directive."
directive @entity on OBJECT

"Defined a Subgraph ID for an object type"
directive @subgraphId(id: String!) on OBJECT

"creates a virtual field on the entity that may be queried but cannot be set manually through the mappings API."
directive @derivedFrom(field: String!) on FIELD_DEFINITION

scalar BigDecimal

scalar BigInt

input BlockChangedFilter {
  number_gte: Int!
}

input Block_height {
  hash: Bytes
  number: Int
  number_gte: Int
}

scalar Bytes

"""
8 bytes signed integer
"""
scalar Int8

type Key {
  """
  Unique identifier for a key (combination of lock address and token id)
  """
  id: ID!
  """
  In the Unlock ecosystem, a “Lock” is a smart contract that creates (or “mints”) NFTs
  """
  lock: Lock!
  """
  TokenId for a given key
  """
  tokenId: BigInt!
  """
  The address of the key owner
  """
  owner: Bytes!
  """
  An assigned title set on an Unlock key which gives a specific wallet address authorization to transfer, share or cancel
  """
  manager: Bytes
  """
  Time the key expires
  """
  expiration: BigInt!
  """
  The tokenURI on an NFT is a unique identifier
  """
  tokenURI: String
  """
  Block key was created
  """
  createdAtBlock: BigInt!
  """
  Timestamp of the block in which the key was created
  """
  createdAt: BigInt!
  """
  Invoked by a Lock manager to expire the user's key and perform a refund and cancellation of the key
  """
  cancelled: Boolean
  """
  list of transaction hashes for purchase/extensions of a specific token
  """
  transactionsHash: [String!]
}

input Key_filter {
  id: ID
  id_not: ID
  id_gt: ID
  id_lt: ID
  id_gte: ID
  id_lte: ID
  id_in: [ID!]
  id_not_in: [ID!]
  lock: String
  lock_not: String
  lock_gt: String
  lock_lt: String
  lock_gte: String
  lock_lte: String
  lock_in: [String!]
  lock_not_in: [String!]
  lock_contains: String
  lock_contains_nocase: String
  lock_not_contains: String
  lock_not_contains_nocase: String
  lock_starts_with: String
  lock_starts_with_nocase: String
  lock_not_starts_with: String
  lock_not_starts_with_nocase: String
  lock_ends_with: String
  lock_ends_with_nocase: String
  lock_not_ends_with: String
  lock_not_ends_with_nocase: String
  lock_: Lock_filter
  tokenId: BigInt
  tokenId_not: BigInt
  tokenId_gt: BigInt
  tokenId_lt: BigInt
  tokenId_gte: BigInt
  tokenId_lte: BigInt
  tokenId_in: [BigInt!]
  tokenId_not_in: [BigInt!]
  owner: Bytes
  owner_not: Bytes
  owner_gt: Bytes
  owner_lt: Bytes
  owner_gte: Bytes
  owner_lte: Bytes
  owner_in: [Bytes!]
  owner_not_in: [Bytes!]
  owner_contains: Bytes
  owner_not_contains: Bytes
  manager: Bytes
  manager_not: Bytes
  manager_gt: Bytes
  manager_lt: Bytes
  manager_gte: Bytes
  manager_lte: Bytes
  manager_in: [Bytes!]
  manager_not_in: [Bytes!]
  manager_contains: Bytes
  manager_not_contains: Bytes
  expiration: BigInt
  expiration_not: BigInt
  expiration_gt: BigInt
  expiration_lt: BigInt
  expiration_gte: BigInt
  expiration_lte: BigInt
  expiration_in: [BigInt!]
  expiration_not_in: [BigInt!]
  tokenURI: String
  tokenURI_not: String
  tokenURI_gt: String
  tokenURI_lt: String
  tokenURI_gte: String
  tokenURI_lte: String
  tokenURI_in: [String!]
  tokenURI_not_in: [String!]
  tokenURI_contains: String
  tokenURI_contains_nocase: String
  tokenURI_not_contains: String
  tokenURI_not_contains_nocase: String
  tokenURI_starts_with: String
  tokenURI_starts_with_nocase: String
  tokenURI_not_starts_with: String
  tokenURI_not_starts_with_nocase: String
  tokenURI_ends_with: String
  tokenURI_ends_with_nocase: String
  tokenURI_not_ends_with: String
  tokenURI_not_ends_with_nocase: String
  createdAtBlock: BigInt
  createdAtBlock_not: BigInt
  createdAtBlock_gt: BigInt
  createdAtBlock_lt: BigInt
  createdAtBlock_gte: BigInt
  createdAtBlock_lte: BigInt
  createdAtBlock_in: [BigInt!]
  createdAtBlock_not_in: [BigInt!]
  createdAt: BigInt
  createdAt_not: BigInt
  createdAt_gt: BigInt
  createdAt_lt: BigInt
  createdAt_gte: BigInt
  createdAt_lte: BigInt
  createdAt_in: [BigInt!]
  createdAt_not_in: [BigInt!]
  cancelled: Boolean
  cancelled_not: Boolean
  cancelled_in: [Boolean!]
  cancelled_not_in: [Boolean!]
  transactionsHash: [String!]
  transactionsHash_not: [String!]
  transactionsHash_contains: [String!]
  transactionsHash_contains_nocase: [String!]
  transactionsHash_not_contains: [String!]
  transactionsHash_not_contains_nocase: [String!]
  """
  Filter for the block changed event.
  """
  _change_block: BlockChangedFilter
  and: [Key_filter]
  or: [Key_filter]
}

enum Key_orderBy {
  id
  lock
  lock__id
  lock__address
  lock__name
  lock__symbol
  lock__expirationDuration
  lock__tokenAddress
  lock__price
  lock__version
  lock__totalKeys
  lock__maxNumberOfKeys
  lock__maxKeysPerAddress
  lock__createdAtBlock
  lock__lastKeyMintedAt
  lock__deployer
  lock__numberOfReceipts
  tokenId
  owner
  manager
  expiration
  tokenURI
  createdAtBlock
  createdAt
  cancelled
  transactionsHash
}

type Lock {
  """
  Unique ID for the Lock object (uses the lock address)
  """
  id: ID!
  """
  Address of the lock
  """
  address: Bytes!
  """
  A descriptive name for a collection of NFTs in this contract
  """
  name: String
  """
  Token symbol
  """
  symbol: String
  """
  Duration is set the on the lock when you deploy and the expiration which is set on each key when they are minted
  """
  expirationDuration: BigInt
  """
  Address of the 'currency' ERC20 contract if the keys are priced using an ERC20
  """
  tokenAddress: Bytes!
  """
  Price of the keys sold by the lock
  """
  price: BigInt!
  """
  An assigned role set on a Lock contract which gives the highest level of permissions to the wallet address set to that role
  """
  lockManagers: [Bytes!]!
  """
  Unlock Protocol version of a minting contract
  """
  version: BigInt!
  """
  Number of keys minted (expired or not)
  """
  totalKeys: BigInt!
  """
  Maximum number of keys for sale
  """
  maxNumberOfKeys: BigInt
  """
  The maximum number of keys allowed for a single address
  """
  maxKeysPerAddress: BigInt
  """
  Refer to key entity
  """
  keys(skip: Int = 0, first: Int = 100, orderBy: Key_orderBy, orderDirection: OrderDirection, where: Key_filter): [Key!]
  """
  Which block the lock was created
  """
  createdAtBlock: BigInt
  """
  The timestamp of the block in which the last key was minted
  """
  lastKeyMintedAt: BigInt
  """
  Address of the lock deployer
  """
  deployer: Bytes!
  """
  Total number of receipts of lock
  """
  numberOfReceipts: BigInt!
}

type LockStats {
  """
  Transaction Hash
  """
  id: ID!
  """
  Total locks deployed
  """
  totalLocksDeployed: BigInt!
  """
  Total keys sold
  """
  totalKeysSold: BigInt!
}

input LockStats_filter {
  id: ID
  id_not: ID
  id_gt: ID
  id_lt: ID
  id_gte: ID
  id_lte: ID
  id_in: [ID!]
  id_not_in: [ID!]
  totalLocksDeployed: BigInt
  totalLocksDeployed_not: BigInt
  totalLocksDeployed_gt: BigInt
  totalLocksDeployed_lt: BigInt
  totalLocksDeployed_gte: BigInt
  totalLocksDeployed_lte: BigInt
  totalLocksDeployed_in: [BigInt!]
  totalLocksDeployed_not_in: [BigInt!]
  totalKeysSold: BigInt
  totalKeysSold_not: BigInt
  totalKeysSold_gt: BigInt
  totalKeysSold_lt: BigInt
  totalKeysSold_gte: BigInt
  totalKeysSold_lte: BigInt
  totalKeysSold_in: [BigInt!]
  totalKeysSold_not_in: [BigInt!]
  """
  Filter for the block changed event.
  """
  _change_block: BlockChangedFilter
  and: [LockStats_filter]
  or: [LockStats_filter]
}

enum LockStats_orderBy {
  id
  totalLocksDeployed
  totalKeysSold
}

input Lock_filter {
  id: ID
  id_not: ID
  id_gt: ID
  id_lt: ID
  id_gte: ID
  id_lte: ID
  id_in: [ID!]
  id_not_in: [ID!]
  address: Bytes
  address_not: Bytes
  address_gt: Bytes
  address_lt: Bytes
  address_gte: Bytes
  address_lte: Bytes
  address_in: [Bytes!]
  address_not_in: [Bytes!]
  address_contains: Bytes
  address_not_contains: Bytes
  name: String
  name_not: String
  name_gt: String
  name_lt: String
  name_gte: String
  name_lte: String
  name_in: [String!]
  name_not_in: [String!]
  name_contains: String
  name_contains_nocase: String
  name_not_contains: String
  name_not_contains_nocase: String
  name_starts_with: String
  name_starts_with_nocase: String
  name_not_starts_with: String
  name_not_starts_with_nocase: String
  name_ends_with: String
  name_ends_with_nocase: String
  name_not_ends_with: String
  name_not_ends_with_nocase: String
  symbol: String
  symbol_not: String
  symbol_gt: String
  symbol_lt: String
  symbol_gte: String
  symbol_lte: String
  symbol_in: [String!]
  symbol_not_in: [String!]
  symbol_contains: String
  symbol_contains_nocase: String
  symbol_not_contains: String
  symbol_not_contains_nocase: String
  symbol_starts_with: String
  symbol_starts_with_nocase: String
  symbol_not_starts_with: String
  symbol_not_starts_with_nocase: String
  symbol_ends_with: String
  symbol_ends_with_nocase: String
  symbol_not_ends_with: String
  symbol_not_ends_with_nocase: String
  expirationDuration: BigInt
  expirationDuration_not: BigInt
  expirationDuration_gt: BigInt
  expirationDuration_lt: BigInt
  expirationDuration_gte: BigInt
  expirationDuration_lte: BigInt
  expirationDuration_in: [BigInt!]
  expirationDuration_not_in: [BigInt!]
  tokenAddress: Bytes
  tokenAddress_not: Bytes
  tokenAddress_gt: Bytes
  tokenAddress_lt: Bytes
  tokenAddress_gte: Bytes
  tokenAddress_lte: Bytes
  tokenAddress_in: [Bytes!]
  tokenAddress_not_in: [Bytes!]
  tokenAddress_contains: Bytes
  tokenAddress_not_contains: Bytes
  price: BigInt
  price_not: BigInt
  price_gt: BigInt
  price_lt: BigInt
  price_gte: BigInt
  price_lte: BigInt
  price_in: [BigInt!]
  price_not_in: [BigInt!]
  lockManagers: [Bytes!]
  lockManagers_not: [Bytes!]
  lockManagers_contains: [Bytes!]
  lockManagers_contains_nocase: [Bytes!]
  lockManagers_not_contains: [Bytes!]
  lockManagers_not_contains_nocase: [Bytes!]
  version: BigInt
  version_not: BigInt
  version_gt: BigInt
  version_lt: BigInt
  version_gte: BigInt
  version_lte: BigInt
  version_in: [BigInt!]
  version_not_in: [BigInt!]
  totalKeys: BigInt
  totalKeys_not: BigInt
  totalKeys_gt: BigInt
  totalKeys_lt: BigInt
  totalKeys_gte: BigInt
  totalKeys_lte: BigInt
  totalKeys_in: [BigInt!]
  totalKeys_not_in: [BigInt!]
  maxNumberOfKeys: BigInt
  maxNumberOfKeys_not: BigInt
  maxNumberOfKeys_gt: BigInt
  maxNumberOfKeys_lt: BigInt
  maxNumberOfKeys_gte: BigInt
  maxNumberOfKeys_lte: BigInt
  maxNumberOfKeys_in: [BigInt!]
  maxNumberOfKeys_not_in: [BigInt!]
  maxKeysPerAddress: BigInt
  maxKeysPerAddress_not: BigInt
  maxKeysPerAddress_gt: BigInt
  maxKeysPerAddress_lt: BigInt
  maxKeysPerAddress_gte: BigInt
  maxKeysPerAddress_lte: BigInt
  maxKeysPerAddress_in: [BigInt!]
  maxKeysPerAddress_not_in: [BigInt!]
  keys_: Key_filter
  createdAtBlock: BigInt
  createdAtBlock_not: BigInt
  createdAtBlock_gt: BigInt
  createdAtBlock_lt: BigInt
  createdAtBlock_gte: BigInt
  createdAtBlock_lte: BigInt
  createdAtBlock_in: [BigInt!]
  createdAtBlock_not_in: [BigInt!]
  lastKeyMintedAt: BigInt
  lastKeyMintedAt_not: BigInt
  lastKeyMintedAt_gt: BigInt
  lastKeyMintedAt_lt: BigInt
  lastKeyMintedAt_gte: BigInt
  lastKeyMintedAt_lte: BigInt
  lastKeyMintedAt_in: [BigInt!]
  lastKeyMintedAt_not_in: [BigInt!]
  deployer: Bytes
  deployer_not: Bytes
  deployer_gt: Bytes
  deployer_lt: Bytes
  deployer_gte: Bytes
  deployer_lte: Bytes
  deployer_in: [Bytes!]
  deployer_not_in: [Bytes!]
  deployer_contains: Bytes
  deployer_not_contains: Bytes
  numberOfReceipts: BigInt
  numberOfReceipts_not: BigInt
  numberOfReceipts_gt: BigInt
  numberOfReceipts_lt: BigInt
  numberOfReceipts_gte: BigInt
  numberOfReceipts_lte: BigInt
  numberOfReceipts_in: [BigInt!]
  numberOfReceipts_not_in: [BigInt!]
  """
  Filter for the block changed event.
  """
  _change_block: BlockChangedFilter
  and: [Lock_filter]
  or: [Lock_filter]
}

enum Lock_orderBy {
  id
  address
  name
  symbol
  expirationDuration
  tokenAddress
  price
  lockManagers
  version
  totalKeys
  maxNumberOfKeys
  maxKeysPerAddress
  keys
  createdAtBlock
  lastKeyMintedAt
  deployer
  numberOfReceipts
}

"""
Defines the order direction, either ascending or descending
"""
enum OrderDirection {
  asc
  desc
}

type Query {
  lock(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): Lock
  locks(
    skip: Int = 0
    first: Int = 100
    orderBy: Lock_orderBy
    orderDirection: OrderDirection
    where: Lock_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [Lock!]!
  key(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): Key
  keys(
    skip: Int = 0
    first: Int = 100
    orderBy: Key_orderBy
    orderDirection: OrderDirection
    where: Key_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [Key!]!
  unlockDailyData(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): UnlockDailyData
  unlockDailyDatas(
    skip: Int = 0
    first: Int = 100
    orderBy: UnlockDailyData_orderBy
    orderDirection: OrderDirection
    where: UnlockDailyData_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [UnlockDailyData!]!
  lockStats(
    skip: Int = 0
    first: Int = 100
    orderBy: LockStats_orderBy
    orderDirection: OrderDirection
    where: LockStats_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [LockStats!]!
  unlockStats(
    skip: Int = 0
    first: Int = 100
    orderBy: UnlockStats_orderBy
    orderDirection: OrderDirection
    where: UnlockStats_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [UnlockStats!]!
  receipt(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): Receipt
  receipts(
    skip: Int = 0
    first: Int = 100
    orderBy: Receipt_orderBy
    orderDirection: OrderDirection
    where: Receipt_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [Receipt!]!
  """
  Access to subgraph metadata
  """
  _meta(block: Block_height): _Meta_
}

type Receipt {
  """
  Transaction Hash
  """
  id: ID!
  """
  Timestamp
  """
  timestamp: BigInt!
  """
  Sender of the transaction
  """
  sender: String!
  """
  Payer in the case of an ERC20 lock renewal, the sender and payer might differ
  """
  payer: String
  """
  Address of the Lock smart contract
  """
  lockAddress: String!
  """
  Address of the 'currency' ERC20 contract if the keys are priced using an ERC20
  """
  tokenAddress: String!
  """
  amount
  """
  amountTransferred: BigInt!
  """
  Total gas paid
  """
  gasTotal: BigInt!
  """
  Increasing number of receipt
  """
  receiptNumber: BigInt!
}

input Receipt_filter {
  id: ID
  id_not: ID
  id_gt: ID
  id_lt: ID
  id_gte: ID
  id_lte: ID
  id_in: [ID!]
  id_not_in: [ID!]
  timestamp: BigInt
  timestamp_not: BigInt
  timestamp_gt: BigInt
  timestamp_lt: BigInt
  timestamp_gte: BigInt
  timestamp_lte: BigInt
  timestamp_in: [BigInt!]
  timestamp_not_in: [BigInt!]
  sender: String
  sender_not: String
  sender_gt: String
  sender_lt: String
  sender_gte: String
  sender_lte: String
  sender_in: [String!]
  sender_not_in: [String!]
  sender_contains: String
  sender_contains_nocase: String
  sender_not_contains: String
  sender_not_contains_nocase: String
  sender_starts_with: String
  sender_starts_with_nocase: String
  sender_not_starts_with: String
  sender_not_starts_with_nocase: String
  sender_ends_with: String
  sender_ends_with_nocase: String
  sender_not_ends_with: String
  sender_not_ends_with_nocase: String
  payer: String
  payer_not: String
  payer_gt: String
  payer_lt: String
  payer_gte: String
  payer_lte: String
  payer_in: [String!]
  payer_not_in: [String!]
  payer_contains: String
  payer_contains_nocase: String
  payer_not_contains: String
  payer_not_contains_nocase: String
  payer_starts_with: String
  payer_starts_with_nocase: String
  payer_not_starts_with: String
  payer_not_starts_with_nocase: String
  payer_ends_with: String
  payer_ends_with_nocase: String
  payer_not_ends_with: String
  payer_not_ends_with_nocase: String
  lockAddress: String
  lockAddress_not: String
  lockAddress_gt: String
  lockAddress_lt: String
  lockAddress_gte: String
  lockAddress_lte: String
  lockAddress_in: [String!]
  lockAddress_not_in: [String!]
  lockAddress_contains: String
  lockAddress_contains_nocase: String
  lockAddress_not_contains: String
  lockAddress_not_contains_nocase: String
  lockAddress_starts_with: String
  lockAddress_starts_with_nocase: String
  lockAddress_not_starts_with: String
  lockAddress_not_starts_with_nocase: String
  lockAddress_ends_with: String
  lockAddress_ends_with_nocase: String
  lockAddress_not_ends_with: String
  lockAddress_not_ends_with_nocase: String
  tokenAddress: String
  tokenAddress_not: String
  tokenAddress_gt: String
  tokenAddress_lt: String
  tokenAddress_gte: String
  tokenAddress_lte: String
  tokenAddress_in: [String!]
  tokenAddress_not_in: [String!]
  tokenAddress_contains: String
  tokenAddress_contains_nocase: String
  tokenAddress_not_contains: String
  tokenAddress_not_contains_nocase: String
  tokenAddress_starts_with: String
  tokenAddress_starts_with_nocase: String
  tokenAddress_not_starts_with: String
  tokenAddress_not_starts_with_nocase: String
  tokenAddress_ends_with: String
  tokenAddress_ends_with_nocase: String
  tokenAddress_not_ends_with: String
  tokenAddress_not_ends_with_nocase: String
  amountTransferred: BigInt
  amountTransferred_not: BigInt
  amountTransferred_gt: BigInt
  amountTransferred_lt: BigInt
  amountTransferred_gte: BigInt
  amountTransferred_lte: BigInt
  amountTransferred_in: [BigInt!]
  amountTransferred_not_in: [BigInt!]
  gasTotal: BigInt
  gasTotal_not: BigInt
  gasTotal_gt: BigInt
  gasTotal_lt: BigInt
  gasTotal_gte: BigInt
  gasTotal_lte: BigInt
  gasTotal_in: [BigInt!]
  gasTotal_not_in: [BigInt!]
  receiptNumber: BigInt
  receiptNumber_not: BigInt
  receiptNumber_gt: BigInt
  receiptNumber_lt: BigInt
  receiptNumber_gte: BigInt
  receiptNumber_lte: BigInt
  receiptNumber_in: [BigInt!]
  receiptNumber_not_in: [BigInt!]
  """
  Filter for the block changed event.
  """
  _change_block: BlockChangedFilter
  and: [Receipt_filter]
  or: [Receipt_filter]
}

enum Receipt_orderBy {
  id
  timestamp
  sender
  payer
  lockAddress
  tokenAddress
  amountTransferred
  gasTotal
  receiptNumber
}

type Subscription {
  lock(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): Lock
  locks(
    skip: Int = 0
    first: Int = 100
    orderBy: Lock_orderBy
    orderDirection: OrderDirection
    where: Lock_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [Lock!]!
  key(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): Key
  keys(
    skip: Int = 0
    first: Int = 100
    orderBy: Key_orderBy
    orderDirection: OrderDirection
    where: Key_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [Key!]!
  unlockDailyData(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): UnlockDailyData
  unlockDailyDatas(
    skip: Int = 0
    first: Int = 100
    orderBy: UnlockDailyData_orderBy
    orderDirection: OrderDirection
    where: UnlockDailyData_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [UnlockDailyData!]!
  lockStats(
    skip: Int = 0
    first: Int = 100
    orderBy: LockStats_orderBy
    orderDirection: OrderDirection
    where: LockStats_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [LockStats!]!
  unlockStats(
    skip: Int = 0
    first: Int = 100
    orderBy: UnlockStats_orderBy
    orderDirection: OrderDirection
    where: UnlockStats_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [UnlockStats!]!
  receipt(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): Receipt
  receipts(
    skip: Int = 0
    first: Int = 100
    orderBy: Receipt_orderBy
    orderDirection: OrderDirection
    where: Receipt_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [Receipt!]!
  """
  Access to subgraph metadata
  """
  _meta(block: Block_height): _Meta_
}

type UnlockDailyData {
  """
  Day identifier
  """
  id: ID!
  """
  Number of locks deployed on that day
  """
  lockDeployed: BigInt!
  """
  Total number of locks deployed
  """
  totalLockDeployed: BigInt!
  """
  Daily number of keys sold
  """
  keysSold: BigInt!
  """
  Total number of keys sold
  """
  totalKeysSold: BigInt!
  """
  Daily number of active locks (active locks have minted at least one membership in the last 30 days
  """
  activeLocks: [Bytes!]
  """
  Total value exchanged on the network
  """
  grossNetworkProduct: BigInt!
}

input UnlockDailyData_filter {
  id: ID
  id_not: ID
  id_gt: ID
  id_lt: ID
  id_gte: ID
  id_lte: ID
  id_in: [ID!]
  id_not_in: [ID!]
  lockDeployed: BigInt
  lockDeployed_not: BigInt
  lockDeployed_gt: BigInt
  lockDeployed_lt: BigInt
  lockDeployed_gte: BigInt
  lockDeployed_lte: BigInt
  lockDeployed_in: [BigInt!]
  lockDeployed_not_in: [BigInt!]
  totalLockDeployed: BigInt
  totalLockDeployed_not: BigInt
  totalLockDeployed_gt: BigInt
  totalLockDeployed_lt: BigInt
  totalLockDeployed_gte: BigInt
  totalLockDeployed_lte: BigInt
  totalLockDeployed_in: [BigInt!]
  totalLockDeployed_not_in: [BigInt!]
  keysSold: BigInt
  keysSold_not: BigInt
  keysSold_gt: BigInt
  keysSold_lt: BigInt
  keysSold_gte: BigInt
  keysSold_lte: BigInt
  keysSold_in: [BigInt!]
  keysSold_not_in: [BigInt!]
  totalKeysSold: BigInt
  totalKeysSold_not: BigInt
  totalKeysSold_gt: BigInt
  totalKeysSold_lt: BigInt
  totalKeysSold_gte: BigInt
  totalKeysSold_lte: BigInt
  totalKeysSold_in: [BigInt!]
  totalKeysSold_not_in: [BigInt!]
  activeLocks: [Bytes!]
  activeLocks_not: [Bytes!]
  activeLocks_contains: [Bytes!]
  activeLocks_contains_nocase: [Bytes!]
  activeLocks_not_contains: [Bytes!]
  activeLocks_not_contains_nocase: [Bytes!]
  grossNetworkProduct: BigInt
  grossNetworkProduct_not: BigInt
  grossNetworkProduct_gt: BigInt
  grossNetworkProduct_lt: BigInt
  grossNetworkProduct_gte: BigInt
  grossNetworkProduct_lte: BigInt
  grossNetworkProduct_in: [BigInt!]
  grossNetworkProduct_not_in: [BigInt!]
  """
  Filter for the block changed event.
  """
  _change_block: BlockChangedFilter
  and: [UnlockDailyData_filter]
  or: [UnlockDailyData_filter]
}

enum UnlockDailyData_orderBy {
  id
  lockDeployed
  totalLockDeployed
  keysSold
  totalKeysSold
  activeLocks
  grossNetworkProduct
}

type UnlockStats {
  """
  Identifier
  """
  id: ID!
  """
  Total number of locks deployed
  """
  totalLockDeployed: BigInt!
  """
  Total number of keys sold
  """
  totalKeysSold: BigInt!
  """
  Total value exchanged on the network
  """
  grossNetworkProduct: BigInt!
}

input UnlockStats_filter {
  id: ID
  id_not: ID
  id_gt: ID
  id_lt: ID
  id_gte: ID
  id_lte: ID
  id_in: [ID!]
  id_not_in: [ID!]
  totalLockDeployed: BigInt
  totalLockDeployed_not: BigInt
  totalLockDeployed_gt: BigInt
  totalLockDeployed_lt: BigInt
  totalLockDeployed_gte: BigInt
  totalLockDeployed_lte: BigInt
  totalLockDeployed_in: [BigInt!]
  totalLockDeployed_not_in: [BigInt!]
  totalKeysSold: BigInt
  totalKeysSold_not: BigInt
  totalKeysSold_gt: BigInt
  totalKeysSold_lt: BigInt
  totalKeysSold_gte: BigInt
  totalKeysSold_lte: BigInt
  totalKeysSold_in: [BigInt!]
  totalKeysSold_not_in: [BigInt!]
  grossNetworkProduct: BigInt
  grossNetworkProduct_not: BigInt
  grossNetworkProduct_gt: BigInt
  grossNetworkProduct_lt: BigInt
  grossNetworkProduct_gte: BigInt
  grossNetworkProduct_lte: BigInt
  grossNetworkProduct_in: [BigInt!]
  grossNetworkProduct_not_in: [BigInt!]
  """
  Filter for the block changed event.
  """
  _change_block: BlockChangedFilter
  and: [UnlockStats_filter]
  or: [UnlockStats_filter]
}

enum UnlockStats_orderBy {
  id
  totalLockDeployed
  totalKeysSold
  grossNetworkProduct
}

type _Block_ {
  """
  The hash of the block
  """
  hash: Bytes
  """
  The block number
  """
  number: Int!
  """
  Integer representation of the timestamp stored in blocks for the chain
  """
  timestamp: Int
}

"""
The type for the top-level _meta field
"""
type _Meta_ {
  """
  Information about a specific subgraph block. The hash of the block
  will be null if the _meta field has a block constraint that asks for
  a block number. It will be filled if the _meta field has no block constraint
  and therefore asks for the latest  block
  """
  block: _Block_!
  """
  The deployment ID
  """
  deployment: String!
  """
  If `true`, the subgraph encountered indexing errors at some past block
  """
  hasIndexingErrors: Boolean!
}

enum _SubgraphErrorPolicy_ {
  """
  Data will be returned even if the subgraph has indexing errors
  """
  allow
  """
  If the subgraph has indexing errors, data will be omitted. The default.
  """
  deny
}
